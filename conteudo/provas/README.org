#+STARTUP: overview
#+STARTUP: indent

Em ordem cronológica reversa.

PR são bem-vindos para popular esta página.

* P1
** 2025/1
*** E1

1. A ER reconhecida é esta =((ab)+|b*)b=
2. Foi construído pois todos os elementos básicos, ou seja, os
   reconhecedores dos símbolos =a= e =b= (nos diferentes locais) estão bem
   isolados e organizados por intermédio de produções vazias. A
   implementação das duas repetições também faz uso de novos estados
   de início e fim.
3. Fech-\epsilon(0) = {0, 1, 2, 3, 8, 9, 10, 12, 13, 14, 15};
4. Fech-\epsilon(Mov(A, b)) = {11, 16, 12, 13, 14, 15, 8, 9, 10, 17};
 
*** E2

1. A resposta

   |   | Pri   | Seq   |
   |---+-------+-------|
   | S | a b c | $     |
   | A | a \epsilon   | a b c |
   | B | a b \epsilon | a c   |
   | C | a c   | $     |

   Podemos empregar [[https://github.com/schnorr/ellerre][ellerre]] para verificar a resposta.
   #+begin_src shell :results output :exports both
   echo 'S => A B C ;
A => a | ;
B => a | b | ;
C => a | c ;' > gramatica.ee
   ./firstfollow < gramatica.ee | grep -A10 'First sets'
   #+end_src

   #+RESULTS:
   #+begin_example
   First sets:
   S -- a b c 
   A -- ε a 
   C -- a c 
   B -- ε a b 

   Follow sets:
   S -- $ 
   A -- a b c 
   C -- $ 
   B -- a c 
   #+end_example

2. Segue a tabela LL(1).
   |---+-----+-----+-----+---|
   |   | a   | b   | c   | $ |
   |---+-----+-----+-----+---|
   | S | ABC | ABC | ABC |   |
   |---+-----+-----+-----+---|
   | A | a   |     |     |   |
   |   | \epsilon   | \epsilon   | \epsilon   |   |
   |---+-----+-----+-----+---|
   | B | a   | b   |     |   |
   |   | \epsilon   |     | \epsilon   |   |
   |---+-----+-----+-----+---|
   | C | a   |     | c   |   |
   |---+-----+-----+-----+---|

3. A gramática não é LL(1) pois:
   - Nas regras A->a|\epsilon, o conjunto Pri(a) intersecta com Seq(A).
   - Nas regras B->b|\epsilon, o conjunto Pri(a) intersecta com Seq(B).

*** E3

1. Vamos empregar [[https://github.com/schnorr/ellerre][ellerre]] para obter a resposta.
   #+begin_src shell :results output :exports both
   echo 'S => a B c ;
B => b | b D ;
D => c ;' > gramatica.ee
   ./lr0 < gramatica.ee > /dev/null
   ./firstfollow < gramatica.ee
   dot -Tpng LR0.dot -o resp_2025_1-E3-LR0.png
   #+end_src

   #+RESULTS:

   [[./resp_2025_1-E3-LR0.png]]

2. A gramática não é LR(0) pois no estado 4 temos um item completo
   juntamente com empilhamentos (conflito empilha-reduz).

3. A gramática não é SLR(1) pois no estado 4 temos um item completo
   que indica redução com o token =c= (que faz parte do conjunto
   sequência do não-terminal =B=) ao mesmo tempo que temos empilhamentos
   com este mesmo token. O conflito empilha-reduz se mantém.
   #+begin_src shell :results output :exports both
   ./firstfollow < gramatica.ee | grep -A10 'Follow sets'
   #+end_src

   #+RESULTS:
   : Follow sets:
   : S -- $ 
   : B -- c 
   : D -- c 

*** E4

1. Não é uma gramática LR(0) pois no estado 3 temos um item completo
   indicando que trata-se de um estado de redução, ao mesmo tempo que
   temos uma transição que indica empilhamento. Trata-se portanto do
   conflito empilha-reduz no estado 3.
2. Calculando o conjunto sequência dos não-terminais com [[https://github.com/schnorr/ellerre][ellerre]] para
   nos auxiliar na resposta. A redução no estado 3 apenas ocorrerá
   quando o token na entrada for algum do conjunto sequência de E
   (não-terminal na cabeça da regra do item completo neste estado),
   que neste caso é o $. Como a transição a partir de 3 é com o token
   +, não temos mais conflito empilha-reduz, sendo assim a gramática é
   SLR(1).
   #+begin_src shell :results output :exports both
   echo 'S => E ;
E => T | T + E ;
T => id ;' > gramatica.ee
   ./firstfollow < gramatica.ee | grep -A10 'Follow sets'
   #+end_src

   #+RESULTS:
   : Follow sets:
   : S -- $ 
   : E -- $ 
   : T -- $ +
   
3. A gramática é LR(1) pois se ela é SLR(1) ela será
   LR(1). Detalhamento sobre o autômato LR(1), observamos que não
   existem itens completos onde o lookahead (após a vírgula) é igual
   ao símbolo empregado na transição a partir do estado do item.

4. Segue a tabela SLR(1).

   | / |   |  < | > |        |   |   |   |
   |   |   | id | + | $      | S | E | T |
   |---+---+----+---+--------+---+---+---|
   |   | 0 |  4 |   |        | 1 | 2 | 3 |
   |   | 1 |    |   | aceita |   |   |   |
   |   | 2 |    |   | R      |   |   |   |
   |   | 3 |    | 5 | R      |   |   |   |
   |   | 4 |    | R | R      |   |   |   |
   |   | 5 |  4 |   |        |   | 6 | 3 |
   |   | 6 |    |   | R      |   |   |   |

5. A análise LR usando a tabela SLR(1) acima. Novamente o =%= marca o
   final da pilha e da entrada.

   | / | <l>       |       <r> |              |
   |   | Pilha     |   Entrada | Ação         |
   |---+-----------+-----------+--------------|
   |   | % 0       | id + id % | 4            |
   |   | % 0 4     |    + id % | R (T -> id)  |
   |   | % 0 3     |    + id % | 5            |
   |   | % 0 3 5   |      id % | 4            |
   |   | % 0 3 5 4 |         % | R (T -> id)  |
   |   | % 0 3 5 3 |         % | R (E -> T)   |
   |   | % 0 3 5 6 |         % | R (E -> T+E) |
   |   | % 0 2     |         % | R (S -> E)   |
   |   | % 0 1     |         % | aceita       |

** 2024/2
*** E1

1. Sim, esta =(a*|(bc)*)=.
2. Não, pois se fosse construído utilizando os "blocos de construção
   de thompson" poderíamos observar transições vazias entre tais
   blocos. Por exemplo, para uma concatenação como =ab=, teríamos um
   estado vazio ligando o estado que reconhece =a= e o que reconhece =b=,
   o que não ocorre entre os estados 4 e 5 neste autômato.
3. Fech-\epsilon(0) = {0, 1, 2, 3, 6, 7, 14, 8, 9, 10, 12, 13} = A;
4. Mov(A, a) = {11}, mas habitualmente calcula-se o Fech-\epsilon do
   movimento (pois após a transição do símbolo ainda pode-se navegar
   com pelas produções vazias), portanto a resposta completa é
   Fech-\epsilon(Mov(A, a)) = {11, 12, 13, 14, 8, 9, 10};

*** E2

1. Os conjuntos primeiro e sequência para os NT foram:
   |   | Primeiro  | Sequência |
   |---+-----------+-----------|
   | S | n o r t \epsilon | $         |
   |---+-----------+-----------|
   | X | n o r t \epsilon | n o $     |
   |---+-----------+-----------|
   | P | n o \epsilon     | $         |
   |---+-----------+-----------|
   | E | o r t \epsilon   | n o $     |
   |---+-----------+-----------|

   Conferindo com [[https://github.com/schnorr/ellerre][ellerre]]:

   #+begin_src shell :results output :exports both
   echo 'S => X P ;
   X => n | o | r E n | E ;
   P => n | o | ;
   E => o | r | t | ;' > gramatica.ee
      ./lr0 < gramatica.ee > /dev/null
      ./firstfollow < gramatica.ee
   #+end_src

   #+RESULTS:
   #+begin_example
   Grammar with 12 rules and 8 symbols (4 non-terminals):
   S ⇒ X P 
   X ⇒ n 
   X ⇒ o 
   X ⇒ r E n 
   X ⇒ E 
   P ⇒ n 
   P ⇒ o 
   P ⇒ ε 
   E ⇒ o 
   E ⇒ r 
   E ⇒ t 
   E ⇒ ε 

   First sets:
   S -- ε o t n r 
   X -- ε o t n r 
   P -- ε o n 
   E -- ε o t r 

   Follow sets:
   S -- $ 
   X -- $ o n 
   P -- $ 
   E -- $ o n 
   #+end_example

2. A tabela criada para esta gramática foi (com as razões):
   - As razões não eram necessárias de serem explicitadas na resposta.

   |---+----+----+-------+----+----+--------------------------|
   |   | n  | o  | r     | t  | $  | Razão                    |
   |---+----+----+-------+----+----+--------------------------|
   | S | XP | XP | XP    | XP |    | Pri(XP)                  |
   |   |    |    |       |    | XP | Seq(S) pois XP => \epsilon      |
   |---+----+----+-------+----+----+--------------------------|
   | X | n  | o  | r E n |    |    | Pri(n), Pri(o), Pri(rEN) |
   |   |    | E  | E     | E  |    | Pri(E)                   |
   |   | E  | E  |       |    | E  | Seq(X) pois E => \epsilon       |
   |---+----+----+-------+----+----+--------------------------|
   | P | n  | o  |       |    |    | Pri(n), Pri(o)           |
   |   |    |    |       |    | \epsilon  | Seq(P)                   |
   |---+----+----+-------+----+----+--------------------------|
   | E |    | o  | r     | t  |    | Pri(o), Pri(r), Pri(t)   |
   |   | \epsilon  | \epsilon  |       |    | \epsilon  | Seq(E)                   |
   |---+----+----+-------+----+----+--------------------------|

3. A gramática não é LL(1), como podemos observar pela tabela que
   apresenta mais de uma ação em uma dada célula, assim temos um
   conflito. Observando somente a gramática, especificamente no par de
   regra =S -> o | E=, poderíamos concluir também que não é pois Pri(E)
   contém \epsilon, no forçando a analisar Seq(S) e neste conjunto temos o =o=,
   conflitando com Pri(o).

4. Análise para entrada vazia

   | / |   <r> |     <r> | <l>     |
   |   | Pilha | Entrada | Ação    |
   |---+-------+---------+---------|
   |   |   S % |       % | S -> xp |
   |   |  XP % |       % | X -> E  |
   |   |  EP % |       % | E -> \epsilon  |
   |   |   P % |       % | P -> \epsilon  |
   |   |     % |       % | aceita  |

   Mesmo havendo conflitos na nossa linguagem (conforme observamos na
   tabela), foi possível reconhecer a entrada pois não encontramos
   nenhum deles no caminho.

5. Análise para entrada acda
   - Nota: esse item desta questão foi anulada (ponto distribuído para todos).

   | / |   <r> |     <r> | <l>             |
   |   | Pilha | Entrada | Ação            |
   |---+-------+---------+-----------------|
   |   |   S % |  acda % | erro, esses tokens nem fazem parte da gramática  |

*** E3

1. Podemos utilizar [[https://github.com/schnorr/ellerre][ellerre]] para obter o autômato.
   - Na prova mesmo, a resposta deveria incluir os estados 0 e 1 e
     mais dois quaisquer.

   #+begin_src shell :results output :exports both
   echo 'S => a [ L ] | a ;
   L => S L | S ;' > gramatica.ee
   ./lr0 < gramatica.ee > /dev/null
   ./firstfollow < gramatica.ee
   dot -Tpng LR0.dot -o resp_2024_2-E3-LR0.png
   #+end_src

   #+RESULTS:
   #+begin_example
   Grammar with 4 rules and 5 symbols (2 non-terminals):
   S ⇒ a [ L ] 
   S ⇒ a 
   L ⇒ S L 
   L ⇒ S 

   First sets:
   S -- a 
   L -- a 

   Follow sets:
   S -- $ a ] 
   L -- ] 
   #+end_example

   [[./resp_2024_2-E3-LR0.png]]

2. Não, pois em LR0 os itens completos precisam estar sozinhos no
   estado dito então de redução.  Podemos observar um conflito
   empilha-reduz no estado #2 e também no estado #4.

3. Sim, a gramática é SLR(1) pois 1/ o conflito do estado #2 é
   resolvido visto que Seq(S) - a cabeça da produção do item
   completo - não contém =[= (o símbolo que indica um movimento a partir
   daquele estado); 2/ o conflito do estado #4 é resolvido pois
   Seq(L) - a cabeça da produção do item completo - não contém =a= (o
   símbolo do único movimento com terminal).

*** E4
1. Não, pois temos um conflito empilha-reduz no estado #4.
2. Sim, pois no estado #4 o "+" não encontra-se no conjunto Seq(F).
3. Produções identificadas.
   | (1) | F \to @ a #     |
   | (2) | F \to @ a # + F |

   Tabela SLR(1).
   Seq(F) = { $ }

   |   | + | @ | # | a | $    | F |
   |---+---+---+---+---+------+---|
   | 0 |   | 2 |   |   |      | 1 |
   | 1 |   |   |   |   | Ac.  |   |
   | 2 |   |   |   | 3 |      |   |
   | 3 |   |   | 4 |   |      |   |
   | 4 | 5 |   |   |   | R(1) |   |
   | 5 |   | 2 |   |   |      | 6 |
   | 6 |   |   |   |   | R(2) |   |

4. Seguem os passos.

   | / | <l>               |      <r> |        |
   |   | Pilha             |  Entrada | Ação   |
   |---+-------------------+----------+--------|
   |   | % 0               | @a#+@a#% | e2     |
   |   | % 0 2             |  a#+@a#% | e3     |
   |   | % 0 2 3           |   #+@a#% | e4     |
   |   | % 0 2 3 4         |    +@a#% | e5     |
   |   | % 0 2 3 4 5       |     @a#% | e2     |
   |   | % 0 2 3 4 5 2     |      a#% | e3     |
   |   | % 0 2 3 4 5 2 3   |       #% | e4     |
   |   | % 0 2 3 4 5 2 3 4 |        % | R + e6 |
   |   | % 0 2 3 4 5 6     |        % | R + e1 |
   |   | % 0 1             |        % | ACEITA |

*** E5

1. Não é LR(1), pois nos estados 2 e 4 temos um conflito empilha-reduz com "a".

** 2023/2
** 2023/1
*** E1
1. Sim, =a*|bc=.
2. Não foi, sendo a principal razão o fato que o estado 4 une
   diretamente os reconhecedores de =c= e =d=. Deveríamos ter uma
   transição vazia entre o atual estado 4 e um novo estado que inicia
   o reconhecimento do =c=. Podemos também mencionar a ausência da
   marcação de um estado final, ainda que o estado =14= possa ser
   considerado como final.
3. Fech-\epsilon(0) = {0, 1, 2, 3, 6, 7, 8, 9, 10, 12, 13, 14} = A;
4. Considerando que devemos aplicar o Fech-\epsilon após um movimento,
   podemos entender que a resposta é Fech-\epsilon(Mov(A, a)) = {11, 12, 13,
   14, 8, 9, 10};
*** E2
1. Podemos empregar [[https://github.com/schnorr/ellerre][ellerre]] para obter a resposta.
   #+begin_src shell :results output :exports both
   echo 'S => A B ;
A => a | b | c C a | C ;
B => a | b | ;
C => b | c | d | ;' > gramatica.ee
   ./firstfollow < gramatica.ee
   #+end_src

   #+RESULTS:
   #+begin_example
   Grammar with 12 rules and 8 symbols (4 non-terminals):
   S ⇒ A B 
   A ⇒ a 
   A ⇒ b 
   A ⇒ c C a 
   A ⇒ C 
   B ⇒ a 
   B ⇒ b 
   B ⇒ ε 
   C ⇒ b 
   C ⇒ c 
   C ⇒ d 
   C ⇒ ε 

   First sets:
   S -- ε b d a c 
   A -- ε b d a c 
   B -- ε b a 
   C -- ε b d c 

   Follow sets:
   S -- $ 
   A -- $ b a 
   B -- $ 
   C -- $ b a 
   #+end_example

2. Analisando a gramática fornecida, podemos concluir que a gramática
   não é LL(1) pois (a) o conjunto Pri(cCa) tem intersecção com o
   conjunto Pri(C), com o token =c=; (b) o conjunto Seq(C) tem
   intersecção com o conjunto Pri(b).

3. A tabela criada

   |   | a  | b  | c   | d  | $  |
   |---+----+----+-----+----+----|
   | S | AB | AB | AB  | AB | AB |
   |---+----+----+-----+----+----|
   | A | a  | b  | cCa |    |    |
   |   | C  | C  | C   | C  | C  |
   |   |    | C  |     |    |    |
   |---+----+----+-----+----+----|
   | B | a  | b  |     |    | \epsilon  |
   |---+----+----+-----+----+----|
   | C |    | b  | c   | d  |    |
   |   | \epsilon  | \epsilon  |     |    | \epsilon  |
   |---+----+----+-----+----+----|

4. Os passos são os seguintes (o =%= marca final da pilha e entrada)

   | / |   <r> |     <r> | <l>     |
   |   | Pilha | Entrada | Ação    |
   |---+-------+---------+---------|
   |   |   S % |       % | S -> AB |
   |   |  AB % |       % | A -> C  |
   |   |  CB % |       % | C -> \epsilon  |
   |   |   B % |       % | B -> \epsilon  |
   |   |     % |       % | aceita  |

5. Os passos são os seguintes (idem com o =%=)

   | / |   <r> |     <r> | <l>             |
   |   | Pilha | Entrada | Ação            |
   |---+-------+---------+-----------------|
   |   |   S % |  acda % | S -> AB         |
   |   |  AB % |  acda % | conflito entre  |
   |   |       |         | A -> C e A -> a |

*** E3

1. Vamos empregar [[https://github.com/schnorr/ellerre][ellerre]] para obter a resposta.
   #+begin_src shell :results output :exports both
   echo 'S => a [ L ] | a ;
L => S - L | S ;' > gramatica.ee
   ./lr0 < gramatica.ee > /dev/null
   ./firstfollow < gramatica.ee
   dot -Tpng LR0.dot -o resp_2023_1-E3-LR0.png
   #+end_src

   #+RESULTS:
   #+begin_example
   Grammar with 4 rules and 6 symbols (2 non-terminals):
   S ⇒ a [ L ] 
   S ⇒ a 
   L ⇒ S - L 
   L ⇒ S 

   First sets:
   S -- a 
   L -- a 

   Follow sets:
   S -- $ ] - 
   L -- ] 
   #+end_example

   Considere que na resposta poderíamos ter apenas os estados do 0 ao 3.

   [[./resp_2023_1-E3-LR0.png]]

2. A gramática não é LR(0) pois nos estados 2 e 4 temos itens
   completos junto com itens de empilhamento. Em LR(0) isso não é
   possível pois acaba por causar um conflito empilha-reduz.

3. No caso do estado 2, a heurística de usar o conjunto sequência do
   símbolo para o qual iremos reduzir resolve o conflito pois Seq(S)
   contém apenas =a=, e não temos transição com =a= a partir do
   estado 2. A mesma justificativa pode ser usado no estado 4 ao
   observar o Seq(L).

*** E4

1. A gramática não é LR(0) pois no esado 4 temos um conflito
   empilha-reduz ao observar um item completo juntamente com um item
   que implica em empilhamento.
   
2. Para responder se a gramática é SLR(1), precisamos do conjunto
   sequência dos NTs. Vamos empregar [[https://github.com/schnorr/ellerre][ellerre]] para obter a resposta.
   #+begin_src shell :results output :exports both
   echo 'F => [ a ] | [ a ] - F ;' > gramatica.ee
   ./firstfollow < gramatica.ee
   #+end_src

   #+RESULTS:
   : Grammar with 2 rules and 5 symbols (1 non-terminals):
   : F ⇒ [ a ] 
   : F ⇒ [ a ] - F 
   : 
   : First sets:
   : F -- [ 
   : 
   : Follow sets:
   : F -- $ 

   Observamos que no conjunto Seq(F) temos apenas o $, portanto a
   gramática é SLR(1) uma vez que o conflito empilha-reduz do estado 4
   desaparece visto que a redução para F só ocorrerá com =$= na entrada.

3. A tabela SLR(1), usando a heurística do conjunto sequência na redução

   | / |   | < |   |   |   | >      |   |
   |   |   | [ | a | ] | - | $      | F |
   |---+---+---+---+---+---+--------+---|
   |   | 0 | 2 |   |   |   |        | 1 |
   |   | 1 |   |   |   |   | aceita |   |
   |   | 2 |   | 3 |   |   |        |   |
   |   | 3 |   |   | 4 |   |        |   |
   |   | 4 |   |   |   | 5 | R      |   |
   |   | 5 | 2 |   |   |   |        | 6 |
   |   | 6 |   |   |   |   | R      |   |

4. A análise LR usando a tabela SLR(1) acima. Novamente o =%= marca o
   final da pilha e da entrada.

   | / | <l>               |       <r> |                                                               |
   |   | Pilha             |   Entrada |                                                          Ação |
   |   | % 0               | [a]-[a] % |                                                             2 |
   |   | % 0 2             |  a]-[a] % |                                                             3 |
   |   | % 0 2 3           |   ]-[a] % |                                                             4 |
   |   | % 0 2 3 4         |    -[a] % |                                                             5 |
   |   | % 0 2 3 4 5       |     [a] % |                                                             2 |
   |   | % 0 2 3 4 5 2     |      a] % |                                                             3 |
   |   | % 0 2 3 4 5 2 3   |       ] % |                                                             4 |
   |   | % 0 2 3 4 5 2 3 4 |         % |                                                R por F -> [a] |
   |   | % 0 2 3 4 5       |         % |     desempilha três estados (pois são três símbolos no corpo) |
   |   | % 0 2 3 4 5       |         % | Como voltamos para o estado 5 e acabamos de reduzir para F, 6 |
   |   | % 0 2 3 4 5 6     |         % |                                              R por F -> [a]-F |
   |   | % 0               |         % |    desempilha cinco estado (pois são cinco símbolos no corpo) |
   |   | % 0               |         % | Como voltamos para o estado 0 e acabamos de reduzir para F, 1 |
   |   | % 0 1             |         % | aceita                                                        |


*** E5

1. A gramática não é LR(1) pois no estado 4 temos um conflito
   empilha-reduz com =a=, uma vez que temos um item completo indicando
   redução com =a= ao mesmo que temos que temos uma transição com =a=.

** 2022/2
*** E1

1. Sim, os estados que reconhecem os caracteres 'a', 'b' e 'c' estão devidamente isolados com produções vazias, possuindo uma alternância entre 'ab' e 'c' e então um laço de repetição

2. Os passos do algoritmo de subconjuntos
   #+begin_example
Fech-ε (1) = {1, 2, 3, 7} = |A|
Mov(A, a) = {4, 5} = |B|
Mov(A, b) = {}
Mov(A, c) = {8, 9, >10<, 1, 2, 3, 7} = |C|
Mov(B, a) = {}
Mov(B, b) = {6, 9, >10<, 1, 2, 3, 7} = |D|
Mov(B, c) = {}
Mov(C, a) = {4, 5} = |B|
Mov(C, b) = {}
Mov(C, c) = {8, 9, >10<, 1, 2, 3, 7} = |C|
Mov(D, a) = {4, 5} = |B|
Mov(D, b) = {}
Mov(D, c) = {8, 9, >10<, 1, 2, 3, 7} = |C|
#+end_example

   Em seguida, construímos o autômato:

   [[./resp_2022_2-E1-Automato.png]]

*** E2
1. Estas são as razões. 
   - Recursão à esquerda:
     #+begin_example
S->Sa
A->Ac
#+end_example

   - O não-terminal A tem 2 produções com o 'd' pois 'd' é parte de Primeiro(Ac) e Primeiro(d)
     #+begin_example
A->Ac
A->d
#+end_example

   - O não-terminal S tem 2 produções com o 'b' pois 'b' é parte de Primeiro(Sa) e Primeiro(bA)
     #+begin_example
S->Sa
S->bA
#+end_example

2. Reescrevendo a gramática para ser LL(1)
   #+begin_example
A->bAX
X->aX
X->ε
A->dB
B->cB
B->ε
#+end_example

3. Tabela LL(1):

   |   | a  | b   | c  | d  | $ |
   |---+----+-----+----+----+---|
   | S |    | bAX |    |    |   |
   |---+----+-----+----+----+---|
   | X | aX |     |    |    | \epsilon |
   |---+----+-----+----+----+---|
   | A |    |     |    | dB |   |
   |---+----+-----+----+----+---|
   | B | \epsilon  |     | cB |    | \epsilon |
   |---+----+-----+----+----+---|

4. Passos Análise LL(1):

   | / |   <r> |     <r> | <l>      |
   |   | Pilha | Entrada | Ação     |
   |---+-------+---------+----------|
   |   |    S% |  bdcaa% | S -> bAX |
   |   |  bAX% |  bdcaa% | casa     |
   |   |   AX% |   dcaa% | A -> dB  |
   |   |  dBX% |   dcaa% | casa     |
   |   |   BX% |    caa% | B -> cB  |
   |   |  cBX% |    caa% | casa     |
   |   |   BX% |     aa% | B -> \epsilon   |
   |   |    X% |     aa% | X -> aX  |
   |   |   aX% |     aa% | casa     |
   |   |    X% |      a% | X -> aX  |
   |   |   aX% |      a% | casa     |
   |   |    X% |       % | X -> \epsilon   |
   |   |     % |       % | aceita   |

*** E3
1. Os três estados do LR(0).

   [[./resp_2022_2-E3-LR0.png]]

2. Os três estados do LR(1).

   [[./resp_2022_2-E3-LR1.png]]

*** E4
1. Não é LR(0) devido a conflito empilha-reduz no estado 6 (possui um item completo e este não está isolado)
2. É SLR(1), pois 'f' não pertence à Sequência(A) no estado 6.
3. É LR(1), pois todos os itens finais estão em estados:
   - ou que tem eles isolados (estados 1, 4, 5, 8)
   - ou cujos empilhamentos não estão no token de look-ahead (estado 6)
   - ou possuem tokens de look-ahead diferentes de outros estados finais (estado 7)

*** E5

1. A tabela com o conjunto Pri e Seq dos não-terminais.

   |   | Primeiro | Sequência |
   |---+----------+-----------|
   | S | u        | $         |
   |---+----------+-----------|
   | B | v,ε      | y,x,z,v   |
   |---+----------+-----------|
   | D | x,y,ε    | z         |
   |---+----------+-----------|
   | E | y,ε      | x,z       |
   |---+----------+-----------|
   | F | x,ε      | z         |
   |---+----------+-----------|

** 2022/2 bis
** 2022/1
** 2021/2
** 2019/2
** 2018/2
** 2017/2
* P2
** 2025/1
*** E1
**** 1.

Dado que =L.type= representa o tipo esperado para os identificadores de
L e temos a produção =D->TL=, entende-se que estamos aqui falando de um
esquema L-atribuído.

#+begin_src C
D -> T { L.type = T.type; } L { D.env = L.set; }

T -> =int= { T.type = INT; }

L -> { L_1.type = L.type; } L_1 =,= =id= {
   if (id não pertence L_1.set) {
      L.set = união(L_1.set, conjunto(id));
      declara(id, L.type)
   }else{
      erro: variável redeclarada
   }
}

L -> id { L.set = conjunto(id); }
#+end_src

Onde a função =conjunto= cria um conjunto com o argumento e a função
=união= une dois conjuntos. A representação de terminais é feita com o
delimitador "=".

**** 2.

Dado a discussão em 1., temos a seguinte classificação:
- sintetizados: T.type, L.set, D.env
- herdados: L.type

**** 3.

[[https://viewer.diagrams.net/?tags=%7B%7D&lightbox=1&highlight=0000ff&layers=1&nav=1&title=Untitled%20Diagram.drawio&dark=auto#R%3Cmxfile%3E%3Cdiagram%20name%3D%22Page-1%22%20id%3D%22ZNujsGWPLJhN4EK1gCre%22%3E7VrRbpswFP0aHjdhG5PmtUm3buuqSam2dS%2BTF1zwRDBzTAL9%2BplgAoQ2YVpag8RLZJ%2Fra%2BxzfH0vKBaardL3gsTBZ%2B7R0IK2l1pobkE4ga76zYGsADCGBeAL5hUQqIAFe6QatDWaMI%2BuGwMl56FkcRNc8iiiS9nAiBB82xz2wMPmU2Pi0xawWJKwjX5jngw06mKnMlxT5gflo4E7LSwrUo7WW1kHxOPbGoSuLDQTnMuitUpnNMzJK4kp%2FN49Y92vTNBIdnH48fDpdvnl51eHfVwk8%2FX0eirEG6CnWcus3DL1FAO6y4UMuM8jEl5V6KXgSeTRfFpb9aoxN5zHCgQK%2FE2lzLScJJFcQYFchdpKUya%2F5%2B5vse7d1yzzVM%2B862RlJ5Iiqznl3fu6rXLb9Uq%2FYn%2F5pp7lreSAJ2JJj5Clj64kwqfyyDi0V1eFBeUrqtaj%2FAQNiWSb5jqIPqD%2BflwloWpoFf9BUTgZFT27oo5RRYt5NyRM9JMs6IZquZce26imnzfnJaYeUYOfGPmWRqpt72ayLZwP%2BZPkl9BlWjUtOMut%2B372vOmxZsL7ZfwSh0s4XNjBId0GTNJFTHZ6bVUyaR4wso6L%2B%2F2BpflB1RNsqJA0PX4O2rppB4j01Zw1k862uukvNBTU7vgSO7vQAI6h2zl0UcfQxSZDF3UJ3bvuoSuzmO5j98Pt3ZCiDYCDaEOGww06Y7h1DjenY7gBs8UPHiU9v6Rmqx93lPT8khrNik6XrHjz%2F1nxtOdasTSWwsqCnJ4lZ9w6I0ztpAdMAYQbTEHcZgo9wRR6sTJm%2FITT%2FYIEXV8bgGs06Q3mTdCINhOj2qChaDOoeLswqSno9KI%2BiJJkWHXH4Sc4ODH9De6p4nTWB6qQi09S9aqFB2jXaI99IMrBp8%2FU61ZodouWMWMcL7y6ZIyp0YzhDitjDCstANgMYcc2nRYmfU0LEOOTVL1uWrhoUZX1gajD%2FGmeqGmLqLQPRAGnSRSGL0aU6lZ%2FgNnZan8jQld%2FAQ%3D%3D%3C%2Fdiagram%3E%3C%2Fmxfile%3E][Clique aqui para ver no draw.io]].

**** 4.

Considere que na URL abaixo cada atributo possui um número que o
precede, entre parênteses. A ordem dos números ali indica a ordem de
avaliação assumindo uma análise descendente (e desconsiderando o fato
que a gramática possui recursão à esquerda).

[[https://viewer.diagrams.net/?tags=%7B%7D&lightbox=1&highlight=0000ff&layers=1&nav=1&title=Untitled%20Diagram.drawio&dark=auto#R%3Cmxfile%3E%3Cdiagram%20name%3D%22Page-1%22%20id%3D%22ZNujsGWPLJhN4EK1gCre%22%3E7VrRbpswFP0apO1hFbYxaV6bdOu2rpqUaVv3MnnBBSaCmWMS6NfPBBMgtImrpjWReInsc32NfY6v7wXFQpNF9oGTJPjCPBpZ0PYyC00tCEfQlb8FkJcAxrAEfB56JQRqYBbeUwXaCk1Djy5bAwVjkQiTNjhncUznooURztm6PeyORe2nJsSnHWA2J1EX%2FRF6IlCoi53acEVDP6geDdxxaVmQarTayjIgHls3IHRpoQlnTJStRTahUUFeRUzp9%2F4R63ZlnMZCx%2BHX3eeb%2Bdff353w0yydLsdXY87fATXNUuTVlqknGVBdxkXAfBaT6LJGLzhLY48W09qyV4%2B5ZiyRIJDgXypEruQkqWASCsQiUlaaheJn4X6GVe%2B2YZlmauZNJ686seB5w6no3jZttdumV%2FmV%2Bys29ShvFQcs5XO6hyx1dAXhPhV7xqGtujIsKFtQuR7px2lERLhqr4OoA%2Bpvx9USyoZS8QmKwtGg6NEVdYwqWs67IlGqnmRBN5LLvfDClWz6RXNaYfIRDfiBkWc0lm17M5Nt4WLIv7S4hC6yumnBSWHd9vPHTfcNE94u4w%2FfXcLuwnYO6ToIBZ0lZKPXWiaT9gEjy6S83%2B%2FCrDioaoIV5YJm%2B89BVzflAJG6mvN20lnXN%2F25goLGHV9hRxcawCF0tUMXaYYuNhm6SCd0v2mH7hvwVs52JvKEbiP44823U4o5AHZiDhkOOugMQacddI5m0AGzJRAeJD2%2BpGZrIHeQ9PiSGs2Njk5uvNbPjXBvbjzsP9r4LyVjQ3EsLcjpWaLGnfMSyp30gCmAcIspiLtMoQeYQi9W0gwfdfQvS6D7IgFcownwZN4NjWgzMqoNOhVtTirezk1qCrRe3Z9QnqBnlifuUcqT06pBdj%2FQwZHpL3QPFa2TPlCFXHyQqlctQkC3XrvvA1EOPnymXrdaszu0DNljfxGmkz3GRrOHe%2BTs4Twze2D97HFaKQLAdjg7tukUMeprioAYH6TqdVPEeYeqvA9E7eZS80SNO0RlfSAKOG2iMHwxomS3%2FqvMxtb4wxG6%2FA8%3D%3C%2Fdiagram%3E%3C%2Fmxfile%3E][Clique aqui para ver no draw.io]].

**** 5.

O esquema construído não é possível de ser usado em uma análise
ascendente pois possui atributos herdados. A alternativa é reescrever
o esquema de maneira a sintetizar a lista de variáveis de maneira que
a declaração propriamente dita ocorra somente no nível do não-terminal
=D=. Assim, teríamos algo assim:

- =T.type=: tipo das variáveis sendo declaradas
- =L.set=: conjunto de variáveis a serem declaradas
- =D.env=: conjunto final de nomes declarados com o tipo

#+begin_src C
D -> T L { D.env = L.set;
   Para cada elemento "e" em D.env:
     if (declarado(e)) {
        erro: variável redeclarada
     }else{
        declara(e, T.type)
     }
}

T -> =int= { T.type = INT; }

L -> L_1 =,= =id= { L.set = união(L_1.set, conjunto(id)); }

L -> id { L.set = conjunto(id); }
#+end_src

*** E2
**** 1.

Temos três atributos herdados:
- =true=: guarda o rótulo de onde se deve ir para o caso da expressão ser verdadeira
- =false=: guarda o rótulo de onde se deve ir para o caso da expressão ser falsa
- =code=: o código gerado
  
A função =rot()= gera rótulo e a função =code()= gera código.

O símbolo =|= (barra vertical) representa concatenação.

#+begin_src C
E -> { E_1.true = E.true; E_1.false = rot(); } E_1
     or
     { T.true = E.true; T.false = E.false; } T
     { E.code = E_1.code | code("%s: nop", E_1.false); | T.code; }

E -> { T.true = E.true; T.false = E.false; } T { E.code = T.code; }

T -> { T_1.true = rot(); T_1.false = T.false; } T_1
     and
     { F.true = T.true; F.false = T.false; } F
     { T.code = T_1.code | code("%s: nop", T_1.true); | F.code; }

T -> { F.true = T.true; F.false = T.false; } F { T.code = F.code; }

F -> =true= { F.code = "jump F.true;"; }

F -> =false= { F.code = "jump F.false;"; }
#+end_src

**** 2.

O método funciona mais facilmente na análise descendente pois podemos
usufruir de atributos herdados para implementar o curto circuito, no
atributo E_{1}.false para o =or= lógico, e no caso do atributo T_{1}.true para
o =and= lógico.

*** E3
*** E4


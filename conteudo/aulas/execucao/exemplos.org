# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Exemplos com ILOC
#+Author: Prof. Lucas M. Schnorr (UFRGS)
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS:   H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{../org-babel.tex}

* Função principal
Entrada
#+BEGIN_SRC amarela
int main () { }
#+END_SRC

#+latex: \vfill\pause
ILOC
#+BEGIN_SRC iloc :tangle exemplo1.iloc
loadI 1024 => rfp
loadI 1024 => rsp
loadI 7 => rbss
jumpI => L0
L0: addI rsp, 0 => rsp
halt
#+END_SRC
+ Segmento de dados depois do segmento de código
+ A pilha começa no endereço 1024
+ Cada linha de código ocupa um único byte

#+begin_src shell :results output :exports both
SIM=/home/schnorr/ensino/pc/tests/scripts/ilocsim
$SIM -x -t -s --data 500 --stack 1024 exemplo1.iloc
#+end_src

#+RESULTS:
#+begin_example
0 ['loadI', 1024, 'rfp']
Change of rfp ignored (strict mode)
1 ['loadI', 1024, 'rsp']
Change of rsp ignored (strict mode)
2 ['loadI', 7, 'rbss']
Change of rbss ignored (strict mode)
3 ['jumpI', 4]
4 ['addI', 'rsp', 0, 'rsp']
5 ['halt']
count	instruction
    3	loadI
    1	jumpI
    1	addI
    1	halt

instructions executed:    6
register         read:    1 write:    7
memory           read:    0 write:    0

  register    value
      rbss      500
       rfp     1024
       rpc        5
       rsp     1024

    memory    value
#+end_example

* Variáveis locais na pilha
Entrada
#+BEGIN_SRC amarela
int main () { int x; x = 34; }
#+END_SRC
#+latex: \pause
ILOC
#+BEGIN_SRC iloc :tangle exemplo2.iloc
loadI 1024 => rfp
loadI 1024 => rsp
loadI 9 => rbss
jumpI => L0
L0: addI rsp, 4 => rsp
loadI 34 => r0
storeAI r0 => rfp, 0
halt
#+END_SRC

#+begin_src shell :results output :exports both
SIM=/home/schnorr/ensino/pc/tests/scripts/ilocsim
$SIM -x -t -s --data 500 --stack 1024 exemplo2.iloc
#+end_src

#+RESULTS:
#+begin_example
0 ['loadI', 1024, 'rfp']
Change of rfp ignored (strict mode)
1 ['loadI', 1024, 'rsp']
Change of rsp ignored (strict mode)
2 ['loadI', 9, 'rbss']
Change of rbss ignored (strict mode)
3 ['jumpI', 4]
4 ['addI', 'rsp', 4, 'rsp']
5 ['loadI', 34, 'r0']
6 ['storeAI', 'r0', 'rfp', 0]
7 ['halt']
count	instruction
    4	loadI
    1	jumpI
    1	addI
    1	storeAI
    1	halt

instructions executed:    8
register         read:    3 write:   10
memory           read:    0 write:    1

  register    value
        r0       34
      rbss      500
       rfp     1024
       rpc        7
       rsp     1028

    memory    value
00001024       34
#+end_example

* Variáveis globais e locais
Entrada
#+BEGIN_SRC amarela
int y; int main () { int x; y = 59; x = 33; }
#+END_SRC
#+latex: \pause
ILOC
#+BEGIN_SRC iloc :tangle exemplo3.iloc
loadI 1024 => rfp
loadI 1024 => rsp
loadI 11 => rbss
jumpI => L0
L0: addI rsp, 4 => rsp
loadI 59 => r0
storeAI r0 => rbss, 0
loadI 33 => r0
storeAI r0 => rfp, 0
halt
#+END_SRC

#+begin_src shell :results output :exports both
SIM=/home/schnorr/ensino/pc/tests/scripts/ilocsim
$SIM -x -t -s --data 500 --stack 1024 exemplo3.iloc
#+end_src

#+RESULTS:
#+begin_example
0 ['loadI', 1024, 'rfp']
Change of rfp ignored (strict mode)
1 ['loadI', 1024, 'rsp']
Change of rsp ignored (strict mode)
2 ['loadI', 11, 'rbss']
Change of rbss ignored (strict mode)
3 ['jumpI', 4]
4 ['addI', 'rsp', 4, 'rsp']
5 ['loadI', 59, 'r0']
6 ['storeAI', 'r0', 'rbss', 0]
7 ['loadI', 33, 'r0']
8 ['storeAI', 'r0', 'rfp', 0]
9 ['halt']
count	instruction
    5	loadI
    2	storeAI
    1	jumpI
    1	addI
    1	halt

instructions executed:   10
register         read:    5 write:   13
memory           read:    0 write:    2

  register    value
        r0       33
      rbss      500
       rfp     1024
       rpc        9
       rsp     1028

    memory    value
00000500       59
00001024       33
#+end_example

* Chamada de função

Entrada
#+BEGIN_SRC amarela
int f() { return 73; } int main() { int x; x = f(); }
#+END_SRC
#+latex: \pause
ILOC
#+latex: \tiny
#+BEGIN_SRC iloc :tangle exemplo4.iloc
loadI 1024 => rfp
loadI 1024 => rsp
loadI 23 => rbss
jumpI => L1
L0: i2i rsp => rfp
addI rsp, 16 => rsp   //final do epílogo
loadI 73 => r0      //seq retorno
storeAI r0 => rfp, 12
loadAI rfp, 0 => r0  //obtém end. retorno
loadAI rfp, 4 => r1  //obtém rsp salvo
loadAI rfp, 8 => r2  //obtém rfp salvo
store r1 => rsp
store r2 => rfp
jump => r0
L1: addI rsp, 4 => rsp
loadI 20 => r3
storeAI r3 => rsp, 0
storeAI rsp => rsp, 4
storeAI rfp => rsp, 8
jumpI => L0
loadAI rsp, 12 => r0
storeAI r0 => rfp, 0
halt
#+END_SRC

#+begin_src shell :results output :exports both
SIM=/home/schnorr/ensino/pc/tests/scripts/ilocsim
$SIM -x -t -s --data 500 --stack 1024 exemplo4.iloc
#+end_src

#+RESULTS:
#+begin_example
0 ['loadI', 1024, 'rfp']
Change of rfp ignored (strict mode)
1 ['loadI', 1024, 'rsp']
Change of rsp ignored (strict mode)
2 ['loadI', 23, 'rbss']
Change of rbss ignored (strict mode)
3 ['jumpI', 14]
14 ['addI', 'rsp', 4, 'rsp']
15 ['loadI', 20, 'r3']
16 ['storeAI', 'r3', 'rsp', 0]
17 ['storeAI', 'rsp', 'rsp', 4]
18 ['storeAI', 'rfp', 'rsp', 8]
19 ['jumpI', 4]
4 ['i2i', 'rsp', 'rfp']
5 ['addI', 'rsp', 16, 'rsp']
6 ['loadI', 73, 'r0']
7 ['storeAI', 'r0', 'rfp', 12]
8 ['loadAI', 'rfp', 0, 'r0']
9 ['loadAI', 'rfp', 4, 'r1']
10 ['loadAI', 'rfp', 8, 'r2']
11 ['store', 'r1', 'rsp']
12 ['store', 'r2', 'rfp']
13 ['jump', 'r0']
20 ['loadAI', 'rsp', 12, 'r0']
21 ['storeAI', 'r0', 'rfp', 0]
22 ['halt']
count	instruction
    5	loadI
    5	storeAI
    4	loadAI
    2	jumpI
    2	addI
    2	store
    1	i2i
    1	jump
    1	halt

instructions executed:   23
register         read:   22 write:   32
memory           read:    4 write:    7

  register    value
        r0        0
        r1     1028
        r2     1024
        r3       20
      rbss      500
       rfp     1028
       rpc       22
       rsp     1044

    memory    value
00001028        0
00001032     1028
00001036     1024
00001040       73
00001044     1028
#+end_example




* Passagem por valor

#+latex: \tiny
#+BEGIN_SRC amarela
int f(int y) { return y; } int main() { int x; x = f(x); }
#+END_SRC

#+BEGIN_SRC asm :tangle exemplo5.iloc
// Programa de entrada
// int foo(int y) { return y; } int main() { int x; x = foo(x); }

// RFP: Frame Pointer
// RSP: Stack Pointer
// RBSS: uninitialized data segment
	
// Inicializa os registradores rfp (RFP), rsp (SP), e rbss (RBSS)
// RFP e RSP apontam inicialmente para a base da pilha
// RBSS aponta para o início do segmento de dados
loadI 1024 => rfp
loadI 1024 => rsp
loadI 29 => rbss
// O código da função main está em L1, salta para lá	
jumpI => L1
// Início da função foo
L0:
i2i rsp => rfp     // Atualiza o rfp (RFP)
addI rsp, 20 => rsp    // Atualiza o rsp (SP)
loadAI rfp, 12 => r0   // Obtém o parâmetro
storeAI r0 => rfp, 20  // Salva o parâmetro na variável y
loadAI rfp, 20 => r0   // Salva o valor da variável y em r0
storeAI r0 => rfp, 16  // Registra o valor de retorno
loadAI rfp, 0 => r0    // Obtém end. retorno
loadAI rfp, 4 => r1    // Obtém rsp (SP) salvo
loadAI rfp, 8 => r2    // Obtém rfp (RFP) salvo
i2i r1 => rsp        // Atualiza o rsp (SP)
i2i r2 => rfp        // Atualiza o rfp (RFP)
jump => r0             // Salta para o endereço de retorno
// Início da função main	
L1:
addI rsp, 4 => rsp // Reserva espaço para a variável local x
addI rpc, 7  => r1      // Calcula o endereço de retorno (7 instruções abaixo)
storeAI r1  => rsp, 0  // Salva o endereço de retorno
storeAI rsp => rsp, 4  // Salva o rsp (SP)
storeAI rfp => rsp, 8  // Salva o rfp (RFP)
loadAI  rfp, 0 => r0   // Carrega o valor da variável x em r0
storeAI r0 => rsp, 12  // Empilha o parâmetro
jumpI => L0            // Salta para o início da função chamada
loadAI rsp, 16 => r0   // Retorno da função, carrega o valor de retorno
storeAI r0 => rfp, 0   // Salva o retorno na variável x
#+END_SRC

#+begin_src shell :results output :exports both
SIM=/home/schnorr/ensino/pc/tests/scripts/ilocsim
$SIM -x -t -s --data 500 --stack 1024 exemplo5.iloc
#+end_src

#+RESULTS:
#+begin_example
0 ['loadI', 1024, 'rfp']
Change of rfp ignored (strict mode)
1 ['loadI', 1024, 'rsp']
Change of rsp ignored (strict mode)
2 ['loadI', 29, 'rbss']
Change of rbss ignored (strict mode)
3 ['jumpI', 16]
16 ['addI', 'rsp', 4, 'rsp']
17 ['addI', 'rpc', 7, 'r1']
18 ['storeAI', 'r1', 'rsp', 0]
19 ['storeAI', 'rsp', 'rsp', 4]
20 ['storeAI', 'rfp', 'rsp', 8]
21 ['loadAI', 'rfp', 0, 'r0']
22 ['storeAI', 'r0', 'rsp', 12]
23 ['jumpI', 4]
4 ['i2i', 'rsp', 'rfp']
5 ['addI', 'rsp', 20, 'rsp']
6 ['loadAI', 'rfp', 12, 'r0']
7 ['storeAI', 'r0', 'rfp', 20]
8 ['loadAI', 'rfp', 20, 'r0']
9 ['storeAI', 'r0', 'rfp', 16]
10 ['loadAI', 'rfp', 0, 'r0']
11 ['loadAI', 'rfp', 4, 'r1']
12 ['loadAI', 'rfp', 8, 'r2']
13 ['i2i', 'r1', 'rsp']
14 ['i2i', 'r2', 'rfp']
15 ['jump', 'r0']
24 ['loadAI', 'rsp', 16, 'r0']
25 ['storeAI', 'r0', 'rfp', 0]
count	instruction
    7	storeAI
    7	loadAI
    3	loadI
    3	addI
    3	i2i
    2	jumpI
    1	jump

instructions executed:   26
register         read:   28 write:   39
memory           read:    7 write:    7

  register    value
        r0        0
        r1     1028
        r2     1024
      rbss      500
       rfp     1024
       rpc       25
       rsp     1028

    memory    value
00001024        0
00001028       24
00001032     1028
00001036     1024
00001040        0
00001044        0
00001048        0
#+end_example

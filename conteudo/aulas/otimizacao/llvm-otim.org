# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Passos de Otimização do LLVM
#+Author: Slides preparados por Gabriel Freytag \linebreak  Prof. Lucas M. Schnorr (UFRGS)
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS:   H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{../org-babel.tex}

* Passos de Otimização da LLVM

- LLVM provê uma série de otimizações
- As otimizações são implementadas em passos (/passes/)
- Os passos percorrem porções do programa tanto para coletar informações quanto para realizar transformações no programa
- Os passos são divididos em três categorias:
  - *Análise*: coletam informações utilizadas por outros passos para /debug/ ou visualização
  - *Transformação*: podem usar (ou invalidar) os passos de análise. Todos modificam o programa de alguma forma.
  - *Utilidades*: Proveem algumas utilidades que não se encaixam nas categorias anteriores, como estração de funções para /bitcode/
- Cada passo pode ser ativado independentemente pelo front-end de acordo com suas necessidades


* Passos de Otimização da LLVM

Exemplo de ativação de alguns passos em um front-end escrito em C++:
#+LATEX: \scriptsize
#+BEGIN_SRC C
FunctionPassManager OurFPM(TheModule);

// Configura o pipeline de otimização. Inicia registrando informações sobre
// o layout das estruturas de dados do alvo
OurFPM.add(new DataLayout(*TheExecutionEngine->getDataLayout()));
// Provê suporte básico de AliasAnalysis para GVN
OurFPM.add(createBasicAliasAnalysisPass());
// Reassociação de expressões
OurFPM.add(createReassociatePass());
// Eliminação de sub expressões comuns
OurFPM.add(createGVNPass());
// Simplificação do gráfico fluxo de controle (removendo blocos inalcansáveis, etc)
OurFPM.add(createCFGSimplificationPass());

OurFPM.doInitialization();

// Define o global de modo que o gerador de código possa utilizálo
TheFPM = &OurFPM;

// Executa o "laço de interpretação" principal neste momento
MainLoop();
#+END_SRC


* Passos de Otimização da LLVM

LLVM provê um commando modular de otimizações e análises denominado ~opt~:
- Realiza otimizações ou análises no código fonte de entrada
- Retorna o código otimizado ou os resultados da análise
- A análize é realizada fornecendo a opção ~-analyze~ ao comando
- A opção ~-c~ bem como por padrão retorna o código bitcode
- A opção ~-S~ retorna o código IR ao invés do bitcode
- A opção ~-time-passes~ mede os tempos de execução de cada passe


* Passos de Otimização da LLVM

Alguns dos passos de otimização mais utilizados são:
- ~dce~ - Eliminação de código morto
- ~adce~ - Eliminação agressiva de código morto
- ~die~ - Eliminação de instruções mortas
- ~gnv~ - Enumeração de valores globais
- ~instcombine~ - Combinação de instruções redundantes
- ~loop-unroll~ - Desenrolar de laços de repetição

Para aplicar esses e outros passos de otimização, basta fornecer o nome (ou os nomes) do passo de otimização ao comando ~opt~:

#+BEGIN_SRC sh
clang -c -emit-llvm main.c -o main.bc
opt -dce -gnv main.bc -o main-opt.bc
#+END_SRC


* Passos de Otimização da LLVM

Também é possível executar um conjunto de passos:
- ~-O0~ - Não executa nenhum passo adicional
- ~-O1~ - Executa 1 nível de passos adicionais
- ~-O2~ - Executa 2 níveis de passos adicionais
- ~-O3~ - Executa 3 níveis de passos adicionais

#+LATEX: \vspace{1cm}

Em cada um desses níveis são executados uma quantidade de passos de otimização maior e mais refinados, sendo o nível ~-O3~ o que possui o maior número e os mais refinados passos de otimização


* Exemplo Otimizado

Aplicando as otimizações do nível ~-O2~ ao exemplo anterior:

~opt -O2 main.ll -o main-opt.bc~

#+LATEX: \vspace{5mm}

E convertendo o bitcode em IR:

~llvm-dis main-opt.bc -o main-opt.ll~

#+LATEX: \vspace{5mm}

#+LATEX: \begin{minipage}[t]{0.34\linewidth}
*Código em C*
#+BEGIN_SRC C
int x = 7;
int main() {
  int n = 0;
  if (x != 0) n++;
  return n;
}
#+END_SRC
#+LATEX: \end{minipage}
#+LATEX: \begin{minipage}[t]{0.65\linewidth}
#+LATEX: \small
*Código LLVM IR*
#+BEGIN_SRC C
define i32 @main() local_unnamed_addr #0 {
  %1 = load i32, i32* @x, align 4, !tbaa !2
  %2 = icmp ne i32 %1, 0
  %3 = zext i1 %2 to i32
  ret i32 %3
}
#+END_SRC
#+LATEX: \end{minipage}

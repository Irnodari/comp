# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+Title: Geração de Código, Representações Intermediárias
#+Author: Prof. Lucas Mello Schnorr (INF/UFRGS)
#+Date: schnorr@inf.ufrgs.br

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [10pt, a4paper]
#+LATEX_HEADER: \input{org-babel.tex}

#+OPTIONS: toc:nil date:nil author:nil
#+STARTUP: overview indent
#+TAGS: Lucas(L) noexport(n) deprecated(d)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* Questão 01
\label{x} Considerando a gramática abaixo, crie a árvore de
  derivação, a árvore sintática abstrata e o grafo acíclico
  direcionado para as entradas $x=(b*c)+(b*c);$ e $x=a*2+a*2*b;$.

  \begin{tabular}{llll}
    S  &  $\rightarrow$  &  x = E;            \\
    E  &  $\rightarrow$  &  E$_1$ + T         \\
    E  &  $\rightarrow$  &  E$_1$ - T         \\
    E  &  $\rightarrow$  &  T                 \\
    T  &  $\rightarrow$  &  T$_1$ * F         \\
    T  &  $\rightarrow$  &  T$_1$ / F         \\
    T  &  $\rightarrow$  &  F                 \\
    F  &  $\rightarrow$  &  ( E )             \\
    F  &  $\rightarrow$  &  \textbf{num}    \\
    F  &  $\rightarrow$  &  \textbf{name}    \\
  \end{tabular}

* Questão 02
\label{x1} Transforme a gramática do exercício~\ref{x} em um esquema de
  tradução que cria uma árvore de derivação.

* Questão 03
Repita o exercício~\ref{x1}, criando uma árvore sintática
  abstrata para qualquer entrada.

* Questão 04
\label{y} Repita o exercício~\ref{x1}, criando um grafo acíclico
  direcionado.

* Questão 05
\label{t} O esquema de tradução abaixo gera uma árvore sintática
  abstrata. Mostre seu funcionamento para uma série de entradas
  válidas.

\begin{tabular}{lll}
 E  &  $\rightarrow$  &  T \texttt{ \{ R.h = T.ptr; \} } R \texttt{ \{ E.ptr = R.s; \} }                                \\
 R  &  $\rightarrow$  &  + T \texttt{ \{ $R_1$.h = geraNo('+', R.h, T.ptr); \} } $R_1$ \texttt{ \{ R.s = $R_1$.s; \} }  \\
 R  &  $\rightarrow$  &  - T \texttt{ \{ $R_1$.h = geraNo('-', R.h, T.ptr); \} } $R_1$ \texttt{ \{ R.s = $R_1$.s; \} }  \\
 R  &  $\rightarrow$  &  $\epsilon$ \texttt{ \{ R.s = R.h; \} }                                                         \\
 T  &  $\rightarrow$  &  ( E ) \texttt{ \{ T.ptr = E.ptr; \} }                                                          \\
 T  &  $\rightarrow$  &  id \texttt{ \{ T.ptr = geraFolha(id, id.nome); \} }                                            \\
 T  &  $\rightarrow$  &  enum \texttt{ \{ T.ptr = geraFolha(num, num.val); \} }                                         \\
\end{tabular}

* Questão 06
O que é um bloco básico? Por que alguns compiladores adotam um
  conceito de bloco básico diferente do tradicional? Discorra sobre as
  vantagens de cada abordagem e seu impacto nas etapas de otimização,
  por exemplo.

* Questão 07
Construa o grafo de fluxo de controle para o código abaixo:
  
  \begin{lstlisting}
       stmt0
       while (i < 100) { stmt1 }
       stmt2
       if (x = y) { stmt3 } else { stmt4 }
       stmt5
  \end{lstlisting}

* Questão 08
Construa o grafo de dependência de dados para o código abaixo:

  \begin{lstlisting}
       x = 0
       i = 1
       while (i < 100)
           if (a[i] > 0)
              then x = x + a[i]
           i = i + 1
       print x
    \end{lstlisting}

* Questão 09
Qual a vantagem e a desvantagem da IR linear de código de um endereço?

* Questão 10
\label{z} Transforme a gramática do exercício~\ref{x} em um esquema de
  tradução que gere código de um endereço.

* Questão 11
Traduza uma série de entradas válidas utilizando o esquema de
  tradução do exercício~\ref{z}.

* Questão 12
\label{y1} Altere o esquema de tradução criado no exercício~\ref{y},
  gerando código de um endereço. Utilize o grafo acíclico direcionado
  para aproveitar valores eventualmente já calculados.

* Questão 13
Refaça o exercício~\ref{y1}, gerando código de três endereços.

* Questão 14
O que é TAC?

* Questão 15
Crie um esquema de tradução para gerar uma IR pós-fixada a
  partir de uma IR pré-fixada de expressões aritméticas. Apresente uma
  série de entradas válidas mostrando o seu funcionamento com uma
  analisador ascendente e outro analisador descendente. Explique as
  diferenças, caso existam, nos esquemas de tradução para cada um dos
  analisadores.

* Questão 16
Existem três abordagens para implementar TAC em memória, ou
  seja, manter o código TAC em memória. Qual delas você acha mais
  apropriada para o projeto de compiladores?

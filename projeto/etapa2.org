# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+Title: Projeto de Compilador: Etapa 2 de *Análise Sintática*
#+Author: Prof. Lucas Mello Schnorr (INF/UFRGS)
#+Date: schnorr@inf.ufrgs.br

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [10pt, twocolumn, a4paper]
#+LATEX_HEADER: \input{org-babel.tex}

#+OPTIONS: toc:nil
#+STARTUP: overview indent
#+TAGS: Lucas(L) noexport(n) deprecated(d)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

A segunda etapa consiste em construir um analisador sintático
utilizando a ferramenta de geração de reconhecedores =bison=. O arquivo
=tokens.h= da etapa anterior desaparece, e deve ser substituído pelo
arquivo =parser.y= (fornecido, mas que deve ser modificado para atender
a esta especificação) com a declaração dos tokens. A função principal
deve estar em um arquivo =main.c=, separado do arquivo =scanner.l=
(léxico, da etapa 1) e do =parser.y= (sintático, por codificar na etapa
2). A solução desta etapa deve ser composta de dois arquivos:
=scanner.l=, =parser.y=, e outros arquivos fontes que o grupo achar
pertinente (deve ser compilados usando o =Makefile= que deve não somente
executar =flex=, também =bison=).  No final desta etapa o analisador
sintático gerado pelo bison a partir da gramática deve verificar se a
sentença fornecida -- o programa de entrada a ser compilado -- faz
parte da linguagem ou não.

* Funcionalidades Necessárias
** Definir a gramática da linguagem

A gramática da linguagem deve ser definida a partir da descrição geral
da Seção "A Linguagem", abaixo. As regras gramaticais devem ser
incorporadas ao arquivo =parser.y=, arquivo este que conterá a gramática
usando a sintaxe do bison.

** Relatório de Erro Sintático

Caso a análise sintática termine de forma correta, o programa deve
retornar zero. Na ausência de erros sintáticos, esse valor é
automaticamente retornado pelo bison através da função =yyparse()=,
chamada pela função =main= do programa. Caso a entrada não seja
reconhecida, deve-se imprimir uma mensagem de erro informando a linha
do código da entrada que gerou o erro sintático e informações
adicionais que auxiliem o programador que está utilizando o compilador
a identificar o erro sintático identificado.  Na ocasião de uma
mensagem de erro, o analisador sintático deve retornar um valor
diferente de zero. Esses valores -- zero ou diferente de zero -- são
utilizados durante a avaliação automática.

** Remoção de conflitos gramaticais

Deve-se realizar a remoção de conflitos [[http://www.gnu.org/software/bison/manual/html_node/Reduce_002fReduce.html][Reduce/Reduce]] e [[http://www.gnu.org/software/bison/manual/html_node/Shift_002fReduce.html][Shift/Reduce]]
de todas as regras gramaticais. Estes conflitos devem ser tratados
através do uso de configurações para o bison (veja a documentação
sobre =%left=, =%right= ou =%nonassoc=). Os mesmos podem ser observados
através de uma análise cuidadosa do arquivo =parser.output= gerado
automaticamente quando o bison é compilado com a opção =--report-file=.
Sugere-se um processo construtivo da especificação em passos,
verificando em cada passo a inexistência de conflitos. Por vezes, a
remoção de conflitos pode ser feita somente através de uma revisão
mais profunda de partes da gramática.

** Enriquecimento da tabela de símbolos                           :noexport:

Uma vez que vários lexemas da entrada podem representar =tokens= de
tipos diferentes, a tabela de símbolos deve ser alterada de forma que
a _chave_ de cada uma das entradas seja a combinação entre o lexema e o tipo do =token=.  O tipo de um
determinado =token= pode ser somente um dentre as seguintes constantes.
Elas estão definidas no arquivo =main.h= do repositório e podem
ser livremente utilizadas em qualquer parte do código.

#+latex: {\small
#+BEGIN_EXAMPLE
#define POA_LIT_INT    1
#define POA_LIT_FLOAT  2
#define POA_LIT_CHAR   3
#define POA_LIT_STRING 4
#define POA_LIT_BOOL   5
#define POA_IDENT      6
#+END_EXAMPLE
#+latex: }

O _conteúdo_ de cada entrada na tabela de símbolos deve ter pelo menos
três campos: número da linha da última ocorrência do lexema, o tipo do
=token= da última ocorrência, e o valor do token convertido para o tipo
apropriado (inteiro =int=, ponto-flutuante =float=, caractere =char=,
booleano =bool= ou cadeia de caracteres =char*=). O segundo campo,
representado pelo tipo do =token= deve ser o mesmo utilizado na chave da
entrada.

O valor do token é um campo que pode assumir diferentes tipos: uma
possibilidade é utilizar a construção =union= da linguagem C para conter
os diferentes tipos possíveis para os símbolos. A conversão deve ser
feita utilizando funções tais como =atoi=, no caso de números inteiros,
e =atof=, no caso de ponto-flutuantes. Os tipos caractere e cadeia de
caracteres não devem conter aspas (simples ou duplas) no campo valor
(e devem ser duplicados com =strdup=).

** Associação de valor ao =token= (=yylval=)                          :noexport:

O analisador léxico é o responsável pela criação da entrada na tabela
de símbolos para um determinado =token= que acaba de ser
reconhecido. Nesta etapa, deve-se associar um ponteiro para a
estrutura de dados que representa o conteúdo da entrada na tabela de
símbolos ao =token= correspondente. Esta associação deve ser feita pelo
analisador léxico (ou seja, no arquivo =scanner.l=).

Ela é realizada através do uso da variável global =yylval= [1] que é
usada pelo =flex= para dar um ``valor'' ao =token=, além do identificador
(um número inteiro, como na E1) retornado imediatamente após o
reconhecimento. Como esta variável global pode ser configurada com a
diretiva =%union=, sugere-se o uso do campo =valor_lexico= para a
associação. Portanto, a associação deverá ser feita através de uma
atribuição para a variável =yylval.valor_lexico=. O tipo do
=valor_lexico= deve ser um ponteiro para uma entrada na tabela
de símbolos.

[1]: http://www.gnu.org/software/bison/manual/html_node/Token-Values.html

** Listar o conteúdo tabela de símbolos                           :noexport:

Implementar a função =comp_print_table= para listar _todas_ as entradas da
tabela de símbolos. Utilize a função =void
cc_dict_etapa_2_print_entrada (char *key, int line, int tipo)= para
imprimir uma entrada. Esta função será utilizada na avaliação para
averiguar se a solução preenche a tabela de símbolos.

** Adicionar produções gramaticais de erro                        :noexport:

Considerando a descrição da linguagem apresentada na
Seção~\ref{sec.descricao}, o grupo deve identificar pelo menos {\bf
três} situações comuns de erros sintáticos que o usuário possa
cometer, adicionando produções gramaticais que capturam
automaticamente estes erros durante o processo de análise
sintática. Caso eles ocorram, o compilador deve terminar da mesma
forma que terminaria para uma situação de erro não prevista, com
comportamento idêntico ao descrito na próxima
subseção~\ref{sec.relatorio}.
* A Linguagem

Um programa na linguagem é composto por três elementos, todos
opcionais: um conjunto de declarações de _variáveis globais_, um
conjunto de declarações de _novos tipos_, um conjunto de _funções_. Esses
elementos podem aparecer intercaladamente e em qualquer ordem.

** Declarações de Novos Tipos

Novos tipos podem ser declarados apenas no escopo global através da
palavra reservada =class=, seguida de um nome e enfim uma lista de
campos não vazia fornecida entre colchetes onde os campos são
separados por dois pontos (através do caractere especial ':'). Cada
campo tem o encapsulamento, que é opcional, o tipo e um identificador
do campo.  Existem três encapsulamentos possíveis, identificados pelas
palavras reservadas: =protected=, =private=, e =public=. Declarações de
novos tipos são terminadas por ponto-e-vírgula. O tipo de um campo que
faz parte de uma declaração de novo tipo pode ser de qualquer tipo,
salvo um tipo de usuário, ou seja, um tipo declarado com =class=.

Os nomes de novos tipos podem ser utilizados em qualquer lugar onde um
tipo normal aparece, salvo quando é explícita a proibição. Uma função,
por exemplo, pode ser de um tipo novo, assim como seus parâmetros. O
nome do novo tipo é o identificador do tipo, ou seja, a palavra
reservada =class= serve unicamente para definir um novo tipo e não para
utilizá-lo.

** Declarações de Variáveis Globais

As variáveis são declaradas pelo seu nome, seguido do seu tipo. O tipo
pode estar precedido opcionalmente pela palavra reservada =static=. A
linguagem inclui também a declaração de vetores, feita pela definição
de seu tamanho inteiro positivo entre colchetes, colocada à direita do
nome.  Variáveis podem ser dos tipos
primitivos =int=, =float=, =char=, =bool= e =string=; e também podem ser dos
tipos declarados pelo usuário. Neste último caso, o nome do tipo é
aquele utilizado depois da palavra reservada =class= quando este foi
declarado.  As declarações de variáveis globais são terminadas por
ponto-e-vírgula, e não podem receber valores de inicialização.

** Definição de Funções

Cada função é definida por um cabeçalho e um corpo, sendo que esta
definição não é terminada por ponto-e-vírgula. O cabeçalho consiste no
tipo do valor de retorno, que não pode ser vetor,
seguido pelo nome da função e terminado por
uma lista.  O tipo pode estar precedido opcionalmente pela palavra
reservada =static=.  A lista é dada entre parênteses e é composta por
zero ou mais parâmetros de entrada, separados por vírgula. Cada
parâmetro é definido pelo seu tipo e nome, e não pode ser do tipo
vetor. O tipo de um parâmetro pode ser opcionalmente precedido da
palavra reservada =const=. O corpo da função é um bloco de comandos.

** Bloco de Comandos

Um bloco de comandos é definido entre chaves, e consiste em uma
sequência, possivelmente vazia, de comandos simples cada um *terminado*
por ponto-e-vírgula.  Um bloco de comandos é considerado como um
comando único simples, recursivamente, e pode ser utilizado em
qualquer construção que aceite um comando simples.

** Comandos Simples

Os comandos simples da linguagem podem ser: declaração de variável
local, atribuição, construções de fluxo de controle, operações de
entrada, de saída, e de retorno, um bloco de comandos, e chamadas de
função.

#+BEGIN_CENTER
*Declaração de Variável*
#+END_CENTER
Consiste no tipo da variável precedido opcionalmente pela palavra
reservada =static=, e o nome da variável. Os tipos podem ser aqueles
descritos na seção sobre variáveis globais. As declarações locais, ao
contrário das globais, não permitem vetores e podem permitir o uso da
palavra reservada =const= antes do tipo (após a palavra reservada =static=
caso esta aparecer). Uma variável local pode ser opcionalmente
inicializada com um valor válido caso sua declaração seja seguida do
operador composto <= e de um identificador ou literal. Somente tipos
primitivos podem ser inicializados.

#+BEGIN_CENTER
*Comando de Atribuição*
#+END_CENTER
Existem duas formas de atribuição: para identificadores cujo tipo é
primitivo e para identificadores de tipo declarado pelo
usuário. Identificadores de tipos primitivos simples podem receber
valores assim:
#+BEGIN_EXAMPLE
identificador = expressão
identificador[expressão] = expressão
#+END_EXAMPLE
Para os identificadores cujo tipo é aquele declarado pelo usuário pode
ter seus campos acessados diretamente através do operador =$=, assim:
#+BEGIN_EXAMPLE
identificador$campo = expressão
identificador[expressão]$campo = expressão
#+END_EXAMPLE

#+BEGIN_CENTER
*Comandos de Entrada e Saída*
#+END_CENTER
Identificado pela palavra reservada =input=, seguida de uma expressão.
O comando de saída é identificado pela palavra reservada =output=,
seguida de uma lista obrigatória de expressões separadas por vírgulas,
onde cada expressão não pode ser vazia.

#+BEGIN_CENTER
*Chamada de Função*
#+END_CENTER
Uma chamada de função consiste no nome da função, seguida de
argumentos entre parênteses separados por vírgula. Um argumento pode
ser uma expressão.
# , ou um simples marcador de lugar através do token =.=
# (ponto). Caso o argumento seja o ponto, veja a descrição de comandos
# com /pipes/ abaixo.

#+BEGIN_CENTER
*Comandos de Shift*
#+END_CENTER
Sendo número um literal inteiro positivo, temos ose exemplos válidos
abaixo. Os exemplos são dados com =<<=, mas as entradas são
sintaticamente válidas para =>>=. Os exemplos são dados com =número=, mas
são válidas com =expressão=.
#+BEGIN_EXAMPLE
identificador << número
identificador$campo << número
identificador[expressão] << número
identificador[expressão]$campo << número
#+END_EXAMPLE

#  e Case*
#+BEGIN_CENTER
*Comando de Retorno, Break, Continue*
#+END_CENTER

Retorno é a palavra reservada =return= seguida de uma expressão. Os
comandos =break= e =continue= são simples.
#  O comando =case= é o único que
# não termina por ponto-e-vírgula, por ser considerado um marcador de
# lugar. Ele é seguido de um literal inteiro, seguido enfim por
# dois-pontos.

#+BEGIN_CENTER
*Comandos de Controle de Fluxo*
#+END_CENTER
A linguagem possui construções condicionais, iterativas e de seleção para
controle estruturado de fluxo. As condicionais incluem o =if= com o =else=
opcional, assim:
#+BEGIN_EXAMPLE
if (expressão) then bloco
if (expressão) then bloco else bloco
#+END_EXAMPLE
As construções iterativas são as seguintes no formato:
# foreach (identificador: lista) bloco
# do bloco while (expressão)
#+BEGIN_EXAMPLE
for (lista: expressão: lista) bloco
while (expressão) do bloco
#+END_EXAMPLE
# A =lista= do =foreach= é uma lista de expressões separadas por vírgula. 

Os
dois marcadores =lista= do comando =for= são listas de comandos separados
por vírgula. Como os marcadores =lista= do comando =for= não são blocos de
comandos, os comandos simples destas listas não devem ser 
terminados por ponto-e-vírgula.
Estas listas não podem ser vazias. Nas duas listas dentro
do =for= não podem aparecer comandos simples que contenham vírgulas.
# ou
# o comando =case=.
#   A única construção de
# seleção é o =switch-case=, seguindo o seguinte padrão:
# #+BEGIN_EXAMPLE
# switch (expressão) bloco
# #+END_EXAMPLE

Em todas as construções de controle de fluxo, o termo =bloco= indica um
bloco de comandos. Este não tem ponto-e-vírgula nestas situações.

# =foreach=
# =switch= / =case=
# =break=
# =continue=
# =while do=
# =do while=
# if then else

# #+BEGIN_CENTER
# *Comandos com Pipes*
# #+END_CENTER

# A linguagem possui dois tokens (=%>%= e =%|%=) que servem como /pipes/. Eles
# podem ser utilizados em chamadas de função encadeadas com o estilo de
# programação com /pipes/, sendo que a sequência deve ser obrigatoriamente
# terminada por uma chamada de função seguida de um ponto-e-vírgula (que
# termina o comando com /pipe/). Sendo assim, o uso de um /pipe/ implica no
# uso obrigatório de duas chamadas de função, uma antes e outra depois
# dele. O exemplo mínimo abaixo ilustra este caso.

# #+BEGIN_EXAMPLE
# f() %>% g(., a);
# #+END_EXAMPLE

# Os comandos com /pipes/ podem ter encadeamento de múltiplas funções:

# #+BEGIN_EXAMPLE
# f() %>% g(., a) %>% z(.);
# #+END_EXAMPLE

# E também podem ser utilizados em atribuições:

# #+BEGIN_EXAMPLE
# a = f() %>% g(., a) %|% z(.);
# #+END_EXAMPLE

** Expr. Aritméticas, Lógicas

As expressões podem ser de dois tipos: aritméticas, lógicas.
As expressões aritméticas podem ter como operandos: (a)
identificadores, opcionalmente seguidos de expressão inteira entre
colchetes, para acesso a vetores; (b) literais numéricos como inteiro
e ponto-flutuante; (c) chamada de função. As expressões aritméticas
podem ser formadas recursivamente com operadores aritméticos, assim
como permitem o uso de parênteses para forçar uma associatividade
diferente daquela tradicional, à esquerda.

Expressões lógicas podem ser formadas através dos operadores
relacionais aplicados a expressões aritméticas, ou de operadores
lógicos aplicados a expressões lógicas, recursivamente. Outras
expressões podem ser formadas considerando variáveis lógicas do tipo
=bool=.  Nesta etapa do trabalho não há distinção alguma entre
expressões aritméticas, inteiras, de caracteres ou lógicas.  A
descrição sintática deve aceitar qualquer operadores e subexpressão de
um desses tipos como válidos, deixando para a análise semântica das
próximas etapas do projeto a tarefa de verificar a validade dos
operandos e operadores.

# As expressões com /pipes/ podem ser vistas como os comandos com /pipes/,
# detalhado na seção anterior.

As expressões podem consistir também somente por um dos elementos
acima (a, b, c), e um tipo de usuário (vetorizado ou não), tais como:

#+BEGIN_EXAMPLE
identificador$campo op expressão
identificador[expressão]$campo op expressão
#+END_EXAMPLE

Os operadores são os seguintes (com uma possível semântica associada):

- Unários
  - =+= sinal positivo explícito
  - =-= inverte o sinal
  - =!= negação lógica
  - =&= acesso ao endereço da variável
  - =*= acesso ao valor do ponteiro
  - =?= avalia uma expressão para =true= ou =false=
  - =#= acesso a um identificador como uma tabela /hash/
- Binários
  - =+= soma
  - =-= subtração
  - =*= multiplicação
  - =/= divisão
  - =%= resto da divisão
  - =|= bitwise OR
  - =&= bitwise AND
  - =^= exponenciação
  - todos os comparadores relacionais
- Ternários
  - =?= seguido de =:=, conforme a sintaxe =expressão ? expressão : expressão=

As regras de associatividade e precedência de operadores matemáticos
são aquelas tradicionais de linguagem de programação e da
matemática. Além disso, nos casos não coberto por esta regra geral,
temos as seguintes regras de associatividade:

- Associativos à direita
  - =&=, =*= (acesso ao valor do ponteiro), =#=

* Anexo - Arquivo =main.c=

#+BEGIN_SRC C :tangle main.c
/*
Função principal para realização da análise sintática.

Este arquivo será posterioremente substituído, não acrescente nada.
*/
#include <stdio.h>
#include "parser.tab.h" //arquivo gerado com bison -d parser.y

int main (int argc, char **argv)
{
  return yyparse();
}
#+END_SRC

* Anexo - Arquivo =parser.y= inicial

#+BEGIN_SRC txt :tangle parser.y
%{
int yylex(void);
void yyerror (char const *s);
%}

%token TK_PR_INT
%token TK_PR_FLOAT
%token TK_PR_BOOL
%token TK_PR_CHAR
%token TK_PR_STRING
%token TK_PR_IF
%token TK_PR_THEN
%token TK_PR_ELSE
%token TK_PR_WHILE
%token TK_PR_DO
%token TK_PR_INPUT
%token TK_PR_OUTPUT
%token TK_PR_RETURN
%token TK_PR_CONST
%token TK_PR_STATIC
%token TK_PR_FOREACH
%token TK_PR_FOR
%token TK_PR_SWITCH
%token TK_PR_CASE
%token TK_PR_BREAK
%token TK_PR_CONTINUE
%token TK_PR_CLASS
%token TK_PR_PRIVATE
%token TK_PR_PUBLIC
%token TK_PR_PROTECTED
%token TK_OC_LE
%token TK_OC_GE
%token TK_OC_EQ
%token TK_OC_NE
%token TK_OC_AND
%token TK_OC_OR
%token TK_OC_SL
%token TK_OC_SR
%token TK_OC_FORWARD_PIPE
%token TK_OC_BASH_PIPE
%token TK_LIT_INT
%token TK_LIT_FLOAT
%token TK_LIT_FALSE
%token TK_LIT_TRUE
%token TK_LIT_CHAR
%token TK_LIT_STRING
%token TK_IDENTIFICADOR
%token TOKEN_ERRO

%%

programa:

%%
#+END_SRC

* 2016-05-22 Planejamento da Avaliação                             :noexport:

- relatório de erro sintático
  - verificar na saída se o erro sintática é corretamente explicitado
- testes para tabela de símbolos
  - verificar o conteúdo da tabela de símbolos
- associação de valor ao token com yyleval
  - verificar com grep no arquivo parser.y
- nenhum conflito gramatical
  - verificar compilação do bison
- testes com entradas corretas

* 2016-05-22 Possíveis testes                                      :noexport:

- Escopo global
  - Variáveis globais
    #+begin_src txt :tangle i_e2_001.ptg
    int a1;
    #+end_src
  - Novos tipos
    #+begin_src txt :tangle i_e2_002.ptg
    class t [ private int a ];
    #+end_src    
  - Funções
    #+begin_src txt :tangle i_e2_003.ptg
    int f () {}
    #+end_src 
  - Em qualquer ordem
    #+begin_src txt :tangle i_e2_004.ptg
    int f () {}
    class t [ private int a ];
    int a1;
    #+end_src
    #+begin_src txt :tangle i_e2_005.ptg
    class t [ private int a ];
    int f () {}
    int a1;
    #+end_src
    #+begin_src txt :tangle i_e2_006.ptg
    class t [ private int a ];
    int a1;
    int f () {}
    #+end_src
    #+begin_src txt :tangle i_e2_007.ptg
    int a1;
    int f () {}
    class t [ private int a ];
    #+end_src
- Novos tipos
  - lista de campos
    #+begin_src txt :tangle i_e2_008.ptg
    class t [ private int a : private int b ];
    #+end_src
  - protected
    #+begin_src txt :tangle i_e2_009.ptg
    class t [ protected int a ];
    #+end_src
  - private
    #+begin_src txt :tangle i_e2_010.ptg
    class t [ private int a ];
    #+end_src
  - public
    #+begin_src txt :tangle i_e2_011.ptg
    class t [ public int a ];
    #+end_src
- Variáveis globais
    #+begin_src txt :tangle i_e2_012.ptg
    int a;
    #+end_src
  - static
    #+begin_src txt :tangle i_e2_013.ptg
    static int a;
    #+end_src
  - vetores
    #+begin_src txt :tangle i_e2_014.ptg
    static int a[200];
    #+end_src
  - testar todos os tipos
    - int, float, char, bool, string, tipos de usuario
    #+begin_src txt :tangle i_e2_015.ptg
    int a;
    #+end_src
    #+begin_src txt :tangle i_e2_016.ptg
    float a;
    #+end_src
    #+begin_src txt :tangle i_e2_017.ptg
    char a;
    #+end_src
    #+begin_src txt :tangle i_e2_018.ptg
    bool a;
    #+end_src
    #+begin_src txt :tangle i_e2_019.ptg
    string a;
    #+end_src
    #+begin_src txt :tangle i_e2_020.ptg
    tipo a;
    #+end_src
- Funções
    #+begin_src txt :tangle i_e2_021.ptg
    int f () {}
    #+end_src
  - static
    #+begin_src txt :tangle i_e2_022.ptg
    static int f () {}
    #+end_src
  - sem parâmetros
    #+begin_src txt :tangle i_e2_023.ptg
    static int f () {}
    #+end_src
  - com parâmetros
    #+begin_src txt :tangle i_e2_024.ptg
    static int f (int a, int b, int c) {}
    #+end_src
  - usar const nos parâmetros
    #+begin_src txt :tangle i_e2_025.ptg
    static int f (int a, const int b, const int c) {}
    #+end_src
- Bloco de comandos
  - Recursivamente
    #+begin_src txt :tangle i_e2_026.ptg
    int f (){{{{};};};}
    #+end_src
  - Separado por ponto-e-vírgula
    #+begin_src txt :tangle i_e2_027.ptg
    int f (){{};{};}
    #+end_src
- Declaração de variável local
  - normal
    #+begin_src txt :tangle i_e2_028.ptg
    int f () { int a; }
    #+end_src
  - static
    #+begin_src txt :tangle i_e2_029.ptg
    int f () { static int a; }
    #+end_src
  - testar todos os tipos novamente
    - int, float, char, bool, string, tipos de usuario
    #+begin_src txt :tangle i_e2_030.ptg
    int f () { int a; }
    #+end_src
    #+begin_src txt :tangle i_e2_031.ptg
    int f () { float a; }
    #+end_src
    #+begin_src txt :tangle i_e2_032.ptg
    int f () { char a; }
    #+end_src
    #+begin_src txt :tangle i_e2_033.ptg
    int f () { bool a; }
    #+end_src
    #+begin_src txt :tangle i_e2_034.ptg
    int f () { string a; }
    #+end_src
    #+begin_src txt :tangle i_e2_035.ptg
    int f () { tipo a; }
    #+end_src
  - const após static
    #+begin_src txt :tangle i_e2_036.ptg
    int f () { static const int a; }
    #+end_src
  - inicialização para tipos primitivos
    #+begin_src txt :tangle i_e2_037.ptg
    int f () { int a <= 100; }
    #+end_src
    #+begin_src txt :tangle i_e2_038.ptg
    int f () { int b; int a <= b; }
    #+end_src
- Atribuição
  - variáveis simples
    #+begin_src txt :tangle i_e2_039.ptg
    int f () { a = 3; }
    #+end_src
  - para vetores com expressão aritmética
    #+begin_src txt :tangle i_e2_040.ptg
    int f () { a[t+a] = 3; }
    #+end_src
  - para campos com !
    #+begin_src txt :tangle i_e2_041.ptg
    int f () { a!b = 3; }
    #+end_src
- Entrada/Saída
  - input seguido de expressão
    #+begin_src txt :tangle i_e2_042.ptg
    int f () { input 3+b; }
    #+end_src
  - output com lista de expressões
    #+begin_src txt :tangle i_e2_043.ptg
    int f () { output 3+b, 3+b; }
    #+end_src
- Chamada de função
  - normal sem argumentos
    #+begin_src txt :tangle i_e2_044.ptg
    int f () { f(); }
    #+end_src
  - com argumentos
    #+begin_src txt :tangle i_e2_045.ptg
    int f () { f(2, 3, x, 4); }
    #+end_src
  - com argumentos onde há uma expressão
    #+begin_src txt :tangle i_e2_046.ptg
    int f () { f(2, 3-2, x+1, 4); }
    #+end_src
- Shift
  - << 20
    #+begin_src txt :tangle i_e2_047.ptg
    int f () { x << 20; }
    #+end_src
  - >> 10
    #+begin_src txt :tangle i_e2_048.ptg
    int f () { x >> 10; }
    #+end_src
- Retorno, break, continue, case
  - return com expressão
    #+begin_src txt :tangle i_e2_049.ptg
    int f () { return 2+3; }
    #+end_src
  - break
    #+begin_src txt :tangle i_e2_050.ptg
    int f () { break; }
    #+end_src
  - continue
    #+begin_src txt :tangle i_e2_051.ptg
    int f () { continue; }
    #+end_src
  - case sem terminador de ponto-e-vírgula, inteiro :
    #+begin_src txt :tangle i_e2_052.ptg
    int f () { case 20: }
    #+end_src
- Fluxo de controle
  - if then
    #+begin_src txt :tangle i_e2_053.ptg
    int f () { if (true) then { x = 3;};; }
    #+end_src
    #+begin_src txt :tangle i_e2_054.ptg
    int f () { if (true) then x = 3;; }
    #+end_src
  - if then com else
    #+begin_src txt :tangle i_e2_055.ptg
    int f () { if (true) then { x = 3;}; else {};; }
    #+end_src
  - foreach (identificador: lista) comando
    - lista de expressões separadas por vírgula
    #+begin_src txt :tangle i_e2_056.ptg
    int f () { foreach ( ident : 2+3, 4+5, a+b) {};; }
    #+end_src
  - for (lista: expressão: lista) comando
    - lista de comando separado por vírgula
    #+begin_src txt :tangle i_e2_057.ptg
    int f () { for (x = 3, a = 1: 2+3 : s=1) {};; }
    #+end_src
  - while (exp) do comando
    #+begin_src txt :tangle i_e2_058.ptg
    int f () { while (2+3) do {};; }
    #+end_src
  - do comando while (exp)
    #+begin_src txt :tangle i_e2_059.ptg
    int f () { do {}; while (2+3); }
    #+end_src
  - switch (exp) comando
    #+begin_src txt :tangle i_e2_060.ptg
    int f () { switch (2+3) {};; }
    #+end_src
- Expressões Aritméticas/Lógicas
  - Recursivamente
    #+begin_src txt :tangle i_e2_061.ptg
    int f () { x = 2+3*2/3-2; }
    #+end_src
  - Uso de parênteses
    #+begin_src txt :tangle i_e2_062.ptg
    int f () { x = 2+3*2/(3-2); }
    #+end_src
  - Operadores relacionais com expressões aritméticas
    #+begin_src txt :tangle i_e2_063.ptg
    int f () { x = 2 < 3; }
    #+end_src
  - Com chamada de função na lógica, na aritmética
    #+begin_src txt :tangle i_e2_064.ptg
    int f () { x = f() < 3+g(); }
    #+end_src

* 2016-05-23 Gerador de testes                                     :noexport:

#+begin_src sh :results output :session :exports both
  DIR=saida2
  mkdir -p $DIR
  rm -rf $DIR/*
  cp i_e2_*.ptg $DIR/
  for input in `ls -1 i_e2_*.ptg`; do
    #unique identifier
    UNIQUE=`echo "$input" | cut -d"_" -f3 | cut -d"." -f1`
    TESH="$DIR/aval_${UNIQUE}.tesh"
    TESHV="$DIR/valg_${UNIQUE}.tesh"

    #generate tesh
    echo "#! ./tesh" > $TESH
    echo "! timeout 5" >> $TESH
    echo "! output ignore" >> $TESH
    echo "$ ./main tests/e2/${input}" >> $TESH

    #generate tesh for valgrind
    echo "#! ./tesh" > $TESHV
    echo "! timeout 15" >> $TESHV
    echo "! output ignore" >> $TESHV
    echo "$ ./tests/scripts/valgrindtest ./main tests/e2/${input}" >> $TESHV
  done
#+end_src

* 2016-05-23 Entrega Etapa 2                                       :noexport:

#+TBLNAME:etapa2tags
|----+----------+--------------+--------------------------------------------------------------+---------------|
|----+----------+--------------+--------------------------------------------------------------+---------------|

Call `org-table-export' command in the table, export to file =etapa2.csv=.


#+begin_src sh :results output :session :exports both
TESTSDIR=`pwd`/saida2/
FILE=etapa2.csv
DIR=results/etapa2/
mkdir -p $DIR
rm -rf $DIR/*
cp $FILE $DIR
cd $DIR

# prepare reference empty repository
git clone git@bitbucket.org:schnorr/compil-2016-1.git ref
MAIN="`pwd`/ref/src/main.c"

# loop over solutions
while read -r line; do
   UNIQUE=`echo "$line" | cut -d, -f1`
   GITREF=`echo "$line" | cut -d, -f4`
   TAGREF=`echo "$line" | cut -d, -f5`

   if [ -z $TAGREF ]; then
      continue
   fi
   echo $UNIQUE $GITREF $TAGREF

   # clone the repository
   git clone $GITREF $UNIQUE

   # let's customize it
   cd $UNIQUE
   git checkout $TAGREF
   rm -rf `find | grep CMakeCache.txt`
   rm -rf `find | grep build`

   # copy main.c
   cp $MAIN src/main.c

   # erase existing tests
   rm -rf tests/e[123456]/
   # use new set of tests
   mkdir -p tests/e2/
   cp $TESTSDIR/* tests/e2

   cd ..

   # preparing the out-of-source build dir
   BUILDIR=b-$UNIQUE
   mkdir -p $BUILDIR; cd $BUILDIR;
   cmake -DETAPA_1=OFF -DETAPA_2=ON ../$UNIQUE/; make;
   cd ..
done < $FILE
#+end_src

* 2016-05-23 Execução da etapa 2                                   :noexport:

#+begin_src sh :results output :session :exports both
  cd results/etapa2/
  for group in `ls -1d b-*`; do
    echo $group
    cd $group
    ctest -R e2_aval
    cd ..
  done > etapa2.log
cp etapa2.log ../../
#+end_src

* 2016-05-24 Interpretação                                         :noexport:

#+begin_src sh :results output :session :exports both
ET=etapa2
cat ${ET}.log | sed "/^b-../d" | awk -v RS="Test project" '{ print $0 > "temp"(NR-1) }'
TOTALTESTS=`cat temp1  | grep aval | grep "#" | cut -d"/" -f1 | sed "s/ //g" | tail -n1`
DIR=${ET}
mkdir -p $DIR/
rm -rf $DIR/*
mkdir -p $DIR/testes/
SAIDACSV=$DIR/${ET}.csv
echo "grupo,total,falhos,nota" > $SAIDACSV
for i in `seq 1 9`; do
   FILE=temp${i}
   echo "== $i =="
   cat $FILE | grep \(Failed\)
   FAILEDTESTS=`cat $FILE | grep \(Failed\) | grep aval | wc -l`
   SUCCESSRATE=`echo "($TOTALTESTS-$FAILEDTESTS)/$TOTALTESTS*10" | bc -l`
   echo "Group $i obtained $SUCCESSRATE success rate."
   echo "$i,$TOTALTESTS,$FAILEDTESTS,$SUCCESSRATE" >> $SAIDACSV
done > $DIR/${ET}-eval.log
cp ${ET}.log $DIR
cp -prf saida/* $DIR/testes/
tar cfz ${ET}.tar.gz ${ET}
cat ${ET}/${ET}.csv
#+end_src

* 2016-05-24 Subjetiva                                             :noexport:

- Erros (0.5)

#+begin_src sh :results output :session :exports both
  cd results/etapa2/
  ERRADA=errada.ptg
  echo "int f({}" > errada.ptg
  for i in `ls -1d b-*`; do
      echo "== $i =="
      M="$i/main"
      $M errada.ptg 2>&1 > saida
      cat saida | grep "{" | wc -l
  done
#+end_src

- Enriquecimento (1.0)
- yylval (0.5)


#+begin_src sh :results output :session :exports both
  cd results/etapa2/
  ERRADA=errada.ptg
  echo "int f({}" > errada.ptg
  for i in `seq -w 01 09`; do
      echo "== $i =="
      cat $i/scanner.l | grep yylval | wc -l
  done
#+end_src

- Conflitos (1.0)

#+begin_src sh :results output :session :exports both
  cd results/etapa2/
  for i in `ls -1d b-*`; do
      echo "== $i =="
      cd $i; 
make clean; make 2> saida > /dev/null; cat saida | grep conflict  | cut -d: -f3 | cut -d"[" -f1
cd ..
  done
#+end_src


- Summary

|   | Erro | Enriq. | yylval | conflitos | Subjetivo |
|---+------+--------+--------+-----------+-----------|
|---+------+--------+--------+-----------+-----------|

Export with =org-table-export= to =subjetivo.csv=.

#+begin_src sh :results output :session :exports both
cat subjetivo.csv
#+end_src

* 2016-05-24 Subjetivo etapa 2                                     :noexport:

#+begin_src sh :results output :session :exports both
cat etapa2/etapa2.csv | sed "s/nota/auto/" > netapa2.csv
cat subjetivo.csv | cut -d"," -f6 | sed "s/XXXX/-10/" > fim.csv
echo "subjetivo" > fim2.csv
for i in `tail -n+2 fim.csv`; do
  echo `echo "10 + $i" | bc -l`
done >> fim2.csv
cat fim2.csv
paste -d, netapa2.csv fim2.csv > fetapa2.csv
cat fetapa2.csv
#+end_src

#+begin_src R :results output :session :exports both
df <- read.csv("fetapa2.csv");
df$nota = (df$auto + df$subjetivo)/2;
df;
write.csv(df, "etapa2/etapa2.csv");
#+end_src

#+begin_src sh :results output :session :exports both
tar cfz etapa2.tar.gz etapa2
#+end_src

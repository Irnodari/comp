# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+Title: Projeto de Compilador: Etapa 3 de *Árvore Sintática Abstrata*
#+Author: Lucas Mello Schnorr
#+Date: schnorr@inf.ufrgs.br
#+Language: pt-br

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [11pt, a4paper]
#+LATEX_HEADER: \input{org-babel.tex}

#+OPTIONS: toc:nil
#+STARTUP: overview indent
#+TAGS: Lucas(L) noexport(n) deprecated(d)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

A terceira etapa do projeto de compilador para a linguagem consiste na
criação da árvore sintática abstrata (/Abstract Syntax Tree/
-- AST) baseada no programa de entrada. A árvore deve ser
obrigatoriamente criada a medida que as regras semânticas são
executadas e deve ser mantida em memória mesmo após o fim da análise
sintática, ou seja, quando =yyparse= retornar. A árvore deve ser
impressa na tela após a análise sintática. O conteúdo impresso deve ser
semanticamente idêntico ao programa fornecido na entrada do compilador.

* Funcionalidades Necessárias
** 1. Associação de valor ao =token= (com o uso de =yylval=)

Nesta etapa, deve-se associar um _valor_ ao =token= correspondente. Esta
associação deve ser feita pelo analisador léxico, ou seja, no arquivo
=scanner.l=. Ela é realizada através do uso da variável global =yylval=
[1] que é usada pelo =flex= para dar um ``valor'' ao =token=, além da
constante inteira (como aquelas listadas no arquivo =tokens.h= na etapa
1 e no arquivo =parser.y= a partir da etapa 2) que é habitualmente
retornada pelo analisador léxico. Como esta variável global pode ser
configurada com a diretiva =%union=, sugere-se o uso do campo com o nome
=valor_lexico= para a associação. Portanto, a associação deverá ser
feita através de uma atribuição para a variável =yylval.valor_lexico=. O
tipo do =valor_lexico= (e por consequência o valor que será retido) deve
ser uma estrutura de dados que contém os seguintes campos:

- número da linha (e coluna, caso exista) onde apareceu o lexema
- tipo do token (um dentre as [[./etapa1.org][cinco categorias definidas na E1]])
- valor do token

O valor do token deve ser uma cadeia de caracteres (duplicada com
=strdup= a partir de =yytext=) para todos os tipos de tokens salvo para os
literais, que devem ter um tratamento especial. No caso dos literais,
o /valor do token/ deve ser convertido para o tipo apropriado (inteiro
=int=, ponto-flutuante =float=, caractere =char=, booleano =bool= (ou =int=) ou
cadeia de caracteres =char*=).  A conversão deve ser feita utilizando
funções tais como =atoi=, no caso de números inteiros, e =atof=, no caso
de ponto-flutuantes. Os tipos caractere e cadeia de caracteres não
devem conter aspas (simples ou duplas) no campo valor (e devem ser
duplicados com =strdup=). Uma forma de implementar o /valor do token/ para
literais é utilizar dois campos: um /tipo de literal/ e o valor
associado a ele através de uma construção =union= da linguagem C.

[1]: http://www.gnu.org/software/bison/manual/html_node/Token-Values.html

** 2. Implementação de uma estrutura de dados em árvore

Implementar uma estrutura de dados para representar uma árvore em
memória, com funções habituais tais como criação de nó, remoção,
alteração e impressão recursiva da árvore através de um percurso em
profundidade. Qualquer outra função que o grupo achar pertinente
implementar são também bem vistas. Salienta-se o fato de que cada nó
deve ter um número arbitrário de filhos que também são nós da árvore.

** 3. Ações /bison/ para construção da AST

Colocar ações semânticas *no final das regras de produção* descritas no
arquivo para o =bison=, as quais criam ou propagam os nós da árvore,
montando-a na medida que a análise sintática é realizada. Como a
análise sintática é ascendente, a árvore será criada de baixo para
cima, no momento das reduções do /parser/. A maior parte das ações será
composta de chamadas para o procedimento de criação de um nó da
árvore, e associação desta com seus filhos na árvore de derivação que
já foram criados. Ao final do processo de análise sintática, um
ponteiro para a estrutura de dados que guarda a raiz da árvore deve
ser salvo na variável global =arvore=.

** 4. Descompilar o programa de entrada

Implementar a função =descompila= (veja no anexo =main.c= abaixo).
O processo de geração de codigo fonte, ou /descompilação/, será
percorrer a árvore gerada em ordem (ou na ordem apropriada a
determinado nó), a partir da raiz, e imprimir os símbolos que
representam esse nó, incluindo as chamadas recursivas às subárvores,
de forma que seja gerado um programa equivalente ao analisado.  Ele
não será idêntico, pois caracteres como espaços e estruturas como
comentários, entre outros, foram ignorados.  Mas a árvore deve ter as
informações necessárias para gerar facilmente esse programa
equivalente, e pode ter alguns nós específicos para facilitar essa
geração, como um nó ``bloco'', que gera a sequência de abertura de
chuves, lista de comandos e fechamento chaves. 

** 5. Remoção de conflitos/ajustes gramaticais

Todos os conflitos /Reduce-Reduce/ e /Shift-Reduce/ devem ser removidos.

** 6. Gerenciar corretamente a memória do compilador

Implementar a função =libera= (veja no anexo =main.c= abaixo), que deve
liberar a memória de maneira recursiva (de baixo para cima). O
programa =valgrind= será utilizado para averiguar a ausência de
vazamentos de memória.

* Testes da avaliação objetiva

O executável gerado nessa deve fazer um laço de compilação e
descompilação. Ele deve receber o programa pela /entrada padrão/ (como
habitualmente vinha se fazendo nas etapas anteriores), compilá-lo, e
descompilá-lo (a partir da árvore) na /saída padrão/.  Como o arquivo
gerado nunca será totalmente idêntico ao original, o laço
compilação/descompilação será realizado duas vezes e seus resultados
comparados, desta forma:

#+BEGIN_EXAMPLE
# primeiro laço de compilação/descompilação
./etapa3 < source.txt > eq1.txt
# segundo laço de compilação/descompilação
./etapa3 < eq1.txt > eq2.txt
# efetiva comparação (arquivos eq1.txt e eq2.txt devem ser idênticos)
diff eq1.txt eq2.txt
# verificação do resultado
echo $?
#+END_EXAMPLE

O teste é avaliado como correto caso o valor impresso pelo comando
=echo= for 0 _e_ o conteúdo de =eq1.txt= e =eq2.txt= for diferente de vazio e
semanticamente idêntico ao arquivo =source.txt=. Todas as entradas
fornecidas pelo arquivo =source.txt= estarão sintaticamente corretas.

* Anexo - Arquivo =main.c=

A função principal da E3 aparece abaixo. A variável global =arvore= de
tipo =void*= é um ponteiro para a estrutura de dados que contém a raiz
da árvore de derivação do programa. A função =descompila=, cujo
protótipo é dado, deve ser implementada de maneira recursiva para
imprimir toda a árvore, de cima para baixo, da esquerda para a
direita. Isso na prática faz com que o programa da entrada seja
reobtido. A função =libera=, cujo protótipo também é dado, deve ser
implementada para liberar toda a memória que foi alocada para manter a
árvore.

#+BEGIN_SRC C :tangle main.c
/*
Função principal para realização da E3.

Este arquivo não pode ser modificado.
,*/
#include <stdio.h>
#include "parser.tab.h" //arquivo gerado com bison -d parser.y

void *arvore = NULL;
void descompila (void *arvore);
void libera (void *arvore);

int main (int argc, char **argv)
{
  int ret = yyparse(); 
  descompila (arvore);
  libera(arvore);
  arvore = NULL;
  return ret;
}
#+END_SRC

Utilize o comando =extern void *avore= nos outros arquivos que fazem
parte da implementação (como no =parser.y=) para ter acesso a variável
global =arvore= declarada no arquivo =main.c=.

* Anexo - Sobre a Árvore Sintática Abstrata
** Apresentação

A árvore sintática abstrata, do inglês /Abstract Syntax Tree/ (AST), é
uma árvore n-ária onde os nós folha representam os tokens presentes no
programa fonte, os nós intermediários são utilizados para criar uma
hierarquia que condiz com as regras sintáticas, e a raiz representa o
programa inteiro.  Essa árvore registra as derivações reconhecidas
pelo analisador sintático, tornando mais fáceis as etapas posteriores
de verificação e síntese.

A árvore é abstrata (quando comparada a árvore de derivação gramatical
completa) porque não precisa representar detalhadamente todas as
derivações gramaticais para uma entrada dada.  Tipicamente serão
omitidas derivações intermediárias onde um símbolo não terminal gera
somente um outro símbolo terminal, tokens que são palavras reservadas,
e todos os símbolos ``de sincronismo'' ou identificação do código, os
quais estão implícitos na estrutura hierárquica criada. São mantidos
somente os nós fundamentais para manter a semântica da entrada.

** Os nós da árvore

Os nós da árvore serão de =tipos= relacionados aos símbolos não
terminais, ou a nós que representam operações diferentes, no caso das
expressões. É importante notar que normalmente as declarações de tipos
e variáveis podem ser omitidas da AST, pois estas construções
linguísticas não geram código, salvo nas situações onde as variáveis
declaradas devem ser inicializadas.

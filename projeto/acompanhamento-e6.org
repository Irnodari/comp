# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+STARTUP: overview indent
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* Avaliação da Etapa 6
** Grupos que não entregaram até o prazo

| Grupo   | ID     |
|---------+--------|
| Zeta    | ???271 |
| Zeta    | ???673 |
| Psi     | ???499 |
| Eta     | ???834 |
| Eta     | ???424 |
| Mu      | ???932 |
| Mu      | ???794 |
| Omicron | ???055 |
| Sigma   | ???295 |

** Entregas até o prazo

Iota entregou de maneira definitiva com 1:13 minutos de atraso.

| Timestamp           | Grupo   |
|---------------------+---------|
| 2018-11-18 21:03:31 | Tau     |
| 2018-11-30 12:49:54 | Omega   |
| 2018-11-30 13:43:03 | Lambda  |
| 2018-11-30 20:12:52 | Upsilon |
| 2018-11-30 22:18:47 | Theta   |
| 2018-11-30 22:41:00 | Epsilon |
| 2018-11-30 22:44:56 | Alpha   |
| 2018-11-30 22:48:49 | Beta    |
| 2018-11-30 23:20:43 | Delta   |
| 2018-11-30 23:31:19 | Rho     |
| 2018-11-30 23:50:18 | Gamma   |
| 2018-11-30 23:53:11 | Kappa   |
| 2018-12-01 01:13:19 | Iota    |
** Arquivos para testes                                             :ATTACH:
:PROPERTIES:
:Attachments: e6tests.tgz
:ID:       c230a973-0e06-45ff-be22-d4269bd0dde8
:END:

Veja [[data/c2/30a973-0e06-45ff-be22-d4269bd0dde8/e6tests.tgz][este arquivo]].

Todas as entradas estão lexicalmente, sintaticamente e semântica
corretas de acordo com as etapas anteriores. A tabela abaixo demonstra
a localização dos valores na memória ao final do programa, assumindo
que os endereços de deslocamento se referem a base da pilha (=Stack=) ou
do segmento de dados (=Data=). No caso da E6, todos os valores
verificados encontram-se no segmento de dados.

| Test | Type  | Address | Value |
|------+-------+---------+-------|
| e00  | Data  |       0 |    99 |
| e01  | Data  |       0 |    98 |
| e02  | Data  |       0 |    49 |
| e03  | Data  |       0 |   720 |
| e04  | Data  |       0 |    58 |
| e05  | Data  |       0 |     7 |
| e06  | Data  |       4 |    52 |
| e07  | Data  |       4 |   352 |

** Log dos testes automáticos                                        :ATTACH:
:PROPERTIES:
:Attachments: e6v1.log
:ID:       1606d53d-54b7-458d-b563-637a983d6637
:END:

Consulte [[./data/16/06d53d-54b7-458d-b563-637a983d6637/e6v1.log][o arquivo de log]] para obter os resultados elementares (/raw/)
dos testes automáticos. Cada linha começa pelo nome do grupo, sendo
que o separador é a barra vertical. A segunda coluna é o identificador
do teste, e a terceira coluna pode ser =stack=, =data=, =input=, =output=,
=memory=, =instruction=, e =sixit=. Abaixo segue uma explicação do restante
da linha dependendo do valor da terceira coluna da linha:

- Se =stack= e =data=, a quarta coluna indica a base desses segmentos.
- Se =input=, a quarta coluna contém a entrada fornecida pelo grupo (a
  saída do processo de compilação) para o simulador ILOC
- Se =output=, a quarta coluna contém a saída do simulador ILOC
- Se =memory=, a quarta coluna contém endereços e valores da memória ao
  fim da simulação. Notem 
- Se =instruction=, a quarta coluna conterá as estatísticas das
  instruções executadas (quantidade, instrução).
- Se =sixit=, a quarta coluna indicará o código de saída do
  simulador. São três os valores possíveis da quarta coluna: =0=, =1=, e
  =124=.  Caso este valor seja =0=, a simulação ocorreu normalmente (carga
  do código ILOC, execução do programa e encerramento), ainda que a
  entrada (o código ILOC fornecido) seja vazio. O valor =1= indica que
  houve um erro sintático/léxico com o código ILOC produzido pelo
  compilador do grupo, forçando o simulador a abortar com um erro. E
  enfim, o código =124= indica que o simulador não terminou após 1
  segundo de execução, provavelmente por causa de um laço infinito na
  execução do código ILOC gerado pelo grupo.

É a partir deste arquivo que é definida a nota objetiva e as tabelas
abaixo.

** Testes automáticos

A tabela abaixo mostra os resultados dos testes automáticos E6,
considerando as entradas do arquivos para testes.  A coluna =Group= e
=Test= identificam o grupo e o identificador do teste; a coluna =Address=
indica o endereço de memória onde o valor =Value.y= deve ser registrado
para o teste ser considerado certo. A coluna =Eval= é assinalada =TRUE=
(correta) quando o valor da coluna =Value.x=, registrado no endereço
pelo código ILOC emitido pelo grupo, for idêntico ao valor em =Value.y=
esperado. Os endereços da pilha e da base foram definidos de maneira
aleatória por teste.

Somente aparecem testes cuja solução do grupo fornece algo válido, ou seja:
- O código ILOC é livre de erros sintáticos
  - O simulador ILOC é capaz de ler a integralidade das instruções
    geradas pelo compilador do grupo
- O código ILOC termina antes de um segundo de simulação
  - Um segundo foi considerado mais que suficiente para um término
    considerando o tamanho dos programas fornecidos na entrada
- O código ILOC produz algo no local esperado do segmento de dados
  - Veja tabela acima na seção "Arquivos para testes"

| Group   | Test | Address | Value.x | Value.y | Eval  |
|---------+------+---------+---------+---------+-------|
| Alpha   | e02  |   18634 |       0 |      49 | FALSE |
| Alpha   | e04  |   10684 |       0 |      58 | FALSE |
| Alpha   | e05  |    8604 |       1 |       7 | FALSE |
| Alpha   | e06  |    7352 |       0 |      52 | FALSE |
| Alpha   | e07  |    9405 |       0 |     352 | FALSE |
| Beta    | e00  |   14549 |      99 |      99 | TRUE  |
| Beta    | e01  |   18647 |      98 |      98 | TRUE  |
| Beta    | e02  |    6952 |       7 |      49 | FALSE |
| Beta    | e03  |   19417 |     720 |     720 | TRUE  |
| Beta    | e04  |    5025 |       7 |      58 | FALSE |
| Beta    | e05  |   12941 |       7 |       7 | TRUE  |
| Beta    | e06  |    5086 |       6 |      52 | FALSE |
| Beta    | e07  |   19404 |       6 |     352 | FALSE |
| Delta   | e00  |   12176 |       0 |      99 | FALSE |
| Delta   | e01  |   21263 |       0 |      98 | FALSE |
| Epsilon | e00  |   11183 |      99 |      99 | TRUE  |
| Epsilon | e01  |    7388 |      98 |      98 | TRUE  |
| Epsilon | e02  |   15475 |       7 |      49 | FALSE |
| Gamma   | e00  |    7041 |      99 |      99 | TRUE  |
| Gamma   | e01  |   16668 |      98 |      98 | TRUE  |
| Gamma   | e02  |   13545 |       7 |      49 | FALSE |
| Gamma   | e03  |   11279 |       6 |     720 | FALSE |
| Gamma   | e05  |   16204 |       1 |       7 | FALSE |
| Iota    | e00  |    8993 |      99 |      99 | TRUE  |
| Iota    | e01  |   16996 |      98 |      98 | TRUE  |
| Iota    | e02  |   17029 |      49 |      49 | TRUE  |
| Kappa   | e00  |   20341 |      99 |      99 | TRUE  |
| Kappa   | e01  |    5737 |      98 |      98 | TRUE  |
| Kappa   | e02  |   11431 |      49 |      49 | TRUE  |
| Kappa   | e03  |   16949 |       6 |     720 | FALSE |
| Kappa   | e04  |    9044 |      58 |      58 | TRUE  |
| Kappa   | e05  |   17780 |       1 |       7 | FALSE |
| Kappa   | e06  |   13393 |      52 |      52 | TRUE  |
| Kappa   | e07  |    6648 |     352 |     352 | TRUE  |
| Lambda  | e00  |    9796 |      99 |      99 | TRUE  |
| Lambda  | e01  |   13252 |      98 |      98 | TRUE  |
| Lambda  | e02  |   15069 |      49 |      49 | TRUE  |
| Lambda  | e03  |   15040 |     720 |     720 | TRUE  |
| Lambda  | e04  |    8444 |      58 |      58 | TRUE  |
| Lambda  | e05  |    8845 |       7 |       7 | TRUE  |
| Lambda  | e06  |   13764 |      52 |      52 | TRUE  |
| Lambda  | e07  |   21216 |     352 |     352 | TRUE  |
| Omega   | e00  |    7048 |      99 |      99 | TRUE  |
| Omega   | e01  |    5677 |      98 |      98 | TRUE  |
| Omega   | e02  |   16699 |      49 |      49 | TRUE  |
| Omega   | e03  |    6627 |     720 |     720 | TRUE  |
| Omega   | e04  |   21360 |      58 |      58 | TRUE  |
| Omega   | e05  |    8583 |       7 |       7 | TRUE  |
| Omega   | e06  |   14293 |      52 |      52 | TRUE  |
| Omega   | e07  |   18850 |     352 |     352 | TRUE  |
| Rho     | e00  |   19142 |      99 |      99 | TRUE  |
| Rho     | e01  |    7488 |      98 |      98 | TRUE  |
| Rho     | e02  |    5493 |      49 |      49 | TRUE  |
| Rho     | e03  |    5873 |     720 |     720 | TRUE  |
| Rho     | e04  |   11222 |      58 |      58 | TRUE  |
| Rho     | e05  |   18863 |       4 |       7 | FALSE |
| Rho     | e06  |   20714 |      52 |      52 | TRUE  |
| Rho     | e07  |   18377 |     352 |     352 | TRUE  |
| Tau     | e00  |    9169 |      99 |      99 | TRUE  |
| Tau     | e01  |   16432 |      98 |      98 | TRUE  |
| Tau     | e03  |   17706 |     720 |     720 | TRUE  |
| Tau     | e04  |    8463 |      58 |      58 | TRUE  |
| Tau     | e05  |    5869 |       7 |       7 | TRUE  |
| Tau     | e06  |   11788 |      52 |      52 | TRUE  |
| Tau     | e07  |    7014 |     352 |     352 | TRUE  |
| Theta   | e00  |   18258 |      99 |      99 | TRUE  |
| Upsilon | e00  |   13032 |      99 |      99 | TRUE  |
| Upsilon | e01  |    9957 |      98 |      98 | TRUE  |
| Upsilon | e04  |    6615 |      58 |      58 | TRUE  |
| Upsilon | e06  |   21034 |      52 |      52 | TRUE  |
| Upsilon | e07  |   18618 |  446748 |     352 | FALSE |

** Interpretação dos demais resultados automáticos

A tabela abaixo mostra o código de saída do simulador (na coluna
=Value=) quando é fornecido o código ILOC gerado pelo compilador do
grupo =Group= munido da entrada cujo identificador esta na coluna =Test=.
São três os valores possíveis da quarta coluna: =0=, =1=, e =124=.  Caso
este valor seja =0=, a simulação ocorreu normalmente (carga do código
ILOC, execução do programa e encerramento), ainda que a entrada (o
código ILOC fornecido) seja vazio. O valor =1= indica que houve um erro
sintático/léxico com o código ILOC produzido pelo compilador do grupo,
forçando o simulador a abortar com um erro. E enfim, o código =124=
indica que o simulador não terminou após 1 segundo de execução,
provavelmente por causa de um laço infinito na execução do código ILOC
gerado pelo grupo.

| Group   | Test | Value |
|---------+------+-------|
| Alpha   | e00  |     0 |
| Alpha   | e01  |     0 |
| Alpha   | e02  |     0 |
| Alpha   | e03  |   124 |
| Alpha   | e04  |     0 |
| Alpha   | e05  |     0 |
| Alpha   | e06  |     0 |
| Alpha   | e07  |     0 |
| Beta    | e00  |     0 |
| Beta    | e01  |     0 |
| Beta    | e02  |     0 |
| Beta    | e03  |     0 |
| Beta    | e04  |     0 |
| Beta    | e05  |     0 |
| Beta    | e06  |     0 |
| Beta    | e07  |     0 |
| Delta   | e00  |     0 |
| Delta   | e01  |     0 |
| Delta   | e02  |     0 |
| Delta   | e03  |     0 |
| Delta   | e04  |   124 |
| Delta   | e05  |     0 |
| Delta   | e06  |   124 |
| Delta   | e07  |   124 |
| Epsilon | e00  |     0 |
| Epsilon | e01  |     0 |
| Epsilon | e02  |     0 |
| Epsilon | e03  |     1 |
| Epsilon | e04  |     1 |
| Epsilon | e05  |     1 |
| Epsilon | e06  |     1 |
| Epsilon | e07  |     1 |
| Gamma   | e00  |     0 |
| Gamma   | e01  |     0 |
| Gamma   | e02  |     0 |
| Gamma   | e03  |     0 |
| Gamma   | e04  |   124 |
| Gamma   | e05  |     0 |
| Gamma   | e06  |   124 |
| Gamma   | e07  |   124 |
| Iota    | e00  |     0 |
| Iota    | e01  |     0 |
| Iota    | e02  |     0 |
| Iota    | e03  |   124 |
| Iota    | e04  |     0 |
| Iota    | e05  |   124 |
| Iota    | e06  |     0 |
| Iota    | e07  |     0 |
| Kappa   | e00  |     0 |
| Kappa   | e01  |     0 |
| Kappa   | e02  |     0 |
| Kappa   | e03  |     0 |
| Kappa   | e04  |     0 |
| Kappa   | e05  |     0 |
| Kappa   | e06  |     0 |
| Kappa   | e07  |     0 |
| Lambda  | e00  |     0 |
| Lambda  | e01  |     0 |
| Lambda  | e02  |     0 |
| Lambda  | e03  |     0 |
| Lambda  | e04  |     0 |
| Lambda  | e05  |     0 |
| Lambda  | e06  |     0 |
| Lambda  | e07  |     0 |
| Omega   | e00  |     0 |
| Omega   | e01  |     0 |
| Omega   | e02  |     0 |
| Omega   | e03  |     0 |
| Omega   | e04  |     0 |
| Omega   | e05  |     0 |
| Omega   | e06  |     0 |
| Omega   | e07  |     0 |
| Rho     | e00  |     0 |
| Rho     | e01  |     0 |
| Rho     | e02  |     0 |
| Rho     | e03  |     0 |
| Rho     | e04  |     0 |
| Rho     | e05  |     0 |
| Rho     | e06  |     0 |
| Rho     | e07  |     0 |
| Tau     | e00  |     0 |
| Tau     | e01  |     0 |
| Tau     | e02  |     0 |
| Tau     | e03  |     0 |
| Tau     | e04  |     0 |
| Tau     | e05  |     0 |
| Tau     | e06  |     0 |
| Tau     | e07  |     0 |
| Theta   | e00  |     0 |
| Theta   | e01  |     0 |
| Theta   | e02  |     0 |
| Theta   | e03  |     0 |
| Theta   | e04  |   124 |
| Theta   | e05  |     0 |
| Theta   | e06  |   124 |
| Theta   | e07  |   124 |
| Upsilon | e00  |     0 |
| Upsilon | e01  |     0 |
| Upsilon | e02  |     0 |
| Upsilon | e03  |     1 |
| Upsilon | e04  |     0 |
| Upsilon | e05  |     1 |
| Upsilon | e06  |     0 |
| Upsilon | e07  |     0 |

A tabela abaixo mostra as razões que levam a saída de erro =1=, que
indica problema léxico/sintático no código ILOC gerado pelo grupo.

A coluna =Type= indica a origem do erro, se é uma saída do próprio
compilador do grupo (caso quando =Type= tem o valor =input=), ou quando o
erro aparece na saída do simulador ilocsim (quando o valor de =Type= é
=output=).

| Group   | Test | Type   | Value                                                                              |
|---------+------+--------+------------------------------------------------------------------------------------|
| Epsilon | e03  | input  | =Erro na linha 10: Sobram argumentos!=                                               |
| Epsilon | e03  | output | =Erro sintático na linha 1 com a instrução ( Erro na linha 10: Sobram argumentos! )= |
| Epsilon | e04  | input  | =Erro na linha 35: Faltam argumentos!=                                               |
| Epsilon | e04  | output | =Erro sintático na linha 1 com a instrução ( Erro na linha 35: Faltam argumentos! )= |
| Epsilon | e05  | input  | =Erro na linha 7: Sobram argumentos!=                                                |
| Epsilon | e05  | output | =Erro sintático na linha 1 com a instrução ( Erro na linha 7: Sobram argumentos! )=  |
| Epsilon | e06  | input  | =Erro na linha 23: Faltam argumentos!=                                               |
| Epsilon | e06  | output | =Erro sintático na linha 1 com a instrução ( Erro na linha 23: Faltam argumentos! )= |
| Epsilon | e07  | input  | =Erro na linha 14: Sobram argumentos!=                                               |
| Epsilon | e07  | output | =Erro sintático na linha 1 com a instrução ( Erro na linha 14: Sobram argumentos! )= |
| Upsilon | e03  | output | =Erro sintático na linha 33 com a instrução ( jumpI => )=                             |
| Upsilon | e05  | output | =Erro sintático na linha 34 com a instrução ( jumpI => )=                             |

# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Visão geral de um compilador
#+Author: Prof. Lucas M. Schnorr (UFRGS)
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS:   H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{../org-babel.tex}

* Linguagens de Programação
+ Modelos de Linguagem de Programação (MLP)
+ Linguagem de programação
  + meio de comunicação entre o usuário e o computador \linebreak

#+CAPTION: Do pensamento humano não estruturado ao computador
[[./img/pensamento_humano-computador.png]]

+ <2->Linguagens em diferentes níveis de abstração
  + Baixo nível (de máquina, usada pelo computador)
  + Alto nível (próxima ao pensamento humano)
* Níveis de Abstração em Linguagens
+ Linguagens de máquina
  + Seqûencia de zeros e uns (0011010000011101)
  + Notação binária
+ <2->Linguagens Simbólicas
  + Exemplo: Assembly
  + Add 4(0), #1
+ <3-> *Linguagens orientadas ao usuário*
  + Maioria das linguagens de programação
    + C, Fortran, Pascal, Algol, Ada, Objective-C, C++
    + *x += 1;
+ <4->Linguagens orientadas à aplicação (scripts)
  + Excel, SQL, Matlab, R, ...
* Tradução de Linguagens de Programação
+ Duas definições para *compilador*
+ <1-> Forte: é um programa de computador que transforma uma
  *linguagem de alto nível* qualquer em uma *linguagem de máquina* de uma determinada arquitetura
#+CAPTION: Do programa fonte ao programa objeto
[[./img/programa_fonte-compilador-objeto.png]]
  \vfill
+ <2-> Fraca: é um programa de computador que transforma uma
  linguagem de alto nível em outra linguagem qualquer
  \vfill
+ <3-> Compilador ou interpretador?
  + Há diferença
+ <4-> Combinando as duas abordagens
  + Exemplo: Java, Python
  + Por questões de desempenho 

* Passos no processo de tradução
** Texto                                                    :B_column:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.6
    :BEAMER_env: column
    :END:
    + Várias etapas
    + Programas auxiliares
      + Normalmente embutidos
    + <2->Exemplo utilizando *gcc*
      + gcc -E hello.c > hello-pre.c
      + gcc -c hello-pre.c -o hello.o
      + nm hello.o
      + gcc hello.o -o hello
      + nm hello
      + ldd hello
      + hexdump hello.o | wc -l
      + hexdump hello | wc -l
** Figura                                                   :B_column:BMCOL:
:PROPERTIES:
    :BEAMER_col: 0.43
    :BEAMER_env: column
    :END:
\vfill

#+CAPTION: Os passos de tradução
[[./img/etapas_compilacao.png]]

* Partes do processo de compilação
+ Análise (front-end) \\
  *Reconhecer* o que o usuário quer escrever
  + ``Palavras'' \rightarrow análise lexical
  + ``Frases'' \rightarrow análise sintática/semântica
  + Detecção de erros
    \vfill
+ <2->Síntese (back-end) \\
  *Produzir* alguma coisa, em função da análise
  + Meta-representação do programa (código intermediário)
  + Tabela de símbolos
  + Código otimizado
* Estrutura de um Compilador em etapas

#+CAPTION: As etapas do passo de compilação.
#+ATTR_LATEX: :width 6.5cm
[[./img/fases_compilacao.png]]

* Análise Lexical (scanner)
+ Identificar sequências significativas na entrada: *lexemas*
+ Quando um lexema é identificado, gera um *token*
+ Funções adicionais
  + Começa a construção da tabela de símbolos
  + Detecção de erros léxicos, gerando mensagens de erro

#+CAPTION: O funcionamento da análise léxica.
#+ATTR_LATEX: :width 8cm
[[./img/analisa_lexica.png]]

+ Um token é composto de: *<nome-token, valor-atributo>*
+ Exemplo

* Como reconhecer os tokens?
+ Através do uso de *Expressões Regulares*
+ Algumas regras para formação de palavras válidas
  + Concatenação: xy (x seguido de y)
  + Alternação: x|y (x ou y)
  + Repetição: x* (x repetido 0 ou mais vezes)
  + Repetição: x+ (x repetido 1 ou mais vezes)
+ <2->As mesmas expressões regulares usadas correntemente
  + vim -- usando o comando /<regexp>/
  + emacs -- Crtl + Alt + % ``Query replace regexp ->''
  + grep, sed, ...
+ <3-> Existe uma multitude de recursos de apoio
  + Procurar por ``Regular Expressions'' em qualquer livraria
  + Manual do SED: http://www.gnu.org/software/sed/
  + man grep (seção "Regular Expressions")

* Análise Sintática (parsing)
+ Tem como entrada um fluxo de tokens
+ Mapeia sequências de tokens para estruturas sintáticas
+ Cria uma *Árvore de Sintaxe*
  + Nós intermediários representam operações
  + Filhos desses nós representam os argumentos

#+CAPTION: O funcionamento da análise sintática.
#+ATTR_LATEX: :width 8cm
[[./img/analisa_sintatica.png]]

+ Funções
  + Verificar a estrutura gramatical do programa
  + Detecção de erros sintáticos, gerando mensagens de erro
  + Tentar sobreviver a um erro sintático
* Como construir a árvore de sintaxe?
Através do uso de *Gramáticas Livres de Contexto*
+ Conjunto de símbolos terminais (T), símbolos não-terminais (NT)
+ Conjunto de produções (ou Regras de derivação) \linebreak
  <NT> \rightarrow sequência de <T> ou <NT>
+ Um <NT> como o símbolo inicial da gramática

+ Notação para gramáticas: *BNF* (Backus-Naur Form) \\
  | *<comando>*   | \to | <while>                        |
  | *<comando>*   | \rightarrow | <atrib>                        |
  | <while>     | \rightarrow | while <expr-bool> do <comando> |
  | <atrib>     | \rightarrow | <variável> = <expr-arit>       |
  | <expr-bool> | \rightarrow | <expr-arit> < <expr-arit>      |
  | <expr-arit> | \rightarrow | <expr-arit> + <termo>          |
  | <expr-arit> | \rightarrow | <termo>                        |
  | <termo>     | \rightarrow | <número>                       |
  | <termo>     | \rightarrow | <variável>                     |
  | <variável>  | \rightarrow | i                              |
  | <variável>  | \rightarrow | j                              |
  | <número>    | \rightarrow | 100                            |
#+END_EXAMPLE
* Árvore de derivação
+ Ilustra a *derivação das regras* de uma gramática
+ Considerando a entrada: *while i < 100 do i = j + i*

#+CAPTION: A árvore de derivação.
[[./img/arvore_derivacao.png]]

* Análise Semântica
+ Avaliar a *consistência semântica* do programa
+ Verificação de tipos
  + Métodos de coerção (caso a definição da linguagem autorisar)
+ Exemplo
* Geração de Código Intermediário
+ Usa a *representação interna* do compilador
  + Exemplo: LLVM Language Reference Manual \linebreak
    http://www.llvm.org/docs/LangRef.html
+ Gera código objeto ou intermediário
+ Se for um código intermediário
  + não especifica detalhes arquiteturais
  + registradores
  + endereçamento, etc
+ Exemplo com código de três endereços
+ <2->Exemplo considerando a entrada: *while i < 100 do i = j + i*
  #+BEGIN_SRC C
  L0: if i < 100 goto L1
      goto L2
  L1: temp = i + j
      i = temp
      goto L0
  L2: ...
  #+END_SRC
* Otimização de Código
 + Realizar *otimizações* sobre o código intermediário
   + Desempenho durante a execução
   + Eficiência na ocupação dos recursos \linebreak
     \rightarrow diminuir quantidade de memória, de registradores
 \vfill
 + <2->Exemplo a partir do código de três endereços
   + Considerando a entrada: *while i < 100 do i = j + i*
 + <3-> Código original
   \scriptsize
   #+BEGIN_SRC C
L0: if i < 100 goto L1
    goto L2
L1: temp = i + j
    i = temp
    goto L0
L2:     
   #+END_SRC
 + <4-> Código otimizado
   \scriptsize
   #+BEGIN_SRC C
   L0: if i >= 100 goto L2
       i = i + j
       goto L0
   L2:     
   #+END_SRC
* Geração de Código Objeto
+ Gerar código objeto considerando
  + Qual é a arquitetura alvo
  + Alocação de memória
  + Seleção de registradores
+ Exemplo considerando a entrada: *while i < 100 do i = j + i*
** <2-> Código Otimizado                                             :BMCOL:
    :PROPERTIES:
    :BEAMER_envargs: C[t]
    :BEAMER_col: 0.38
    :END:
\scriptsize
#+BEGIN_SRC C
     L0: if i >= 100 goto L2
         i = i + j
         goto L0
     L2:
#+END_SRC
\vspace{1cm}

** <2-> Código Objeto para PC8086                                    :BMCOL:
    :PROPERTIES:
    :BEAMER_envargs: C[t]
    :BEAMER_col: 0.6
    :END:
\scriptsize
#+BEGIN_SRC C
L0: MOV AX, i
    CMP AX, 100
    JGE L2     //jump condicional
    MOV AX, j
    MOV BX, i
    ADD BX
    MOV i, AX
    JMP L0     //jump não condicional
L2: ...
#+END_SRC
\vspace{1cm}
* Gerência da Tabela de Símbolos
+ Acompanha todas as fases do compilador
+ Guarda atributos das *variáveis* e *funções* do programa
+ <2->Atributos de variáveis
  + Espaço de memória
  + Tipo
  + Escopo
+ <2-> e de funções
  + Quantidade e tipos de argumentos
  + Método de passagem de parâmetro (valor, referência, ...)
  + Tipo de retorno
\vfill
+ <3-> *Acesso eficiente*
  + Inserção
  + Extração
* Tratamento e Recuperação de Erros
+ O que fazer quando um erro é detectado? \\
  (considerando apenas erros léxicos e sintáticos?)
+ <2-> *Sobreviver*, se recuperando da seguinte forma
  + Fazer uma suposição a respeito do erro
  + Continuar a análise confiando na suposição feita
\vfill
+ <3-> Como sobreviver a um erro léxico? \\
+ <3-> Como sobreviver a um erro sintático?
+ <3-> E sobre erros de geração/otimização de código?
* Estrutura Geral de um Compilador

#+CAPTION: As etapas do passo de compilação.
#+ATTR_LATEX: :width 6.5cm
[[./img/fases_compilacao.png]]

* Geradores de Compiladores
+ Análise Léxica -- *flex*
+ Análise Sintática -- *bison*
+ Gerador de Código
* Conclusão da Aula de Hoje
- Estrutura geral de um compilador

+ Leituras recomendadas
  + Capítulo 1 de Aho et. al. (Dragão Roxo ou Vermelho)
    + Cuidado na versão em português
  + Capítulo 1 de Price & Toscani (2008)
  + http://dinosaur.compilertools.net \\
    Toda a turma: Lex | Yacc | Flex | Bison
- Próxima aula
  - Análise Léxica
  - Expressões Regulares

# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Expressões
#+Author: Prof. Lucas M. Schnorr (UFRGS)
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS:   H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{../org-babel.tex}

* Geração -- Expressões
Considerando a gramática aritmética simplificada
  | S | \rightarrow | *nome* = E;       |
  | E | \rightarrow | E + E             |
  | E | \rightarrow | E * E             |
  | E | \rightarrow | ( E ) \vert *id*  |
Supondo que temos a entrada $var = x + y * z;$
+ O código TAC correspondente terá três operações
  | $t_1 = y * z$   |
  | $t_2 = x + t_1$ |
  | $var = t_2$     |
* Implementação
Dois mecanismos
#+latex: \vfill
Atributos *sintetizados*
+ Atributo /local/ armazena o nome da variável -- t_1 ou t_2
+ Atributo /codigo/ armazena o código TAC sintetizado
Funções auxiliares
+ Função /gera()/ escreve o código
+ Símbolo \vert\vert significa concatenação
+ A função /temp()/ retorna um nome de temporário -- t_x
* Esquema de Tradução

| S | \rightarrow | *nome* = E; | S.codigo = E.codigo; $\vert\vert$                              |
|   |             |             | gera(nome.local = E.local);                                    |
|---+-------------+-------------+----------------------------------------------------------------|
| E | \rightarrow | $E_1 + E_2$ | E.local = temp();                                              |
|   |             |             | E.codigo = $E_1$.codigo $\vert\vert$ $E_2$.codigo $\vert\vert$ |
|   |             |             | gera(E.local = $E_1$.local + $E_2$.local);                     |
|---+-------------+-------------+----------------------------------------------------------------|
| E | \rightarrow | $E_1 * E_2$ | E.local = temp();                                              |
|   |             |             | E.codigo = $E_1$.codigo $\vert\vert$ $E_2$.codigo $\vert\vert$ |
|   |             |             | gera(E.local = $E_1$.local $*$ $E_2$.local);                   |
|---+-------------+-------------+----------------------------------------------------------------|
| E | \rightarrow | ( $E_1$ )   | E.local = $E_1$.local;                                         |
|   |             |             | E.codigo = $E_1$.codigo                                        |
|---+-------------+-------------+----------------------------------------------------------------|
| E | \rightarrow | *id*        | E.local = id.lexval;                                           |
|   |             |             | E.codigo = "";                                                 |

Testar com o exemplo $var = x + y * z;$
+ Gerar árvore de derivação ou *AST*
+ Executar as ações semânticas de tradução

# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Grafos de Fluxo de Controle
#+Author: Prof. Lucas M. Schnorr (UFRGS)
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS:   H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{../org-babel.tex}

* Otimização de Código
Principal dificuldade
+ Saber quando uma instrução irá manipular uma variável
+ Em tempo de execução
#+latex: \vfill
\pause Quando o fluxo avança sem desvios
+ Simples: calculamos a vida e morte de variáveis
+ Grafo de interferências \rightarrow Pode nos levar a uma melhoria
\pause O que fazer quando o fluxo é desviado?
      |     | x = 10               |
      | l1: | if (cond) goto l2    |
      |     | y = x+1              |
      |     | if (x >= 20) goto l1 |
      |     | x = 10               |
      |     | y = 0                |
      |     | goto l1              |
      | l2: | print y              |
\pause Decomposição do TAC em *blocos básicos*
* Blocos básicos
Instrução líder pode ser
+ Primeira instrução de um programa
+ Instrução destino de uma operação de desvio
+ Instrução imediatamente após uma operação de desvio
\pause Bloco básico
+ Trecho de programa que inicia em uma instrução líder
+ Vai até o líder seguinte sem nenhum comando de desvio
\pause Grafo de fluxo
+ DAG que indica o fluxo de controle entre blocos básicos
* Exemplo 1 -- produto escalar
#+BEGIN_SRC C
begin
  prod = 0
  i = 1
  do begin
     prod = prod + a[i] * b[i]
     i = i + 1
  end
  while i <= 20
end
#+END_SRC
* Código TAC do Exemplo 1
| (1)  | prod = 0            |
| (2)  | i = 1               |
| (3)  | t1 = 4 * i          |
| (4)  | t2 = a[t1]          |
| (5)  | t3 = 4 * i          |
| (6)  | t4 = b[t3]          |
| (7)  | t5 = t2 * t4        |
| (8)  | t6 = prod + t5      |
| (9)  | prod = t6           |
| (10) | t7 = i + 1          |
| (11) | i = t7              |
| (12) | if i <= 20 goto (3) |
| (13) | halt                | 
#+latex: \vfill
Quais são as instruções líderes?

Quais são os blocos básicos?

Qual é o grafo de fluxo de controle?

* Código TAC do Exemplo 1

| (1)  | _prod = 0_          |
| (2)  | i = 1               |
| (3)  | _t1 = 4 * i_        |
| (4)  | t2 = a[t1]          |
| (5)  | t3 = 4 * i          |
| (6)  | t4 = b[t3]          |
| (7)  | t5 = t2 * t4        |
| (8)  | t6 = prod + t5      |
| (9)  | prod = t6           |
| (10) | t7 = i + 1          |
| (11) | i = t7              |
| (12) | if i <= 20 goto (3) |
| (13) | _halt_              | 

#+latex: \vfill

* Exemplo 2 -- quicksort

#+BEGIN_SRC C
void quickSort (m, n) {
  int i, j;
  int v, x;
  if (n <= m) return;
  i = m-1; j = n; v = a[n];
  while(1) {
    do i=i+1; while (a[i] < v);
    do j=j-1; while (a[j] > v);
    if (i >= j) break;
    x = a[i]; a[i] = a[j]; a[j] = x;
  }
  x = a[i]; a[i] = a[n]; a[n] = x;
  quicksort(m,j);
  quicksort(i+1, n);
}

#+END_SRC
Vamos nos focar nas linhas 5 a 12

* Exemplo 2 -- quicksort TAC

|  1 | i = m - 1           |   | 16 | t7 = 4 \times i   |
|  2 | j = n               |   | 17 | t8 = 4 \times j   |
|  3 | t1 = 4 \times n          |   | 18 | t9 = a[t8]   |
|  4 | v = a[t1]           |   | 19 | a[t7] = t9   |
|  5 | i = i + 1           |   | 20 | t10 = 4 \times j  |
|  6 | t2 = 4 \times i          |   | 21 | a[t10] = x   |
|  7 | t3 = a[t2]          |   | 22 | goto (5)     |
|  8 | if t3 < v goto (5)  |   | 23 | t11 = 4 \times i  |
|  9 | j = j - 1           |   | 24 | x = a[t11]   |
| 10 | t4 = 4 \times j          |   | 25 | t12 = 4 \times i  |
| 11 | t5 = a[t4]          |   | 26 | t13 = 4 \times n  |
| 12 | if t5 > v goto (9)  |   | 27 | t14 = a[t13] |
| 13 | if i >= j goto (23) |   | 28 | a[t12] = t14 |
| 14 | t6 = 4 \times i          |   | 29 | t15 = 4 \times n  |
| 15 | x = a[t6]           |   | 30 | a[t15] = x   |

* Exemplo 2 -- quicksort TAC (líderes)

|  1 | _i = m - 1_           |   | 16 | t7 = 4 \times i    |
|  2 | j = n                 |   | 17 | t8 = 4 \times j    |
|  3 | t1 = 4 \times n       |   | 18 | t9 = a[t8]         |
|  4 | v = a[t1]             |   | 19 | a[t7] = t9         |
|  5 | _i = i + 1_           |   | 20 | t10 = 4 \times j   |
|  6 | t2 = 4 \times i       |   | 21 | a[t10] = x         |
|  7 | t3 = a[t2]            |   | 22 | goto (5)           |
|  8 | if t3 < v goto (5)    |   | 23 | _t11 = 4 \times i_ |
|  9 | _j = j - 1_           |   | 24 | x = a[t11]         |
| 10 | t4 = 4 \times j       |   | 25 | t12 = 4 \times i   |
| 11 | t5 = a[t4]            |   | 26 | t13 = 4 \times n   |
| 12 | if t5 > v goto (9)    |   | 27 | t14 = a[t13]       |
| 13 | _if i >= j goto (23)_ |   | 28 | a[t12] = t14       |
| 14 | _t6 = 4 \times i_     |   | 29 | t15 = 4 \times n   |
| 15 | x = a[t6]             |   | 30 | a[t15] = x         |

* Exercício: Calcule o grafo de fluxo com blocos básicos
\small
  | (1)  | i = 1                |
  | (2)  | j = 1                |
  | (3)  | t1 = 10 \times i     |
  | (4)  | t2 = t1 + j          |
  | (5)  | t3 = 8 \times t2     |
  | (6)  | t4 = t3 - 88         |
  | (7)  | a[t4] = 0.0          |
  | (8)  | j = j + 1            |
  | (9)  | if j <= 10 goto (3)  |
  | (10) | i = i + 1            |
  | (11) | if i <= 10 goto (2)  |
  | (12) | i = 1                |
  | (13) | t5 = i - 1           |
  | (14) | t6 = 88 \times t5    |
  | (15) | a[t6] = 1.0          |
  | (16) | i = i + 1            |
  | (17) | if i <= 10 goto (13) |

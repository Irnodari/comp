# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Compiladores
#+Author: Prof. Lucas M. Schnorr (UFRGS)
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames, aspectratio=169, presentation]
#+OPTIONS: title:nil H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{../org-babel.tex}

#+latex: \newcommand{\mytitle}{Árvore Sintática Abstrata (AST)}
#+latex: \mytitleslide

* Processo de derivação
Representação do processo de derivação
- Mostra a estrutura sintática do programa

#+Latex: \vfill

Estrutura hierárquica
+ Raiz é o símbolo inicial da gramática
+ Vértices intermediários são não-terminais
+ Folhas são os terminais e palavras vazias ($\epsilon$)
* Árvores de Derivação

Como fica a árvore de derivação para *(34 - 3) \times 42*

| exp | \rightarrow | exp op exp |
| exp | \rightarrow | *(* exp *)*    |
| exp | \rightarrow | *número*     |
| op  | \rightarrow | *+* \vert *-* \vert *\times*  |

#+latex: \vfill\pause

Podemos simplificar a árvore de derivação?
+ Mantendo a semântica (geração de código)
* Árvore Sintática Abstrata (AST)
#+BEGIN_CENTER
AST \rightarrow /Abstract Syntax Tree/

https://en.wikipedia.org/wiki/Abstract_syntax_tree

#+latex: \bigskip

*Análise sintática, com a AST, é o centro do compilador*

AST é uma simplificação da árvore de derivação, com semântica idêntica
#+END_CENTER

#+latex: \vfill\pause

Princípio da tradução direcionada por sintaxe
- Geração de código é realizada sobre a árvore
  - /na medida que a árvore vai sendo criada/

* AST -- Exemplo 1
Supondo a gramática de expr. ariméticas com atribuição
  | stmt  | \rightarrow | ident = exp                  |
  | ident | \rightarrow | *var*                        |
  | exp   | \rightarrow | exp op exp                   |
  | exp   | \rightarrow | *(* exp *)*                  |
  | exp   | \rightarrow | *número*                     |
  | op    | \rightarrow | *+* \vert *-* \vert *\times* |
Como fica a AST para *var = (34 - 3) \times 42* ?
* AST -- Exemplo 2
Supondo a gramática para o comando *if*
  | S | \rightarrow | C \vert *a*             |
  | C | \rightarrow | *if (* E *)* S        |
  | C | \rightarrow | *if (* E *)* S *else* S |
  | E | \rightarrow | *f* \vert *t*             |

Qual a AST para esta entrada?
#+BEGIN_SRC 
if (f)
   if (t)
      a
   else
      a
#+END_SRC

* AST -- Exemplo 3

Supondo a gramática para os comandos *do while* e *if*

  | S | \rightarrow | W \vert C \vert *a*         |
  | W | \rightarrow | *do* S *while (* E *)*  |
  | C | \rightarrow | *if (* E *)* S        |
  | C | \rightarrow | *if (* E *)* S *else* S |
  | E | \rightarrow | *f* \vert *t*             |

Qual a AST para esta entrada?

#+BEGIN_SRC 
if (f)
   if (t)
      a
   else
      do
         a
      while (t)
#+END_SRC

* AST -- Exemplo 4

Supondo gramática de seq. de comandos separados por *;*

  | SS | \rightarrow | S *;* SS \vert S *;* |
  | S  | \rightarrow | *comando*      |

Qual a AST para esta entrada?

#+BEGIN_SRC 
comando;
comando;
comando;
#+END_SRC

* AST -- Exemplo 5
Supondo a gramática

  | SS | \rightarrow | S *;* SS \vert S *;*      |
  | S  | \rightarrow | W \vert C \vert *a*         |
  | W  | \rightarrow | *do* S *while (* E *)*  |
  | C  | \rightarrow | *if (* E *)* S        |
  | C  | \rightarrow | *if (* E *)* S *else* S |
  | E  | \rightarrow | *f* \vert *t*             |

Qual a AST para esta entrada?

#+BEGIN_SRC 
do
   if (t)
      a
while (f);
if (f)
   a
;
#+END_SRC


#+STARTUP: overview indent
#+TITLE: Dúvidas da E5 do Projeto de Compilador
* E5
** DONE 2020-10-23 D0
*** Dúvida #1
Foi mencionado em um dos vídeos de dúvidas da etapa 4 que os literais
deveriam ser guardados na tabela de símbolos, pois acabariam na área
de dados do programa. Naquele vídeo, foi dito que esta inserção pode
ser feita na tabela de símbolos do escopo onde ele é encontrado, e foi
assim que implementei a etapa 4. Agora com o conhecimento sobre a
geração do código, refleti sobre este posicionamento, e acredito que
para que o literal acabe no segmento de dados ele deve ser inserido na
tabela de símbolos global, contabilizando seu tamanho também na
geração de endereços da mesma.

#+BEGIN_EXAMPLE
int y;

int main()
{
    int x <= 5;
}
#+END_EXAMPLE

Na forma que implementei na etapa 4 tenho as tabelas:

GLOBAL  (Endereço corrente ao final do reconhecimento = 8. )
| Nome | Tamanho | Endereco |
|------+---------+----------|
| y    |       4 |        0 |
| main |       4 |        4 |

MAIN (Endereço corrente ao final do reconhecimento = 8. )
| Nome | Tamanho | Endereco |
|------+---------+----------|
| x    |       4 |        0 |
| "5"  |       4 |        4 |

Porém após a reflexão, imagino que o correto seria:

GLOBAL (Endereço corrente ao final do reconhecimento = 12)
| Nome | Tamanho | Endereco |
|------+---------+----------|
| y    |       4 |        0 |
| main |       4 |        4 |
| "5"  |       4 |        8 |

MAIN (Endereço corrente ao final do reconhecimento = 4)
| Nome | Tamanho | Endereco |
|------+---------+----------|
| x    |       4 |        0 |

Para que o literal "5" acabe no data segment.

Qual das duas está correta? Em outras palavras, devo inserir o literal
no frame da função onde aparece ou no data segment do programa como um
todo?
** DONE 2020-11-02 D1
*** Dúvida #1

Quanto a etapa5, você poderia montar um exemplo um pouco mais concreto
de uma saida iloc para um arquivo simples de entrada?

e como podemos conferir se um programa nosso está executando
corretamente no simulador com um exemplo de como será a avaliação do
trabalho?

*** Dúvida #2

Olá professor, na etapa 4 implementamos os blocos de instruções como
sendo uma nova tabela. Na etapa 5, temos que definir os endereços das
variáveis.  Na aula N10 A5, você explica que para escopos anônimos, o
deslocamento do escopo anterior deve ser atualizado ao se fechar o
escopo anônimo. Porém, levando em conta nossa implementação, isso
continua válido? Pois, ao fechar-se o escopo anônimo, a sua tabela
deixaria de existir. Ao atualizar o deslocamento, estaria se
considerando que as variáveis do bloco anônimo (já fechado) continuam
existindo.

*** Dúvida #3

Outra dúvida seria sobre o endereçamento. Devemos começar no endereço
mais alto (seria 2^64?) como no C, ou no 0?

*** Dúvida #4

Quanto a parte de criação pro programa iloc, quando houver uma chamada
de uma função, `f()` por exemplo, eu preciso criar novos dados na
pilha pra cada chamada de função, correto? então, se for uma função
recursiva, deveriamos criar isso varias vezes. Como que criamos a
tabela durante a execução, já que não teriamos como saber quantas
vezes a função seria chamada, ou não precisamos tratar isso e
"reutilizar" as variaveis definidas?

*** Dúvida #5

Estou com umas duvidas quanto a utilização dos registradores
reservados (rbss, rfp), de acordo com o que diz em aula, esses valores
são definidos por padrão, exemplo do rbss que não se altera durante a
execução. Em nosso programa, não precisamos nós mesmos manter controle
deles durante a execução? Peço isso especialmente quanto a ideia do
empilhamento em uma chamada de função, pois não entendi muito bem como
manter o controle deles em casos assim.

*** Dúvida #6

Se a entrada começar com a seguinte declaração de variáveis globais:

int a, b;

é necessário que o deslocamento da variável "a" seja 0 e o da variável
"b" 4, ou é aceitável que "b" apresente o deslocamento 0 (pois estamos
adicionando as variáveis na tabela de símbolos na ordem inversa)?
** DONE 2020-11-04 D2
*** Dúvida #1

Surgiu uma dúvida enquanto implementava a geração de código para a
declaração de funções, em especial a função 'main'

No início do programa, implementei aquele trecho de código padrão que
carrega os valores de rfp, rsp e rbss iniciais, e então um 'jump' para
o label da função 'main'. A função main, ao encerrar, deve retornar a
este trecho de código para que se possa encerrar o programa, ou ela
mesmo deve encerrar? Isto é, devo tratar este trecho inicial como
fazendo uma 'chamada de função' à main, passando nenhum argumento, e
executando a instrução HALT no retorno, ou devo inserir
aritficialmente a instrução HALT no final do código da função main?
Isto leva a outra pergunta: a função main deve ter um comando 'return'
no seu fim? ou apenas o comando HALT?

*** Dúvida #2

Surgiu uma dúvida sobre a linguagem ILOC: ao usar uma constante em uma
determinada instrução, ela pode ser um número negativo?  Por exemplo,
"loadI -1 => r0".

*** Dúvida #3

Novamente tratando dos literais, quando eles são delcarados e
colocados na tabela de símbolos globais, eles recebem um endereço no
qual seu valor estará presente, como explicado no primeiro vídeo de
dúvidas. Porém, não entendi como estes literais receberão o valor que
de fato representam para que o código possa acessar seu valor;
Exemplo.:

#+BEGIN_EXAMPLE
int main(){
    int x;
    x = 2;
}
#+END_EXAMPLE

Aqui, o literal 2 é declarado na tabela de símbolos global, com
endereço, por exemplo, 4. A geração de código segue como normal, e na
atribuição este endereço é acessado corretamente pelo programa. O
problema é: Este endereço possui o valor 0, já que não foi
inicializado. Em que ponto do código (Na criação do nodo do literal,
na declaração na tabela de símbolos, na própria atribuição, etc) devo
inserir uma instrução ILOC que carrega o valor 2 naquele endereço?
Quanto ao código ILOC gerado no final da execução, onde este 'store'
de literais deve aparecer? Na primeira ocorrência do acesso ao vetor?
ou então antes mesmo de realizar o 'jump' para a função main?
** TODO 2020-11-09 D3 (pós-deadline)
*** Dúvida #1

No último vídeo de duvidas (especificamente na terceira dúvida) é
comentado sobre os literais no segmento de dados. Você diz como
resposta que os literais deveriam ser inseridos na parte
correspondente do segmento de dados com código explicito de "store"
dos literais (pelo menos foi o que entendi). Isso é realmente
necessário nessa etapa? porque eu (ainda) não mexi na tabela de
símbolos para colocar todos os literais na tabela global, e você
comentou anteriormente que por estarmos tratando apenas inteiros, eles
caberiam direto em uma instrução iloc.

Por exemplo, deu-se a entender que para o exemplo do vídeo anterior:
int main() {
    int x;
    x = 2;
}

o literal 2 deveria ser armazenado na parte de segmento de
dados. Porém, poderiamos fazer diretamente o load de 2 para um
registrador, sem precisar carregar o dado do endereço do literal 2.

*** Dúvida #2


Estava testando meu programa com a seguinte função Fibonacci

int fib1(int a) {
    if (a == 0) {
        return 0;
    };
    if (a == 1) {
        return 1;
    };
    return fib(a-1)+fib(a-2);
}

mas o resultado dela está dando errado devido aos registradores sendo
usados na recursão das funções. Acontece quando, por exemplo, um
registrador r5 guardando o valor de fib(a-1), tem seu valor alterado
na própria recursão quando o valor de a é necessario para chamar a
recursão.

O problema some caso faça o seguinte:

int fib2(int a) {
    if (a == 0) {
        return 0;
    };
    if (a == 1) {
        return 1;
    };
    int aux1, aux2;
    aux1 = fib(a-1);
    aux2 = fib(a-2);
    return aux1+aux2;
}

assim os valores antes são devidamente guardados nas variaveis dentro
do RA da funcao fib.

Queria saber se nos programas de correção terá casos como em fib1, em
que tenhamos que ter maior cuidado com as chamadas de função
recursivamente, ou se será como em fib2, com variaveis para auxiliar o
processo.

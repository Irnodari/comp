# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+TITLE: Dúvidas da E5 do Projeto de Compilador
#+Author: Lucas Mello Schnorr
#+Date: schnorr@inf.ufrgs.br
#+Language: pt-br

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [11pt, a4paper]
#+LATEX_HEADER: \input{org-babel.tex}

#+OPTIONS: toc:nil title:nil
#+STARTUP: overview indent
#+TAGS: Lucas(L) noexport(n) deprecated(d)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* E5 2020/2
** 2021-04-10 D0
*** Dúvida #1

Na main.c, temos "Não modifique o arquivo.", e queremos seguir esta
solicitação. Porém, há na main.c dois protótipos de funções: void
exporta (void *arvore); void libera (void *arvore); Onde devemos
implementar essas funções, já que não devemos alterar a main e estes
protótipos estão declarados na main? Além disso, se implementarmos em
outro lugar, precisaremos adicionar uma linha na main para adicionar
uma biblioteca, por exemplo, o que alteraria a main. Como procedemos?

---

R: Vamos supor que a implementação destas duas funções estão em outro
módulo, chamado "outro". Tu terás então um outro.c e outro.h. No
arquivo de cabeçalho (.h), tu terás então o protótipo das funções,
idênticos àqueles já colocados no arquivo main.c. No arquivo da
implementação (.c), tu terás as implementações das duas funções. Na
hora de compilar, tu vais compilar o arquivo main.c e depois o arquivo
outro.c. No hora de linkar, tu farás a ligação de main.o com outro.o,
e como em main.c a implementação das duas funções estará em aberto, o
linkador fará a linkagem com a implementação das duas funções do
módulo outro.o. E isso estará resolvido. Veja, portanto, que não há a
necessidade de alterar a main.c adicionando o include do outro.h tendo
em vista que o protótipo das duas funções é idêntico (entre o que já
temos em main.c e o que tu terás em outro.h). Claro, o ideal, seria
adicionar outro.h, mas se queres seguir a risca o comentário, essa
estratégia resolve. Dito tudo isso, o tal comentário erá mais para a
E3, agora na E5, podem se sentir a vontade para alterá-lo.
*** Dúvida #2

1 - Nas simplificações dessa etapa, devemos implementar a tradução
para vetores ou isso também não é necessário?

---

R: Não é necessário.

*** Dúvida #3

2 - Na parte que diz "Os programas a serem compilados devem conter
pelo menos a função main.  Ela deverá ser a primeira a ser executada"
as funções que não são main não precisam ser executadas (a menos que
tenham sido chamadas na main)?

---

R: Exato. As funções que não são main não devem ser executadas a menos
que tenham sido chamadas na main.

*** Dúvida #4

3 - Nas aulas sobre o ILOC, os registradores são inicializados com

 loadI 1024 => rfp
 loadI 1024 => rsp

Isso é necessário no projeto? E, caso não seja, podemos inicializar
esses registradores com outros valores ou isso atrapalhará na
avaliação?

---

R: Na avaliação, a primeira inicialização dos registradores rfp, rsp e
rbss é ignorada, pois ao avaliar o simulador é chamado com a seguinte
linha:

#+begin_src bash
timeout 3 ${ILOCSIM} \
        --stack $STACK \
        --data $DATA \
        -s \
        -x < /tmp/saida.iloc > /tmp/saida.sim
#+end_src

sendo que ILOCSIM é o path para o simulador, STACK e DATA são
endereços para a pilha e segmento de dados, respectivamente, gerados
de maneira aleatória, e ~/tmp/saida.iloc~ tem a saída ILOC gerada pelo
compilador do grupo. De acordo com o ~--help~ do simulador, os
parâmetros ~-s~ e ~-x~ significam, também respectivamente, que
estatísticas serão geradas e que um ambiente estrito para os
registradores rbss, rfp e rsp será adotado, ou seja, a primeira
definição do valores desses registradores no código ILOC da entrada
será ignorada. Ou seja, podem (e até devem) definir valores iniciais
para os testes de vocês, mas lembrem-se que esses valores iniciais
serão ignorados nos testes automáticos pois serão substituídos por
endereços aleatórios.

*** Dúvida #5

(continuação da dúvida #4 acima)

---

Fiquei em dúvida com relação a essa parte, pois pensei que tínhamos
que salvar o número de instruções geradas pelo programa para
inicializar o rbss com esse valor (para que o segmento de dados se
inicie logo após o código). Se o segmento de dados é iniciado
aleatoriamente, então isso não é necessário?

---

R: É necessário mesmo assim, eu avalio de maneira subjetiva esse aspecto.

*** Dúvida #6

(continuação da dúvida #4 acima)

---

E, também já que esses números são iniciados aleatoriamente, não há
risco do segmento de dados se iniciar no meio dos endereços da pilha,
ou no meio das instruções?

---

R: Pode deixar comigo que a geração de números aleatórios é controlada
para evitar esse tipo de problema. No simulador ILOC, o "espaço" de
memória do código e dos dados (pilha, dados, etc) é separado, ao
contrário da realidade onde existe apenas um único endereçamento.

** 2021-04-16 D1
*** Dúvida #1

Quando é dito que podemos considerar que existe apenas o tipo int,
podemos assumir que não haverá nenhum caso de teste que coloque outro
tipo (como, por exemplo: int[], float, bool ou string) e que espere
que a gente:

1 - Ignore que o tipo era diferente de int (mesmo sendo string, ou
int[]), e trate-os todos como int; ou

2 - Retorne uma exceção dizendo que o tipo recebido não é int.

Caso não hajam casos de teste com outros tipos, ou caso hajam, mas
estes não estejam vínculados a uma das 2 expectativas acima, então não
haverá problemas em:

1 - Ignorar totalmente os tipos, sem fazer qualquer verificação, e
tratar todos os identificadores como int (não-vetorial), mesmo sendo
eles argumentos de função, vetores, variáveis de outros tipos ou mesmo
retornos de função. Ou seja, fechar totalmente os olhos para os tipos
(exceto no que se refere às análises semânticas do E4 suponho, ou
mesmo elas deveríamos excluir?); ou

2 - Fazer extras, como por exemplo, lidar com diferentes tipos, ou
vetores.

Pergunto isso, pois caso hajam tais casos de testes com outros tipos,
e haja também uma expectativa vinculada a eles, teríamos que tomar
cuidado, e talvez não pudéssemos fazer alguma dessas opções listadas
por último.

Mas o que eu imagino pelo que está escrito, por exemplo aqui "Nada
precisa ser feito referente aos tipos diferentes de int", é que não
haverá qualquer caso de teste em que apareça algum tipo diferente de
int, e portanto a minha suposição de que poderia haver algum, e que
ele deveria ou retornar erro, ou deveria ser tratado como int, é
irrelevante. Contudo, pergunto para confirmar.

Ah, e isso se extende analogamente também para os comandos que foram
ignorados no E5. Se aparecer um "return X;", devemos lançar um erro,
devemos ignorá-lo, ou tanto faz? E se o return não deverá ser
implementado, assim como o break, continue, então não haverão jumps
relacionados a eles, caso apareçam? (essas perguntas são irrelevantes
caso eles não aparecerão em nenhum caso de teste)

---

R: Sobre a questão dos tipos de dados, reforço que haverá apenas o
tipo ~int~. Não haverá nenhum outro tipo de dado nos testes automáticos
da E5, conforme a especificação explicita. Minha sugestão é que não
sejam lançados erros (sejam eles quais forem) ao encontrar outros
tipos de dados, afinal a léxica/gramática/semântica se mantém
inalteradas. A opção por ignorá-los é portanto privilegiada.

R: Sobre a questão dos comandos que foram deixados de fora da E5, é
bem lembrada a importância do comando ~return~ especificamente, que se
integra bem às chamadas de função. Neste sentido, minha sugestão seria
implementar o comando ~return~, ainda que isso não esteja especificado
na E5. Se o grupo decidir não fazê-lo, afinal não está na
especificação da E5, minha sugestão é que não sejam lançados erros ao
encontrá-lo, apenas ignorá-lo. Invariavelmente o comando return será
implementado na E6.

R: Como o questionamento foi longo, não tenho certeza se respondi
tudo. Diga-me caso eu tenha deixado algo sem resposta.

*** Dúvida #2

Uma outra dúvida é a respeito dos identificadores static e const. Está
correto a minha interpretação?:

1 - Uma variável local do tipo static T não deverá ser interpretado
como uma variável local de tipo T comum, mas sim fará a variável ser
alocada no segmento de dados, em vez de no registro de ativação;

2 - Uma variável global do tipo static T deverá ser interpretada como
uma variável global do tipo T comum;

3 - Uma função com tipo de retorno static T deverá ser interpretada
como uma função com tipo de retorno T (que inclusive é irrelevante, já
que o return aparentemente não deverá ser implementado);

4 - Um parâmetro de função ou variável local de tipo const T deverá
ser interpretado como um parâmetro de função ou variável local
(respectivamente) de tipo T.

---

R: Embora ~static~ e ~const~ constem de fato na especificação sintática da
E2, não não exploramos esse assunto nas etapas subsequentes. A forma
de se implementar e verificar esses especificadores já poderiam ter
sido antecipados na E4 (análise semântica) e com certeza tem um
impacto evidente agora na E5 (geração de código intermediário). No
entanto, isso não faz parte da especificação da E5 primando pela
simplificação.

R: Mesmo assim, informo minha concordância caso o grupo deseje
implementar esses especificadores (deverão haver mudanças no que foi
feito na E4). Concordo com 1. Concordo com 2. Concordo com 3, mas veja
meu comentário sobre o comando ~return~ na resposta ao questionamento
anterior. Ainda sobre 3, veja que ~static~ de funções em geral é
implementado para restringir o escopo da função ao módulo. Não temos
módulos em nossa linguagem pois não almejamos aqui implementar linking
entre códigos objeto. Concordo com 4, a diferença é que sendo ~const~
(inspirando-se do C) tais variáveis não poderiam ser alteradas.

*** Dúvida #3

É possível utilizar Python3 para essa parte do trabalho, ou devemos
seguir com o C/C++? Acredito que essa área de síntese poderia ser
implementada sem problemas em outra linguagem, utilizando mecanismos
de subprocess call a partir da main.c.

---

R: Não pode usar Python3. Seguir com C/C++.

*** Dúvida #4

1) Estávamos pensando em uma forma de diferenciar registradores/labels
   dos ponteiros (rfp, rsp etc.). Inicialmente pensamos em usar uma
   estrutura de dados para isso (como um enum), mas, como os ponteiros
   são poucos em número, pensamos em diferenciar eles simplesmente
   definindo eles com valores negativos, já que registradores e labels
   não podem ser negativos e em ILOC eles são representados por uma
   string e não por um número. Isso faz sentido, ou temos que
   representar os ponteiros de outra maneira?

---

R: Penso que chamar rfp, rsp e demais temporários (todos começando por
"r") de "ponteiros" não é muito adequado, para evitar confusões com
ponteiros da linguagem de programação C. Muitos usam simplesmente
strings para referênciá-los. Outra opção talvez seja usar uma struct
que tenha um "tipo" (que poderia ser a enum que vocês mencionam) com
um número, sendo que tal número não fosse usado caso o "tipo" fosse de
algum registrador especial (como rbss, rfp ou rsp). Enfim, todas essa
escolhas são do grupo.

*** Dúvida #5

2) Para fazer o remendo, ao gerar o label do rótulo, podemos gerar ele
   como se fosse um label qualquer (sem ser remendo), ou precisamos
   marcar ele como sendo um label de rótulo, diferente dos outros
   labels? No momento implementamos da primeira forma, mas queria
   saber se isso não poderia causar problemas ao criar outros labels
   depois.

---

R: No caso de uma implementação da geração de código em uma passagem,
precisaremos de fato usar remendos. A "referência" a um "buraco" que
deverá ser remendado pode ser implementada de várias formas. Minha
sugestão é que, ao gerar um "buraco", vocês coloquem ali algo [uma
string] algo que certamente não vá funcionar caso o simulador seja
executado com a entrada, assim vocês podem facilmente detectar
eventuais erros. Quando a "referência" a implementação habitual é que
seja uma lista de ponteiros para campos que contém buracos a serem
remendados.

** 2021-04-17 D2
*** Dúvida #1

Como o código iLOC será o código da main, essencialmente, ao final do
processo de análise eu posso passar a main para o topo da AST?

---

R: Se houver no programa duas funções, primeiro a função foo e depois
a função main, idealmente, deveríamos ter na saída ILOC primeiro o
código ILOC de foo, depois o código ILOC de main. Sabendo que o
programa deve começar pela função main, antes do código de foo (e
depois da inicialização dos registradores principais - rsp, rfp,
rbss), podemos ter um jump para o início da função main. Creio que há
um exemplo disso na aula N12 A3 (slide 5/6). Bom, quanto a relação
disso com a AST, vocês podem fazer da forma que acharem mais oportuna,
mas veja que alterar a ordem das funções em código objeto (e aqui no
código intermediário) é algo que normalmente não se faz. Por que um
compilador mudaria a ordem do código das funções no código final?


* E5 2020/1
** DONE 2020-10-23 D0
*** Dúvida #1
Foi mencionado em um dos vídeos de dúvidas da etapa 4 que os literais
deveriam ser guardados na tabela de símbolos, pois acabariam na área
de dados do programa. Naquele vídeo, foi dito que esta inserção pode
ser feita na tabela de símbolos do escopo onde ele é encontrado, e foi
assim que implementei a etapa 4. Agora com o conhecimento sobre a
geração do código, refleti sobre este posicionamento, e acredito que
para que o literal acabe no segmento de dados ele deve ser inserido na
tabela de símbolos global, contabilizando seu tamanho também na
geração de endereços da mesma.

#+BEGIN_EXAMPLE
int y;

int main()
{
    int x <= 5;
}
#+END_EXAMPLE

Na forma que implementei na etapa 4 tenho as tabelas:

GLOBAL  (Endereço corrente ao final do reconhecimento = 8. )
| Nome | Tamanho | Endereco |
|------+---------+----------|
| y    |       4 |        0 |
| main |       4 |        4 |

MAIN (Endereço corrente ao final do reconhecimento = 8. )
| Nome | Tamanho | Endereco |
|------+---------+----------|
| x    |       4 |        0 |
| "5"  |       4 |        4 |

Porém após a reflexão, imagino que o correto seria:

GLOBAL (Endereço corrente ao final do reconhecimento = 12)
| Nome | Tamanho | Endereco |
|------+---------+----------|
| y    |       4 |        0 |
| main |       4 |        4 |
| "5"  |       4 |        8 |

MAIN (Endereço corrente ao final do reconhecimento = 4)
| Nome | Tamanho | Endereco |
|------+---------+----------|
| x    |       4 |        0 |

Para que o literal "5" acabe no data segment.

Qual das duas está correta? Em outras palavras, devo inserir o literal
no frame da função onde aparece ou no data segment do programa como um
todo?
** DONE 2020-11-02 D1
*** Dúvida #1

Quanto a etapa5, você poderia montar um exemplo um pouco mais concreto
de uma saida iloc para um arquivo simples de entrada?

e como podemos conferir se um programa nosso está executando
corretamente no simulador com um exemplo de como será a avaliação do
trabalho?

*** Dúvida #2

Olá professor, na etapa 4 implementamos os blocos de instruções como
sendo uma nova tabela. Na etapa 5, temos que definir os endereços das
variáveis.  Na aula N10 A5, você explica que para escopos anônimos, o
deslocamento do escopo anterior deve ser atualizado ao se fechar o
escopo anônimo. Porém, levando em conta nossa implementação, isso
continua válido? Pois, ao fechar-se o escopo anônimo, a sua tabela
deixaria de existir. Ao atualizar o deslocamento, estaria se
considerando que as variáveis do bloco anônimo (já fechado) continuam
existindo.

*** Dúvida #3

Outra dúvida seria sobre o endereçamento. Devemos começar no endereço
mais alto (seria 2^64?) como no C, ou no 0?

*** Dúvida #4

Quanto a parte de criação pro programa iloc, quando houver uma chamada
de uma função, `f()` por exemplo, eu preciso criar novos dados na
pilha pra cada chamada de função, correto? então, se for uma função
recursiva, deveriamos criar isso varias vezes. Como que criamos a
tabela durante a execução, já que não teriamos como saber quantas
vezes a função seria chamada, ou não precisamos tratar isso e
"reutilizar" as variaveis definidas?

*** Dúvida #5

Estou com umas duvidas quanto a utilização dos registradores
reservados (rbss, rfp), de acordo com o que diz em aula, esses valores
são definidos por padrão, exemplo do rbss que não se altera durante a
execução. Em nosso programa, não precisamos nós mesmos manter controle
deles durante a execução? Peço isso especialmente quanto a ideia do
empilhamento em uma chamada de função, pois não entendi muito bem como
manter o controle deles em casos assim.

*** Dúvida #6

Se a entrada começar com a seguinte declaração de variáveis globais:

int a, b;

é necessário que o deslocamento da variável "a" seja 0 e o da variável
"b" 4, ou é aceitável que "b" apresente o deslocamento 0 (pois estamos
adicionando as variáveis na tabela de símbolos na ordem inversa)?
** DONE 2020-11-04 D2
*** Dúvida #1

Surgiu uma dúvida enquanto implementava a geração de código para a
declaração de funções, em especial a função 'main'

No início do programa, implementei aquele trecho de código padrão que
carrega os valores de rfp, rsp e rbss iniciais, e então um 'jump' para
o label da função 'main'. A função main, ao encerrar, deve retornar a
este trecho de código para que se possa encerrar o programa, ou ela
mesmo deve encerrar? Isto é, devo tratar este trecho inicial como
fazendo uma 'chamada de função' à main, passando nenhum argumento, e
executando a instrução HALT no retorno, ou devo inserir
aritficialmente a instrução HALT no final do código da função main?
Isto leva a outra pergunta: a função main deve ter um comando 'return'
no seu fim? ou apenas o comando HALT?

*** Dúvida #2

Surgiu uma dúvida sobre a linguagem ILOC: ao usar uma constante em uma
determinada instrução, ela pode ser um número negativo?  Por exemplo,
"loadI -1 => r0".

*** Dúvida #3

Novamente tratando dos literais, quando eles são delcarados e
colocados na tabela de símbolos globais, eles recebem um endereço no
qual seu valor estará presente, como explicado no primeiro vídeo de
dúvidas. Porém, não entendi como estes literais receberão o valor que
de fato representam para que o código possa acessar seu valor;
Exemplo.:

#+BEGIN_EXAMPLE
int main(){
    int x;
    x = 2;
}
#+END_EXAMPLE

Aqui, o literal 2 é declarado na tabela de símbolos global, com
endereço, por exemplo, 4. A geração de código segue como normal, e na
atribuição este endereço é acessado corretamente pelo programa. O
problema é: Este endereço possui o valor 0, já que não foi
inicializado. Em que ponto do código (Na criação do nodo do literal,
na declaração na tabela de símbolos, na própria atribuição, etc) devo
inserir uma instrução ILOC que carrega o valor 2 naquele endereço?
Quanto ao código ILOC gerado no final da execução, onde este 'store'
de literais deve aparecer? Na primeira ocorrência do acesso ao vetor?
ou então antes mesmo de realizar o 'jump' para a função main?
** DONE 2020-11-09 D3 (pós-deadline)
*** Dúvida #1

No último vídeo de duvidas (especificamente na terceira dúvida) é
comentado sobre os literais no segmento de dados. Você diz como
resposta que os literais deveriam ser inseridos na parte
correspondente do segmento de dados com código explicito de "store"
dos literais (pelo menos foi o que entendi). Isso é realmente
necessário nessa etapa? porque eu (ainda) não mexi na tabela de
símbolos para colocar todos os literais na tabela global, e você
comentou anteriormente que por estarmos tratando apenas inteiros, eles
caberiam direto em uma instrução iloc.

Por exemplo, deu-se a entender que para o exemplo do vídeo anterior:
int main() {
    int x;
    x = 2;
}

o literal 2 deveria ser armazenado na parte de segmento de
dados. Porém, poderiamos fazer diretamente o load de 2 para um
registrador, sem precisar carregar o dado do endereço do literal 2.

*** Dúvida #2

Estava testando meu programa com a seguinte função Fibonacci

int fib1(int a) {
    if (a == 0) {
        return 0;
    };
    if (a == 1) {
        return 1;
    };
    return fib(a-1)+fib(a-2);
}

mas o resultado dela está dando errado devido aos registradores sendo
usados na recursão das funções. Acontece quando, por exemplo, um
registrador r5 guardando o valor de fib(a-1), tem seu valor alterado
na própria recursão quando o valor de a é necessario para chamar a
recursão.

O problema some caso faça o seguinte:

int fib2(int a) {
    if (a == 0) {
        return 0;
    };
    if (a == 1) {
        return 1;
    };
    int aux1, aux2;
    aux1 = fib(a-1);
    aux2 = fib(a-2);
    return aux1+aux2;
}

assim os valores antes são devidamente guardados nas variaveis dentro
do RA da funcao fib.

Queria saber se nos programas de correção terá casos como em fib1, em
que tenhamos que ter maior cuidado com as chamadas de função
recursivamente, ou se será como em fib2, com variaveis para auxiliar o
processo.

# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+Title: Projeto de Compilador
#+Author: Lucas Mello Schnorr
#+Date: schnorr@inf.ufrgs.br
#+Language: pt-br

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [11pt, twocolumn, a4paper]
#+LATEX_HEADER: \input{org-babel.tex}

#+OPTIONS: toc:nil title:nil
#+STARTUP: overview indent
#+TAGS: Lucas(L) noexport(n) deprecated(d)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

#+latex: {\Large
#+latex: \noindent
Projeto de Compilador

#+latex: \noindent
E3 de *Árvore Sintática Abstrata*
#+latex: }
#+latex: \bigskip

#+latex: \noindent
Prof. Lucas Mello Schnorr

#+latex: \noindent
schnorr@inf.ufrgs.br
* Introdução

A terceira etapa do projeto de compilador para a linguagem consiste na
criação da árvore sintática abstrata (/Abstract Syntax Tree/
-- AST) baseada no programa de entrada. A árvore deve ser
obrigatoriamente criada na medida que as regras semânticas são
executadas e deve ser mantida em memória mesmo após o fim da análise
sintática, ou seja, quando =yyparse= retornar.
#  A árvore deve ser impressa na tela após a análise sintática. O
#  conteúdo impresso deve ser semanticamente idêntico ao programa
#  fornecido na entrada do compilador.

* Funcionalidades Necessárias
** Associação de valor ao =token= (=yylval=)

Nesta etapa, deve-se associar um _valor_ ao =token= correspondente. Esta
associação deve ser feita pelo analisador léxico, ou seja, no arquivo
=scanner.l=. Ela é realizada através do [[http://www.gnu.org/software/bison/manual/html_node/Token-Values.html][uso da variável global =yylval=]]
[1] que é usada pelo =flex= para dar um ``valor'' ao =token=, além da
constante inteira (como aquelas listadas no arquivo =tokens.h= na etapa
1 e no arquivo =parser.y= a partir da etapa 2) que é habitualmente
retornada pelo analisador léxico. Como esta variável global pode ser
configurada com a diretiva =%union=, sugere-se o uso do campo com o nome
=valor_lexico= para a associação. Portanto, a associação deverá ser
feita através de uma atribuição para a variável =yylval.valor_lexico=. O
tipo do =valor_lexico= (e por consequência o valor que será retido) deve
ser uma estrutura de dados que contém os seguintes campos: (a) número
da linha onde apareceu o lexema; (b) tipo do token (palavras
reservadas, caracteres especiais, operadores compostos,
identificadores, e literais); (c) valor do token.

O valor do token deve ser uma cadeia de caracteres (duplicada com
=strdup= a partir de =yytext=) para todos os tipos de tokens salvo para os
literais, que devem ter um tratamento especial. No caso dos literais,
o /valor do token/ deve ser convertido para o tipo apropriado (inteiro
=int=, ponto-flutuante =float=, caractere =char=, booleano =bool= (ou =int=) ou
cadeia de caracteres =char*=).  A conversão deve ser feita utilizando
funções tais como =atoi=, no caso de números inteiros, e =atof=, no caso
de ponto-flutuantes. Os tipos caractere e cadeia de caracteres não
devem conter aspas (simples ou duplas) no campo valor (e devem ser
duplicados com =strdup=). Uma forma de implementar o /valor do token/ para
literais é utilizar dois campos: um /tipo de literal/ e o valor
associado a ele através de uma construção =union= da linguagem C.

** Implementar estrutura de dados em árvore

Implementar uma estrutura de dados para representar uma árvore em
memória, com funções habituais tais como criação de nó, remoção,
alteração e impressão recursiva da árvore através de um percurso em
profundidade. Qualquer outra função que o grupo achar pertinente pode
também ser implementada. Salienta-se o fato de que cada nó pode ter
um número arbitrário de filhos, que também serão nós da árvore.

** Ações /bison/ para construção da AST

Colocar ações semânticas *no final das regras de produção* descritas no
arquivo para o =bison=, as quais criam ou propagam os nós da árvore,
montando-a na medida que a análise sintática é realizada. Como a
análise sintática é ascendente, a árvore será criada de baixo para
cima, no momento das reduções do /parser/. A maior parte das ações será
composta de chamadas para o procedimento de criação de um nó da
árvore, e associação desta com seus filhos na árvore de derivação que
já foram criados. Ao final do processo de análise sintática, um
ponteiro para a estrutura de dados que guarda a raiz da árvore deve
ser salvo na variável global =arvore=.

Devem fazer parte da AST *(1)* todos os comandos simples da linguagem,
salvo o bloco de comando e a declaração de variáveis sem
inicialização, *(2)* todas as expressões ariméticas e lógicas obedecendo
as regras de associatividade e precedência já estabelecidas na E2, *(3)*
listas de comandos (um comando deve ter um filho que é o próximo
comando), *(4)* listas de expressões (uma expressão deve ter um filho
que é a próxima expressão) naqueles comandos onde isso se faz
necessário, tais como chamada de função, *(5)* listas de funções (uma
função deve ter dois filhos, um que é o seu primeiro comando e outro
que é a próxima função), e *(6)* o indexador de vetor ~[]~ que deve ter
dois filhos (identificador e a expressão de indexação).

No caso das expressões aritméticas e lógicas, os operadores unários
devem ter pelo menos um filho, os operadores binários devem ter pelo
menos dois filhos e o operador ternário deve ter pelo menos três
filhos. Nestes casos, o "pelo menos" é explicitado pois estas
expressões podem aparecer em listas de expressões, sendo necessário
mais um filho que indica qual a próxima expressão, conforme detalhado
no parágrafo anterior.

** Exportar a árvore em formato CSV

Implementar a função ~exporta~ (veja no anexo ~main.c~ abaixo). Esta
função deverá percorrer a árvore gerada, a partir da raiz e de maneira
recursiva, imprimindo todos os nós (vértices) e todas as relações
entre os nós (arestas). A impressão deve acontecer na saída padrão
(stdout, tipicamente com uso de ~printf~). Um nó deve ser identificado
pelo seu endereço de memória (impresso com o padrão ~%p~ da libc). Um
exemplo de saída CSV válida é o seguinte, onde o nó ~0x8235900~ tem
somente um filho ~0x82358e8~, que por sua vez tem dois filhos (~0x8235890~
e ~0x82358d0~):

#+BEGIN_EXAMPLE
0x8235900, 0x82358e8
0x82358e8, 0x8235890
0x82358e8, 0x82358d0
#+END_EXAMPLE

#+latex: \noindent

Todos os nós devem ser nomeados, usando uma linha por nó, da seguinte
forma: o identificador do nó (endereço de memória impresso com o
padrão ~%p~ da lib) seguido de espaço e abre colchetes, ~label=~ e o nome
entre aspas duplas, terminando-se por fecha colchetes e
ponto-e-vírgula. Veja o exemplo:

#+BEGIN_EXAMPLE
0x8235900 [label="minha_funcao"];
0x82358e8 [label="="];
0x8235890 [label="minha_var"];
0x82358d0 [label="um literal string"];
#+END_EXAMPLE

O nome que deve ser utilizado no campo ~label~ deve seguir o seguinte
regramento. Para funções, deve-se utilizar seu identificador (o nome
da função). Para declaração de variável com inicialização, o nome deve
ser ~<=~ (o operador composto menor igual). Para o comando de
atribuição, o nome deve ser ~=~ (o operador igual). Para o indexador de
vetor, o nome deve ser ~[]~ (abre e fecha colchetes). Para a chamada de
função, o nome deve ser ~call~ seguinte do nome da função chamada,
separado por espaço. Para os comandos de shift, o nome deve ser o
operador composto, menor menor ou maior maior, sem espaço (por exemplo
~>>~). Para os comandos de retorno, break e continue, devem ser
utilizados os lexemas correspondentes. Para os comandos de controle de
fluxo, deve-se utilizar o nome ~if~ para o comando if com else opcional,
o nome ~for~ para o comando for, e ~while~ para o comando while. Para as
expressões aritméticas, devem ser utilizados os próprios operadores
unários ou binários como nomes. Para as expressões lógicas, deve-se
utilizar ~&&~ para o e lógico e ~||~ para o ou lógico. No caso do operador
ternário, deve ser utilizado o nome ~?:~. Enfim, para os
identificadores e literas, deve-se utilizar o próprio lexema sem aspas
(simples ou duplas) quando for o caso.

No processo de avaliação automática (onde será comparada a estrutura
da árvore da solução com aquela de referência), será considerada como
raiz o primeiro nó que não tenha um pai. A ordem dos filhos de um nó
da árvore não importa. O programa será executado da seguinte forma no
processo de avaliação automática:

#+BEGIN_EXAMPLE
./etapa3 < entrada > saida
#+END_EXAMPLE

#+latex: \noindent
O conteúdo de ~saida~ contém a árvore da solução.

** Remoção de conflitos/ajustes gramaticais

Todos os conflitos /Reduce-Reduce/ e /Shift-Reduce/ devem ser removidos,
caso estes se tornem presentes com eventuais modificações feitas na
gramática.

** Gerenciar corretamente a memória

Implementar a função =libera= (veja no anexo =main.c= abaixo), que deve
liberar a memória de maneira recursiva (de baixo para cima). O
programa =valgrind= será utilizado para averiguar a ausência de
vazamentos de memória.

#+latex: %\onecolumn
#+latex: \appendix

* Avaliação objetiva                                               :noexport:
** 1. Geração da árvore

Em qualquer execução, o executável implementado nesta etapa deve
exportar a árvore em formato CSV no arquivo ~e3.csv~

#+BEGIN_EXAMPLE
# primeiro laço de compilação/descompilação
./etapa3 < source.txt > eq1.txt
# o arquivo e3.csv já deverá ter sido criado aqui
cat e3.csv
#+END_EXAMPLE

O teste será avaliado como correto caso a árvore criada seja
estruturalmente idêntica aquela de referência, seguindo os regramentos
vistos em aula sobre construção de AST. O arquivo CSV pode ser
visualizado, mediante alguma manipulação, através de ferramentas do
pacote ~graphviz~, como por exemplo o programa ~dot~, ou códigos escritos
em linguagens de mais alto nível tais como R/ggplot2.

** 2. Gerenciamento da memória do compilador

Um compilador deve gerenciar bem a memória alocada
dinamicamente. Neste sentido, um teste automático consistirá em lançar
a ferramenta ~valgrind~ para verificar se toda a memória alocada
dinamicamente foi integralmente liberada antes do término do programa.
Ao lançar o compilador com uma determinada entrada, assim:

#+begin_src shell :results output
valgrind ./etapa3 < uma_entrada_correta
#+end_src

Será observada esta saída do ~valgrind~:

#+BEGIN_EXAMPLE
==26684==    definitely lost: 0 bytes in 0 blocks
==26684==    indirectly lost: 0 bytes in 0 blocks
==26684==      possibly lost: 0 bytes in 0 blocks
==26684==    still reachable: 0 bytes in 0 blocks
==26684==         suppressed: 0 bytes in 0 blocks
#+END_EXAMPLE

Somente passará o teste em que todos os valores de bytes e blocos
forem zero. Qualquer valor diferente de ~0 bytes in 0 blocks~ será
interpretado como não liberação correta da memória alocada
dinamicamente, e o teste será avaliado para falha.

* Arquivo =main.c=

A função principal da E3 aparece abaixo. A variável global =arvore= de
tipo =void*= é um ponteiro para a estrutura de dados que contém a raiz
da árvore de derivação do programa. A função =exporta=, cujo protótipo é
dado, deve ser implementada de maneira recursiva para exportar a AST
na saída padrão. A função =libera=, cujo protótipo também é dado, deve
ser implementada para liberar toda a memória que foi alocada para
manter a árvore.

#+latex: {\scriptsize
#+BEGIN_SRC C :tangle main.c
/*
  Função principal para realização da E3.
  Não modifique este arquivo.
*/
#include <stdio.h>
extern int yyparse(void);
extern int yylex_destroy(void);

void *arvore = NULL;
void exporta (void *arvore);
void libera (void *arvore);

int main (int argc, char **argv)
{
  int ret = yyparse(); 
  exporta (arvore);
  libera(arvore);
  arvore = NULL;
  yylex_destroy();
  return ret;
}
#+END_SRC
#+latex: }

Utilize o comando =extern void *arvore= nos outros arquivos que fazem
parte da implementação (como no =parser.y=) para ter acesso a variável
global =arvore= declarada no arquivo =main.c=.

* Sobre a Árvore Sintática Abstrata                                :noexport:

A árvore sintática abstrata, do inglês /Abstract Syntax Tree/ (AST), é
uma árvore n-ária onde os nós folha representam os tokens presentes no
programa fonte, os nós intermediários são utilizados para criar uma
hierarquia que condiz com as regras sintáticas, e a raiz representa o
programa inteiro.  Essa árvore se inspira nas derivações do analisador
sintático, tornando mais fáceis as etapas posteriores de verificação e
síntese.

A árvore é abstrata (quando comparada a árvore de derivação gramatical
completa) porque não precisa representar detalhadamente todas as
derivações gramaticais para uma entrada dada.  Tipicamente serão
omitidas derivações intermediárias onde um símbolo não terminal gera
somente um outro símbolo terminal, tokens que são palavras reservadas,
e todos os símbolos de sincronismo ou identificação do código, os
quais estão implícitos na estrutura hierárquica criada. São mantidos
somente os nós fundamentais para manter a semântica da entrada.

Os nós da árvore serão de =tipos= relacionados aos símbolos não
terminais, ou a nós que representam operações diferentes, no caso das
expressões. É importante notar que normalmente as declarações de tipos
e variáveis podem ser omitidas da AST, pois estas construções
linguísticas não geram código, salvo nas situações onde as variáveis
declaradas devem ser inicializadas.

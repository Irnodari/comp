# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+TITLE: Dúvidas da E6 do Projeto de Compilador
#+Author: Lucas Mello Schnorr
#+Date: schnorr@inf.ufrgs.br
#+Language: pt-br

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [11pt, a4paper]
#+LATEX_HEADER: \input{org-babel.tex}

#+OPTIONS: toc:nil title:nil
#+STARTUP: overview indent
#+TAGS: Lucas(L) noexport(n) deprecated(d)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* E6 2020/2
** 2021-04-28
*** Dúvida #1

O sr. deseja que a gente gere o código assembly a partir do código
ILOC, correto?  Nesse caso, o primeiro problema que vejo seria como
parseá-lo para recuperar as instruções ILOC nele contidas.  Seria
recomendável criar um novo compilador do zero, com scanner.l,
parser.y, etc, que ignora erros léxicos/sintáticos/semânticos, mas
serve apenas para construir uma AST a partir de uma entra ILOC válida,
para então termos como construir o código Assembly?  Que outra forma
poderíamos fazer para parsear o código ILOC?

---

R: Não há uma absoluta necessidade de se traduzir a partir do código
ILOC. Isso pode realmente ser bastante complicado, pois haveria a
necessidade de fazer um parser etc, além da complicação de reconstruir
uma boa parte do conhecimento que já existe no compilador de vocês
atual (AST, semântica, tabelas, etc). O mais simples ao meu ver é
reaproveitar todo o conhecimento adquirido na geração de ILOC para
gerar diretamente código assembly.
*** Dúvida #2

Observei que nos códigos Assembly, mostra-se o nome das
variáveis. Entretanto, esta informação não é acessível ao código
iLOC. O que fazemos? A tradução para Assembly deve ser feita apenas
olhando o código iLOC? Então, como vemos esses nomes? Ou precisaremos
de novas passagens pelo código para gerar o Assembly?

---

R: Os nomes no código alto nível (usados na entrada do nosso
compilador) podem ou não aparecer no assembly (nem no ILOC da E5
diga-se de passagem) dependendo da necessidade prática. Por exemplo,
nomes de funções e de variáveis globais no segmento de dados, isso é
legal ter no assembly pois facilita nossa leitura e qualquer nome no
escopo global pode ter um referenciamento direto. Já para as variáveis
locais, bom, o nome não é muito relevante pois as variáveis são
alocadas na pilha. Vocês precisam usar o conhecimento do cálculo de
endereçamento de variáveis locais (já feito em E5) e replicar isso no
assembly.

* E6 2020/1
** DONE 2020-11-16 D0
*** Dúvida #1

Somente um esclarecimento em relação à spec da E6:

O objetivo da etapa é a transcrição ILOC p/ Assembly, sem precisar
lidar com limites práticos de registradores ou implementar a alocação
por k-coloração neste momento?

Isso viria na etapa 7, junto com outras otimizações da semana 13?

*** Dúvida #2

1. Na etapa anterior do projeto tinhamos "infinitos" registradores
   para usarmos. Agora trabalhando com assembly já não temos mais essa
   facilidade. Devemos tentar diminuir a quantidade de registradores
   usados na nossa etapa anterior ou temos alguma forma mais simples
   de escolher registradores sem que haja "derramamento" deles?
** DONE 2020-11-18 D1
*** Dúvida #1

1) Nos códigos assembly que gerei fazendo alguns testes não
   identifiquei a inicialização dos registradores especiais nem um
   tipo de jump para o código da main, como fizemos com o ILOC. Esses
   passos ainda são necessários?

Resposta:
- Somente o jump para a main é necessário, especialmente se existem
  outras funções que são organizadas anteriormente. Ou seja, no
  início, temos que ter algo como:

#+BEGIN_EXAMPLE
section	.text
   global _start	 ;must be declared for linker (gcc)
	
_start:	         ;tell linker entry point
  ; ....
#+END_EXAMPLE

*** Dúvida #2

2) Com ILOC implementamos a pilha crescendo "para cima", mas no
   assembly a pilha cresce "para baixo". Isso é obrigatório?
   Precisamos "inverter" a pilha nessa etapa?

Resposta:
- A solução adotada deve permitir que o GCC transforme o ASM gerado
  para um binário executável, e este binário executável deve
  funcionar.

*** Dúvida #3

3) Precisamos gerar o assembly a partir do código intermediário que
   fizemos ou seria possível gerarmos ao mesmo tempo que reconhecemos
   a entrada, na primeira passada? Pergunto isso pois, vendo algumas
   instruções no assembly me parece ser mais simples gerar direto.

Resposta:
- Não há necessidade de gerar a partir do código intermediário ILOC.

*** Dúvida #4

1. No enunciado da E6 dizes que podemos fazer a chamada de função
   utilizando os comandos "call" e "ret" (para o retorno). Gostaria de
   saber se tem como fazer a chamada sem utilizar esses comandos e
   seguir os passos já construídos na etapa anterior. No enunciado não
   mencionas nada de um registrador para o PC.

Resposta:
- Creio que não pois o PC no ASM é gerido pelo HW. Então deve-se fazer
  uma simplificação no que havia sido feito utilizando ~call~ e ~ret~.

*** Dúvida #5

Eu e outros colegas estavamos procurando pela coleção de instruções e
nos deparamos em diferentes definições de como o assembly
funciona. Alguns lugares dizem que em uma instrução, por exemplo, "add
eax, edx", será feita a soma e depois o valor inserido em eax
(tutorial que deu o link no enunciado da E6), mas outros lugares
mostram exemplos em que o resultado da soma do exemplo será armazenado
em edx (ASM gerado pelo gcc). Só gostaria que o senhor confirmasse
isso corretamente conosco.

Resposta:
- Deve-se adotar aquela reconhecida pelo compilador GCC.

#+begin_src shell :results output
gcc --version
#+end_src

#+RESULTS:
: gcc (Debian 10.2.0-16) 10.2.0
: Copyright (C) 2020 Free Software Foundation, Inc.
: This is free software; see the source for copying conditions.  There is NO
: warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
: 
** DONE 2020-11-19 D2
*** Dúvidas #1

Boa tarde professor, queria saber se precisa estar incluído o .comm no
assembly para a declaração de variáveis globais, porque no iloc elas
não são chamadas quando são declaradas, mas sim quando são usadas

Resposta: Não há necessidade pois não faremos a linkagem de múltiplos
códigos objeto.
** DONE 2020-11-22 D3
*** Dúvida #1

Seguimos tentando controlar a quantidade de registradores. Na nossa
implementação atual, por simplicidade e a fim de reduzir o numero de
temporários utilizados, estamos empilhando-desempilhando o resultado
de todas as sub-expressões.  Isso está causando uma queda de
desempenho considerável no simulador ILOC comparado à E5, embora use
um quarto dos registradores (o que parece muito benéfico nesta etapa).
Haveria um jeito mais simples de se otimizar os acessos à pilha ao
mesmo tempo que se use um número limitado de temporários?

Resposta:

Em C:
#+BEGIN_SRC C
  int a = 1;
  int b = 2;
  int c = 3;
  c = a + b;
#+END_SRC

Em ASM:
#+BEGIN_SRC asm
        movl    $1, -4(%rbp)
        movl    $2, -8(%rbp)
        movl    $3, -12(%rbp)
        movl    -4(%rbp), %edx
        movl    -8(%rbp), %eax
        addl    %edx, %eax
        movl    %eax, -12(%rbp)
#+END_SRC

Veja que a instrução addl lê %edx, %eax e escreve a resposta em %eax.
Na "movl" subsequente, move-se %eax para -12(%rbp) que é a variável c
do código C. Então temos duas instruções para fazer uma soma, sendo
que a primeira faz a operação, a segunda salva o resultado no local da
variável alvo. Uma forma de obter isso é alterar o código da E5 de
maneira que a resposta de uma operação binária (de adição, por
exemplo) fique no mesmo temporário utilizado como entrada. Depois, na
tradução para ASM, verifica-se se é o caso e gera "addl"
correspondente. A rigor, não haveria a necessidade mais de gerar
temporários. Vocês poderiam sempre utilizar dois ou três. Notem que na
E6 não existe mais a obrigação que o código ILOC "funcione" com o
simulador. Ainda que fosse preferível que funcionasse, vocês podem
usar deste artifício para "simplificar o ILOC" de maneira que ele dê
indícios que facilitem a geração para ASM.

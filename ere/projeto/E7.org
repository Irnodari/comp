# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+Title: Projeto de Compilador
#+Author: Lucas Mello Schnorr
#+Date: schnorr@inf.ufrgs.br
#+Language: pt-br

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [11pt, twocolumn, a4paper]
#+LATEX_HEADER: \input{org-babel.tex}

#+OPTIONS: toc:nil title:nil
#+STARTUP: overview indent
#+TAGS: Lucas(L) noexport(n) deprecated(d)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport


#+latex: {\Large
#+latex: \noindent
Projeto de Compilador

#+latex: \noindent
E7 de *Otimização*
#+latex: }
#+latex: \bigskip

#+latex: \noindent
Prof. Lucas Mello Schnorr

#+latex: \noindent
schnorr@inf.ufrgs.br

* Introdução

A sétima e última etapa do trabalho de implementação de um compilador
para a Linguagem consiste na implementação de técnicas de otimização
de código.

# Tais otimizações devem ser feitas no contexto da representação
# intermediária da *Linguagem ILOC*, descrita em detalhes no apêndice A
# do livro /Engineering a Compiler/ de Keith, mas com o essencial
# descrito na definição da quinta etapa do projeto de compiladores.

* Funcionalidades Necessárias

** Otimização de código

Nesta parte você deve selecionar ao menos uma técnica de otimização de
código, que pode ser sobre código intermediário ou sobre o código
assembly, e demonstrar seu funcionamento. Caso a técnica de otimização
seja aplicada no código intermediário, deve ser possível de observar
um efeito no código assembly. A escolha da(s) técnica(s) é livre. Para
atingir a nota máxima nesta etapa, pede-se que você consiga mostrar
que o código gerado ficou diferente (melhorado, por exemplo, mais
curto). Para isso, altere a função principal ~main~ de maneira que ela
aceite um parâmetro ~-O~ que, se informado, ativa a otimização
implementada, e caso ausente, gera código normal como na etapa
anterior, sem otimização.

** Exemplos

O grupo deve fornecer dois exemplos de códigos a serem compilados, que
incluem avaliação de expressões aritméticas e comandos de fluxo de
controle, que levem a uma otimização quando o parâmetro ~-O~ é
informado. O grupo é encorajado a demonstrar, também através de
exemplo, que isso gerou otimização no tempo de execução do programa.

** Documentação

Inclua no arquivo de texto puro ~README.txt~ na raiz do projeto
uma mini-documentação que ilustre os exemplos e usos das
funcionalidades implementadas nesta etapa.

#+latex: \appendix %onecolumn
#+latex: \vspace{2cm}

* Dicas Básicas
** Entrada e Saída Padrão

Organize a sua solução para que o compilador leia da entrada padrão o
programa em nossa linguagem e gere o programa em assembly na saída
padrão. Dessa forma, pode-se realizar o seguinte comando (~etapa7~ é o
binário do compilador) quando deseja-se gerar código sem otimizações:

#+BEGIN_EXAMPLE
./etapa7 < entrada > saida.s
#+END_EXAMPLE

A geração de código com otimizações deve ser da seguinte forma
(perceba o parâmetro ~-O~ para o programa, que deve ser tratado através
dos parâmetros ~argc~ e ~argv~ da função principal):

#+BEGIN_EXAMPLE
./etapa7 -O < entrada > saida.s
#+END_EXAMPLE

O código assembly sem e com otimização deverá ser capaz de ser
reconhecido e montado para um programa executável através do seguinte
comando (onde ~programa~ é um programa executável): @@latex:\linebreak@@
~gcc saida.s -o programa~

** Arquivo =main.c=

Utilize a função principal no arquivo ~main.c~ semelhante aquela já
implementada na etapa anterior. O grupo deve modificá-la para
implementar as funcionalidades necessárias da etapa corrente. Não
esqueça de liberar a memória corretamente, como uma boa prática de
programação.

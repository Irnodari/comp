#+STARTUP: overview indent
#+TITLE: Dúvidas da E2 do Projeto de Compilador
* E2
** DONE 2020-09-14
*** DONE Pergunta #1 \times 2

  Por gentileza poderia me informar se nas variáveis locais também é
  possível receber uma lista composta de nomes de variáveis?

  1. Na declaração de variáveis locais (internas às funções) não está
     explicitamente dito que podem haver múltiplas variáveis
     declaradas em apenas uma linha lógica, como em:

  int x,y,z;

  porém este comportamento é permitido para variáveis globais
  (externas às funções) . Devemos aceitar isto em variáveis locais?

*** Pergunta #2

  2. A forma como as expressões estão definidas me parece um pouco
     contraditória:

  No primeiro parágrafo da seção 3.5 expressões aritméticas são
  definidas como contendo operadores aritméticos, e as expressões
  lógicas como contendo operadores relacionais e lógicos, porém, logo
  após é dito que "Nesta etapa do trabalho não há distinção entre
  expressões aritméticas, inteiras ou lógicas".

  Devemos forçar então que as expressões aritméticas contenham apenas
  operadores aritméticos e expressões lógicas apenas relacionais e
  lógicos, ou devemos aceitar quaisquer operadores na formação dessas
  expressões?

*** Pergunta #3

  3. Na declaração de vetores (nas variávies globais) e comandos do
     tipo shift é mencionado que certos valores devem ser "inteiros
     positivos". Se temos apenas o tipo do token recebido (Neste caso
     ~TK_LIT_INT~) como podemos forçar que este valor seja positivo?

** DONE 2020-09-15
*** Pergunta #1

Na especificação você comenta que não devemos ter conflitos tanto
Reduce/Reduce, quando Shift/Reduce. Isso estamos verificando com a
própria ferramenta Bison. Queria saber se precisamos garantir que a
gramática é LR(0). Testando com aquela gramática de "Expressões
Regulares Rudimentares" (E -> E + n | n), por exemplo, o bison não
aponta conflito, mesmo ela não sendo LR(0). Precisariamos alterar a
gramática nesse caso ou ainda podemos deixar assim?

*** Pergunta #2 

Podemos ter transições vazias em nossa gramática (considerando o mesmo
comentado na pergunta acima)?
** TODO 2020-09-18
*** Pergunta #1

Gostaria de saber se quando fazemos a detecção de erros precisamos
aderir ao modo pânico ou fazer o programa terminar a execução (como é
feita pela função do yyerror)?
** TODO 2020-09-19
*** Pergunta #1
Não ficou claro para mim se as regras de associatividade e precedência
dos operadores da nossa gramática são relevantes para esta
etapa. Devemos, por algum motivo, considerá-las na criação das regras
ou elas serão utilizadas apenas em etapas futuras?
*** Pergunta #2
Alguns tokens definidos não estão sendo utilizados, como por exemplo
~TK_PR_THEN~, ~TK_OC_FORWARD_PIPE~ e ~TK_PR_CLASS~. Devemos retirar esses tokens do
parser.y e/ou scanner.l?
*** Pergunta #3
Ao encontrar um erro sintático, a execução deve terminar ou continuar
para analisar o resto da entrada?
*** Pergunta #4
Existe alguma forma de utilizar o ~TOKEN_ERRO~ para identificar erros
e/ou criar mensagens de erros mais informativas?
*** Pergunta #5
E só pra confirmar, todos pontos do enunciado que referenciam
"expressão" fazem menção ao conjunto de expressões definidas em 3.5,
certo?

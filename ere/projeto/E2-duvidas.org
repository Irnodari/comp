#+STARTUP: overview indent
#+TITLE: Dúvidas da E2 do Projeto de Compilador

* E2 2020/2
** DONE 2021-02-16 D0
*** Pergunta #1

Na definição da etapa 2, o senhor escreveu "O arquivo tokens.h da
etapa anterior desaparece, e deve ser substituído pelo arquivo
parser.y". Isto me confundiu um pouco. Eu devo gerar um .h com o
parser.y e usar este .h gerado no scanner.l, certo? Não devo incluir o
próprio .y no scanner.l, não é?

Resposta:

O bison gerará um arquivo de cabeçalho, conforme o comentário abaixo
incluso no arquivo main.c disponibilizado:
#include "parser.tab.h" //arquivo gerado com bison -d parser.y

E sim, no teu scanner.l tu deverás incluir também esse parser.tab.h de
maneira que os comandos return possam usar as constantes. Em
princípio, isto deveria estar minimamente explicado na Parte 1 da
vídeo-aula do bison. Portanto não, não deves incluir o próprio .y no
scanner.l. Em geral, na linguagem C, a inclusão com #include deve ser
somente de arquivos cabeçalho .h. Pelo menos eu sinto que isso é
aceito como uma boa prática.

** DONE 2021-02-17 D1
*** Pergunta #1

1) Na seção 3.5, o senhor menciona que "A descrição sintática deve
   aceitar qualquer operadores e subexpressão de um desses tipos como
   validos, deixando para a análise semântica das próximas etapas do
   projeto a tarefa de verificar a validade dos operandos e
   operadores.". Isto vale apenas para expressões lógicas, ou para
   aritméticas também? Devemos permitir todos os operadores nas
   operações lógicas e somente alguns nas operações aritméticas? Ou
   devemos separar (se sim, quais operadores são lógicos, quais são
   aritméticos, e quais podemos usar em ambos)? Ou ainda, devemos
   permitir todos os operadores em todos os tipos de expressões, sejam
   elas aritméticas ou lógicas?

R: Vale para lógicas e aritméticas. Não há absoluta necessidade de
separar tendo em vista que estamos averiguando apenas a sintaxe na E2,
e não a semântica de qualquer um desses operadores. Portanto sim,
podes permitir todos os operadores em todos os tipos de expressões,
sejam elas lógicas ou aritméticas.

*** Pergunta #2

2) Qual o símbolo inicial da gramática? 

R: Pode ser "programa" (o não terminal já listado no arquivo parser.y
disponibilizado).

*** Pergunta #3

3) Para lidarmos com caracteres especiais como ',' e ';', para os
   quais não temos tokens, devemos declarar eles como tokens ou usar
   ',' nas próprias regras do BISON? Por exemplo:
      exemplo: id ',' id; 

R: Idealmente podes fazer como no teu exemplo para evitar de declarar
um monte de tokens para o qual o código ascii é o suficiente.

*** Pergunta #4 

4) Como fica a questão do caractere '?', uma vez que este não apareceu
   na definição da etapa 1, porém está na etapa 2? Não gerará um erro
   léxico?

R: Por isso algumas leves modificações nas ERs são necessárias. Não é
só esta, tem também a questão dos números positivos/negativos, mas
talvez vocês já tenham percebido isso tendo em vista o que falei no
lançamento da E2.

*** Pergunta #5

5) É permitida, para varáveis locais, uma atribuição do tipo:
           int a, b, c = 1, 2, 3;
?

R: Pela especificação não.

*** Pergunta #6

6) Comandos de shift são comandos simples? Acredito que sim, porém me
   deixou um pouco confuso pois não está na descrição de comandos
   simples ("Os comandos simples da linguagem podem ser: declaração de
   variável local, atribuição, construções de fluxo de controle,
   operações de entrada, de saída, e de retorno, um bloco de comandos,
   e chamadas de função.").

R: São simples. 

*** Pergunta #7

7) Não há propósito para o THEN nessa linguagem? Não aparece na
   definição mas está nos tokens, então fiquei na dúvida.

R: Não há propósito. Veja que não foi só este token que foi abandonado
da E1 para a E2. Em geral, eu tento fazer um super conjunto na E1 para
dar uma liberdade maior para eu especificar a E2, embora isso por
vezes não seja perfeito.

** DONE 2021-02-18 D2
*** Pergunta #1

No vídeo da etapa 2, o sr. aponta verbalmente que o "shift left" é o
token "<<", contudo, na etapa 1 o sr. definiu verbalmente e
textualmente que o "shift left" era o token ">>". Devemos seguir a
nova definição, ou a anterior (textual)?

R: Usar a referência do C/C++.
https://en.wikipedia.org/wiki/Bitwise_operations_in_C#Shift_operators

*** Pergunta #2

Nas especificações da etapa 2 consta que é possível declarar múltiplas
variáveis locais a partir da separação por vírgulas, e também aponta
que é possível inicializar uma variável local. E a dúvida que eu tenho
é sobre a combinação das duas possibilidades juntas, me confirme se eu
tiver interpretado errado:

int x, y, z <= 1; -> deve ser reconhecido
int x, y, z <= 1, 2, 3; -> não deve ser reconhecido 

R: Correto. Pode-se inicializar apenas uma variável local por
vez. Portanto, entendo que isso seria válido:
int x <= 1, y <= 2, z <= 3;

** DONE 2021-02-21 D3
*** #1

eu e minha dupla estamos com uma dúvida a respeito da sintaxe de
expressão do trabalho. Poderíamos considerar que qualquer literal pode
ser um operando para uma expressão? Incluindo uma string?

--

R: Na especificação temos a listagem de situações onde os operandos
são válidos. Lá consta o seguinte texto referente às aritméticas: "As
expressões aritméticas podem ter como operandos: (a) identificadores,
opcionalmente seguidos de expressão inteira entre colchetes, para
acesso a vetores; (b) literais numéricos como inteiro e
ponto-flutuante; (c) chamada de função." e referente às lógicas:
"Outras expressões podem ser formadas considerando variáveis lógicas
do tipo =bool=." embora essa questão de tipos possa ser deixada em
aberto. Então, a resposta para esta pergunta encontra-se na
especificação, onde observa-se que não se cita o literal string.

*** #2

Uma expressão é um comando simples?

--

R: Consta na especificação "Os comandos simples da linguagem podem
ser: declaração de variável local, atribuição, construções de fluxo de
controle, operações de entrada, de saída, e de retorno, um bloco de
comandos, e chamadas de função.". Faltou nesta lista os comandos de
shift (left e right) pois eles estão detalhados na Seção 3.5 mas não
na listagem acima. Mesmo assim, shift (left e right) são comandos
simples. Então, voltando à pergunta original, a resposta para esta
pergunta encontra-se na especificação, onde observa-se que não se fala
sobre expressões.

*** #3

O programa não está aceitando 1+3, por exemplo, uma expressão válida,
pois o scanner.l considera o +3 um inteiro. Devemos consertar isso ou
mantemos a definição consistente com a etapa um?

--

R: Sem dúvidas devem acertar. Inclusive no vídeo de dúvidas "D0 D1 D2"
eu falei um pouco sobre alguns ajustes necessários no scanner.l para
que a E2 seja feita com mais tranquilidade.

*** #4

Olá Professor, fiquei em dúvida na seguinte parte da especificação:

"A linguagem inclui também a declaração de vetores, feita pela
definição de seu tamanho inteiro positivo entre colchetes, colocada a
direita do nome." Na declaração fala em inteiro positivo e no acesso
da posição do vetor tem um exemplo que pode ser expressão
"identificador[expressão] = expressão".

- No caso os dois casos(definição e acesso) podem ser uma expressão?
- E agora no E2 não precisa validar se é uma expressão que resulta num
  inteiro positivo?

--

R: Na declaração, o tamanho deve ser um inteiro positivo entre
colchetes. No acesso, pode ser uma expressão que será avaliada em
tempo de execução.

R: Não precisa validar que a expressão resultará em um inteiro
positivo. Veja que a expressão só seria avaliada em tempo de execução
(imaginando que ela depende de uma entrada ainda desconhecida do
compilador, o que é normalmente o caso).

*** #5

Estamos com algumas dúvidas sobre quais expressões devemos aceitar ou
não.

Por exemplo:

a = (( b * 1) + c) and true;

Isso é uma expressão válida mesmo combinando 1 expressão aritmética
válida: ((b*1) + c) com uma expressão lógica válida: and true ?

Deveríamos levar em consideração que o lado esquerdo da operação
retorna um número que é incompatível com o and que espera dois
booleanos?

--

R: Sim, globalmente é uma expressão válida de acordo com a
especificação E2. Minha única reticência é que na E2 está explícito
qual é o operador lógico: lá tu podes ler "todos os operadores lógicos
(&& para o e lógico, || para o ou lógico)" portanto ao invés de and,
escreva &&.

R: Isso deixaremos para a E4, portanto não há a necessidade de
averiguar a compatibilidade dos operadores e operandos.

*** #6

não estou conseguindo compilar direito o programa. Ele verifica
somente a primeira linha e quando vem a segunda linha da Syntax
error, independente do que vier depois. Esse era pra ser o
comportamento padrão? ou fiz algum erro em relação a compilação?

MakeFile: (também em anexo)

#+BEGIN_EXAMPLE
etapa1: lex.yy.c
    gcc main.c lex.yy.c -o etapa1 -lfl

etapa2: parser.tab.c lex.yy.c
    gcc -c lex.yy.c parser.tab.c
    gcc main.c -o etapa2  lex.yy.o parser.tab.o -lfl

lex.yy.c: scanner.l
    flex scanner.l

parser.tab.c: parser.y
    bison -d parser.y

clean:
    rm lex.yy.c parser.tab.c parser.tab.h etapa2
#+END_EXAMPLE

-- 

R: Uma análise do Makefile me pareceu correta, pois primeiro se
executa o bison, depois o flex e por fim a compilação. A única
alteração que eu faria seria adicionar main.c como dependência para o
alvo etapa2, tendo em vista que ele compila esse arquivo. Chamo a
atenção para os comentários do video de avaliação da E1 referente ao
comando ~rm~.

R: Quanto ao problema enfrentado "Syntax error" na segunda linha, eu
tenho a impressão que estás executando o binário "./etapa2" sem
especificar um arquivo de entrada, daí creio que a análise da entrada
realmente acontece linha à linha, o que pode ser a origem do
problema. A forma que recomendo que os testes sejam feitos (e
inclusive a forma que a objetiva será conduzida) é executar o programa
passando um arquivo na entrada padrão. Existem várias formas de fazer
isso, vejamos duas:
#+begin_src shell :results output
./etapa2 < arquivo_com_meu_programa
cat arquivo_com_meu_programa | ./etapa2 
#+end_src
Diga-me se resolveu o problema.

*** #7

Tenho uma dúvida com relação aos conflitos empilha-reduz do trabalho:

Escrevi essa regra para separar variáveis únicas de arrays:

#+BEGIN_EXAMPLE
varglobal: TK_IDENTIFICADOR | TK_IDENTIFICADOR '[' TK_PR_INT ']';
#+END_EXAMPLE

E me parece que essa regra é ambígua, pois se temos ~TK_IDENTIFICADOR~ na
pilha e encontramos um '[' podemos ou empilhar ou reduzir o conteudo
da pilha para varglobal.

No entanto, o bison não produz warnings para essa regra. Porquê?

R: Porque o bison é baseado em um autômato LALR(1) que é bem mais
esperto que isso. Veremos essa sofisticação da análise ascendente na
Semana 6, mas o conteúdo da Semana 5 já traz um indício com o SLR(1).

*** #8
**** #8.1

Na especificação sobre os comandos simples não cita que o comando
shift é um comando simples; porém, o mesmo está escrito como comando e
tem uma seção especifica para ele.

- Devo considerar ele como um comando com ';' no final ou com
  expressão?
- Além disso, devo fazer alguma validação se o inteiro é positivo ou
  não?

R: Os comandos de shift (left e right) são comandos simples. Portanto,
sim, deves considerar ele como um comando simples seguindo as regras
de comandos simples especificadas na E2. Esta questão é similar àquela
da D1.#6, veja no vídeo de dúvidas da E2 identificado por "D0 D1 D2".

R: De acordo com a especificação da E2, temos "Sendo número um literal
inteiro positivo" portanto a regra gramatical para reconhecer esses
dois comandos (left e right) já devem incorporar a verificação que o
número é um literal inteiro positivo.

**** #8.2

- O literal string e char não são citados como expressões, está
  correto isso?

Ou seja, os seguintes casos não irão funcionar:

    print("Hello");
    x = "Hello";

Apenas no caso das inicializações que irá funcionar:

    int x <= "Hello";

R: Correto. No caso dos exemplos que "não irão funcionar" acima, eles
não devem funcionar mesmo pois não temos o comando "print" e no caso
do comando de atribuição onde o que vem depois da igualdade é uma
expressão, string e char não são expressões como consta em "As
expressões aritméticas podem ter como operandos: (a) identificadores,
opcionalmente seguidos de expressão inteira entre colchetes, para
acesso a vetores; (b) literais numéricos como inteiro e
ponto-flutuante; (c) chamada de função." e referente às lógicas:
"Outras expressões podem ser formadas considerando variáveis lógicas
do tipo =bool=." embora essa questão de tipos possa ser deixada em
aberto. No caso do exemplo que "irá funcionar", tudo okay salvo que em
um programa também semanticamente correto (veremos isso mais para a
frente na E4), faria mais sentido declarar x como string em nossa
linguagem.

*** #9

Como faço para testar quais regras o BISON está usando para
identificar cada comando durante um teste? É possível gerar, por
exemplo, um relatório com as regras escolhidas? Ou devo usar alguma
função no main.c?

R: Sim, é possível. Para tal, resumidamente, deves colocar %debug no
parser.y (ou executar o bison com a opção de depuração ~-t~, veja a
manpage do bison que inclusive traz detalhamentos de várias outras
funcionalidades) e em seguida definir a variável global yydebug com o
valor 1. Feito isso, recompilar tudo e testar. As mensagens aparecerão
na saída de erro. Dá uma olhada no link abaixo para maiores detalhes.
https://www.gnu.org/software/bison/manual/html_node/Enabling-Traces.html

** TODO 2021-02-21 D4
*** #1

Estou um pouco confuso em relação a um detalhe porque pelo que entendi
ele conflita com o padrão da linguagem C (que devemos seguir em caso
de dúvidas). Os blocos de comando tem que acabar com ';'? Qual desses
dois programas é considerado válido?

PROGRAMA 1:
int main(){ return 0; };

PROGRAMA 2:
int main(){ return 0; } 

R: Vejamos a especificação na Seção "3.2 Definição de Funções". Lá
consta o seguinte: "Cada função é definida por um cabeçalho e um
corpo, sendo que esta definição não é terminada por ponto-e-vı́rgula."
onde fica claro que uma função não é terminada por ponto-e-vírgula.
Veja que isso não quer dizer que um bloco de comandos não deva ser
terminada por ponto-e-vírgula, pois tal bloco, quando no contexto de
um comando simples, é um comando simples, e todos os comandos simples
são terminados por ponto-e-vírgula. Veja que há então uma distinção de
um bloco de comandos da função do bloco de comandos que é um comando
simples.  Conclusão: o programa 1 é inválido de acordo com a E2.

Veja que meu comentário sobre "se inspirar na linguagem C" serveria
unicamente para aqueles casos não previstos na especificação da
E2. Mas sempre confirme comigo antes de tomar uma decisão inspirada na
sintaxe da linguagem C.

*** #2

Os blocos de comando não terminarão em ponto-e-virgula quando são
empregados em funções, e não terminarão em ponto-e-virgula quando são
empregados em comandos de controle (apesar do comando de controle em
si terminar com o ponto-e-virgula por ser um comando
simples). Portanto, eles só terminarão com ponto-e-vírgula dentro de
um outro bloco de controle. O bloco de controle também pode ser
vazio. Consequentemente o seguinte programa é válido em E2:

bool foo(){
  id << 3;
  { int num; };
  { { { }; }; };
  for(i = 1; : i < 5; : i = i+1;) {output "hello"};
} 

R: Acredito que a afirmação está correta, mas sinto que o exemplo não
segue fielmente a interpretação sobre os múltiplos casos de
ponto-e-vírgula e também não segue a especificação no que diz respeito
aos elementos internos do comando for. Veja as anotações "AQUI" no
código comentado abaixo:

#+BEGIN_EXAMPLE
bool foo(){
  id << 3;       // comando simples (shift), terminado por ponto-e-vírgula
  {
    int num;     // comando simples (declaração), terminado por ponto-e-vírgula
  };             // comando simples (bloco), terminado por ponto-e-vírgula
  { { { }; }; }; // comandos simples (blocos aninhados), todos terminados por ponto-e-vírgula
  for(i = 1; : i < 5; : i = i+1;) {  // AQUI -> não há necessidade de ponto-e-vírgula pois são somente atribuições
     output "hello" // AQUI -> comando simples (output), deveria ter sido terminado por ponto-e-vírgula
  };             // comando simples (comando for), terminado por ponto-e-vírgula
}                // fim de função, sem o ponto-e-vírgula
#+END_EXAMPLE



*** 


* E2 2020/1
** DONE 2020-09-14
*** Pergunta #1 \times 2

  Por gentileza poderia me informar se nas variáveis locais também é
  possível receber uma lista composta de nomes de variáveis?

  1. Na declaração de variáveis locais (internas às funções) não está
     explicitamente dito que podem haver múltiplas variáveis
     declaradas em apenas uma linha lógica, como em:

  int x,y,z;

  porém este comportamento é permitido para variáveis globais
  (externas às funções) . Devemos aceitar isto em variáveis locais?

*** Pergunta #2

  2. A forma como as expressões estão definidas me parece um pouco
     contraditória:

  No primeiro parágrafo da seção 3.5 expressões aritméticas são
  definidas como contendo operadores aritméticos, e as expressões
  lógicas como contendo operadores relacionais e lógicos, porém, logo
  após é dito que "Nesta etapa do trabalho não há distinção entre
  expressões aritméticas, inteiras ou lógicas".

  Devemos forçar então que as expressões aritméticas contenham apenas
  operadores aritméticos e expressões lógicas apenas relacionais e
  lógicos, ou devemos aceitar quaisquer operadores na formação dessas
  expressões?

*** Pergunta #3

  3. Na declaração de vetores (nas variávies globais) e comandos do
     tipo shift é mencionado que certos valores devem ser "inteiros
     positivos". Se temos apenas o tipo do token recebido (Neste caso
     ~TK_LIT_INT~) como podemos forçar que este valor seja positivo?

** DONE 2020-09-15
*** Pergunta #1

Na especificação você comenta que não devemos ter conflitos tanto
Reduce/Reduce, quando Shift/Reduce. Isso estamos verificando com a
própria ferramenta Bison. Queria saber se precisamos garantir que a
gramática é LR(0). Testando com aquela gramática de "Expressões
Regulares Rudimentares" (E -> E + n | n), por exemplo, o bison não
aponta conflito, mesmo ela não sendo LR(0). Precisariamos alterar a
gramática nesse caso ou ainda podemos deixar assim?

*** Pergunta #2 

Podemos ter transições vazias em nossa gramática (considerando o mesmo
comentado na pergunta acima)?
** DONE 2020-09-18
*** Pergunta #1
Gostaria de saber se quando fazemos a detecção de erros precisamos
aderir ao modo pânico ou fazer o programa terminar a execução (como é
feita pela função do yyerror)?
** DONE 2020-09-19 P1
*** Pergunta #1
Não ficou claro para mim se as regras de associatividade e precedência
dos operadores da nossa gramática são relevantes para esta
etapa. Devemos, por algum motivo, considerá-las na criação das regras
ou elas serão utilizadas apenas em etapas futuras?
*** Pergunta #2
Alguns tokens definidos não estão sendo utilizados, como por exemplo
~TK_PR_THEN~, ~TK_OC_FORWARD_PIPE~ e ~TK_PR_CLASS~. Devemos retirar esses tokens do
parser.y e/ou scanner.l?
*** Pergunta #3
Ao encontrar um erro sintático, a execução deve terminar ou continuar
para analisar o resto da entrada?
*** Pergunta #4
Existe alguma forma de utilizar o ~TOKEN_ERRO~ para identificar erros
e/ou criar mensagens de erros mais informativas?
*** Pergunta #5
E só pra confirmar, todos pontos do enunciado que referenciam
"expressão" fazem menção ao conjunto de expressões definidas em 3.5,
certo?
** DONE 2020-09-19 P2
*** Pergunta #0

Na etapa1 havia aqueles símbolos que não estavam no pdf da
especificação, mas que nas suas anotações você mostrava como
válidas. Depois de outros vídeos você as removeu. Queria saber se
esses símbolos que inicialmente estavam previstos pra linguagem e que
depois você os retirou foram considerados como ERRO na etapa1?  Nosso
grupo adicionou eles achando que estavam previstos, e que se manteriam
no mínimo válidos na linguagem, o que foi marcado como erro na
avaliação de etapa1.

*** Pergunta #1

Na montagem da função de erro está nos causando erro na compilação em
um dos nossos computadores.  Seguimos a documentação em :
https://www.gnu.org/software/bison/manual/html_node/Syntax-Error-Reporting-Function.html
Mas só estamos conseguindo executar com o bison na versão mais recente
(3.7.+) em uma máquina Manjaro, enquanto em outro computador do grupo
com a versão 3.5.+ está dando erro com a definição de parse.error como
custom.  Queria saber se funcionando na versão 3.7 é suficiente para a
avaliação desta etapa?

*** Pergunta #2

Na seção de expressões está escrito que identificadores são operandos
de expressões. Creio que seja o caso, mas, apenas para confirmar,
seriam expressões também apenas identificadores?

*** Pergunta #3

Por que, na declaração de variáveis locais, diz que é aceito como
inicialização apenas literais e identificadores? É permitido aceitar
inicialização com uma expressão qualquer, assim como na atribuição?
Caso essa proposta seja rejeitada, ainda restaria a dúvida se os
identificadores poderiam ser arrays e, nesse caso, se o conteúdo entre
colchetes poderia ser uma expressão qualquer também.

Assim como na dúvida acima, é permitido que input¹ e output também
recebam uma expressão qualquer? A remoção de restrições desse tipo
torna a linguagem mais simples e um pouco mais expressiva. ¹Para
input, expressões seriam utilizadas apenas no conteúdo entre
colchetes, após um identificador.

Blocos de comando devem acabar com ponto e vírgula quando forem um
comando simples dentro de outro bloco (ou seja, quando não forem
criados devido a uma construção de controle de fluxo)?

*** Pergunta #4

A respeito das variáveis locais, deve ser possível inicializar mais de
uma variável simultaneamente?

Exemplo: int a, b, c  <=  0;

*** Pergunta #5

Uma duvida sobre a entrega da etapa2: Notei que faz parte da entrega
apenas os arquivos scanner.l e parser.y. Isso quer dizer que nao
devemos incluir o main.c no nosso makefile?
** DONE 2020-09-19 (E2 D4)
*** Pergunta #0

Depois de assistir o ultimo vídeo de dúvidas, percebi uma diferença
entre a renderização do pdf e o seu arquivo .org no que diz respeito à
inicialização de variáveis locais.

Enquanto seu arquivo utiliza o operador composto <=, o pdf exibe o
operador ¡=, conforme print abaixo.

Obs.: Estou utilizando o Adobe Acrobat Pro DC no Windows

Qual dos operadores devemos utilizar? Caso seja ¡=, Podemos definir um
novo token para ele?

*** Pergunta #1

Como podemos elaborar as regras gramaticais para reconhecer a
gramática de acordo com uma determinada associatividade/precedência?

*** Pergunta #2

- Qual a influência dessas informações de associatividade/precedência
  no processo de reconhecimento sintático da gramática?

Ref Video: E2 D2

- Qual a relevância dessas informações para determinar se uma entrada
  é sintaticamente válida ou não? Pela resposta dada no vídeo me
  parece que vamos utilizar as regras da gramática como apoio para
  próximas análises... seria apenas essa a importância dessas
  informações nessa etapa?

** DONE 2020-09-20 (E2 D5)
*** Pergunta #0

Sobre a pergunta de blocos de comando acabarem por ponto e vírgula,
foi mencionado no último vídeo que estes devem ser terminados por
ponto e vírgula por serem comandos simples, todavia a especificação
explicitamente diz, na seção de controle de fluxo, que o ponto e
vírgula não é utilizado nessas construções. Por isso minha pergunta
foi específica apenas para blocos que não fazem parte destas
construções.

*** Pergunta #1

É permitido o uso de sucessivos operadores unários, como o lógico
!!!false (que avalia para true), operações de ponteiro ***ptr,
&&&value, e como sequências de sinais negativos e positivos, sem o uso
de parênteses delimitadores ?

Mais genericamente, pode haver combinações mistas de unários, como
?!false, *&value, efetivamente uma relação recursiva na regra dos
unários ?

*** Pergunta #2

Devemos prever comandos vazios, como vários ponto-vírgula sucessivos
avaliando para NOP, ou como em C quando se usa for(;;) para loop
infinito Devemos prever pares de parênteses vazios () sem efeito, de
forma semelhante ao bloco vazio {} ?

*** Pergunta #3

Como informação de erro, está de bom tamanho indicar a linha de código
e o output verboso do bison ?

 

# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+TITLE: Dúvidas da E4 do Projeto de Compilador
#+Author: Lucas Mello Schnorr
#+Date: schnorr@inf.ufrgs.br
#+Language: pt-br

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [11pt, a4paper]
#+LATEX_HEADER: \input{org-babel.tex}

#+OPTIONS: toc:nil title:nil
#+STARTUP: overview indent
#+TAGS: Lucas(L) noexport(n) deprecated(d)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* E4 2020/2
** 2021-03-22 D0
*** Dúvida #1

1) Queria saber se faz sentido uma estrutura de dados para a tabela da
   seguinte forma. A tabela contém 2 coisas: 1) um struct Simbolo, que
   é composto da chave (de tipo char*), do conteúdo (struct com os
   campos ditos no enunciado) e de um ponteiro para o próximo símbolo
   da tabela/escopo; 2) um ponteiro para a próxima tabela. Essa
   implementação poderia causar problemas? Teria sugestões?

---

R: Acho que poderia ter uma struct Tabela, que tem dentro dela uma
hash de struct Simbolo, sendo que a hash é da chave do simbolo. Sobre
o "ponteiro para a próxima tabela", eu não acho oportuno. O que temos
é uma "árvore" de tabelas de símbolo, pois temos uma "árvore" de
escopos. Veja:
#+begin_example
// escopo raiz, global
int main() {
    // escopo local, main, filho da raiz
    {
       // primeiro escopo aninhado da main, filho da main
    };
    {
       // segundo escopo aninhado da main, filho da main
    };
}
int f() {
    // escopo local, f, filho da raiz
}
#+end_example
Assim, uma tabela pode ter vários filhos que são os escopos
subjacentes. Isso não tira o fato de tu teres uma "pilha" de tabela de
símbolo para implementar as verificações. Essa pilha não exige uma
eventual conexão (de próximo) entre as tabelas empilhadas além da
estrutura de árvore supracitada.

*** Dúvida #2

2) Dentro do conteúdo de um símbolo, qual seria a melhor forma de
   armazenar os argumentos da função e seus tipos?

---

R: Temos uma lista de argumentos. Existem várias "melhores forma".

*** Dúvida #3

3) Quando reconheço um identificador (por exemplo) no parser.y, devo
   percorrer todas as variáveis contidas no escopos global e local
   para verificar se ela já foi declarada? Senão devo criar um símbolo
   novo, com chave e conteúdo, para o identificador?

---

R: Depende do tipo de reconhecimento do identificador. Se tal
identificador for em uma declaração, tu estás em modo "declarando
variável" e portanto tu tens que assumir que uma variável só não pode
ser declarada se no escopo corrente seu nome já estiver sido usado em
outra declaração. Se nesse modo tu não encontrares daí sim, tu
precisas criar algo (uma estrutura por exemplo) para inserir na tabela
corrente. Agora, se tu estás em modo "procurando uma variável já
declarada", daí tu começas pelo escopo corrente e vai subindo na
"árvore" de escopos ou, de maneira mais simples, descendo na pilha de
escopos. Então reforço: depende do tipo de reconhecimento do
identificador.

*** Dúvida #4

4) Qual a diferença entre o novo campo de tipo do nodo da AST e o
   campo de tipo que existe no conteúdo de um símbolo?

---

R: O "novo" campo de tipo do nó da AST (além daquele já usado na E3 e
que significada se o nó da AST é um if, while, etc) é algo para dizer
o tipo do dado daquele nó do ponto de vista de operações aritméticas.
Tal tipo de dado pode ser então float, int, etc. Conforme a
especificação da E4, tal campo de tipo de dado deve ser definido para
todos os nós da AST, ainda que para muitos nós da AST (por exemplo,
if, while, for) isso seja talvez visto por alguns como "artificial". O
campo de tipo que existe no conteúdo de um símbolo registra o tipo de
dado deste sı́mbolo. Eles (campo do conteúdo, campo da AST) são a mesma
coisa.

*** Dúvida #5

Tenho duas dúvidas sobre a etapa 4. A primeira é: ao implementar a
tabela de símbolos, podemos usar uma pilha para administrar os
diferentes escopos. No entanto, ao sairmos de um escopo devemos
remover o topo da pilha, e portanto a informação sobre as variáveis
declaradas ali será perdida. Essa informação deve ser salva para as
próximas etapas, ou ela só serve para detectar os erros implementados
nessa etapa? Se for para ser salva, onde devemos salvar as diferentes
tabelas? 

---

R: Ao remover da pilha não precisas removê-la para sempre. Dito isso,
como estamos fazendo a análise em uma única passagem (durante a
análise sintática), não há uma necessidade absoluta - nesta etapa - de
manter a árvore de um escopo após o termino deste escopo. Então a
solução que remover a tabela correspondente a um escopo que se termina
é aceitável nesta etapa. Para as próximas etapas, existe uma
possibilidade de se precisar dessas informações, então a estratégia da
"árvore" de tabela de símbolos é uma solução que se mantém mais no
longo prazo. Mais detalhes na Dúvida #1.

*** Dúvida #6

A segunda dúvida é a respeito dos blocos de comando aninhados. Cada
variável declarada dentro de um if, while ou for tem seu escopo
restrito a esse bloco? E devemos permitir a definição de um novo bloco
sem um comando de fluxo (por exemplo escrever algo como int main(){
bool exp1 = true; {bool exp1 = false; } } ?

---

R: Vou começar pela segunda subpergunta ("permitir a definição de um
novo bloco sem um comando de fluxo"), veja que isso já é aceito desde
a E2. Não mudamos nada aqui quanto a isso, e tal bloco indica um
escopo conforme as primeiras frases do Anexo A da especificação
E4. Agora vamos a primeira subpergunta. Bom, Eu reli as "Regras de
Escopo" e não há nada ali explicitamente sobre blocos de comandos de
controle de fluxo servirem de escopo. Então a resposta é não, blocos
de controle de fluxo não significam novos escopos. Somente o bloco que
é um comando simples.

*** Dúvida #7

Tenho uma dúvida referente á detectar novos blocos de comandos na
etapa 4. Por se tratar de um analisador ascendente, os identificadores
são adicionados à arvore antes dos blocos de comando serem
adicionados, portanto não sabemos qual é o escopo do identificador no
momento que ele é encontrado. Por não sabermos qual é o escopo, como
vou adicionar o identificador na tabela correta?

---

R: Uma forma é alterar as regras gramaticais de maneira que se tem
produções vazias no início e no final do escopo. Tais produções vazias
tem ações, e estas ações fazem o que se tem que fazer naqueles pontos
das regras gramaticais. Caso o grupo não queira usar produções vazias,
pode-se usar os marcadores abre e fecha chaves, por exemplo.

*** Dúvida #8

 1) Na seção 2.1, o senhor fala em natureza (literal, variável,
    função, etc). Devo definir constantes que representem essas
    naturezas? Por exemplo, #define VARIAVEL 1010? Além disso, o
    senhor menciona literais, porém a tabela de símbolos não deve
    conter apenas identificadores?

---

R: Deixo a critério de grupo encontrar uma forma para se especificar a
natureza. Uso de constantes é uma opção, mas existem outras como enum
por exemplo. A tabela de símbolos deve conter identificadores e
literais, conforme está escrito na primeira frase da Sec 2.1. Oode ser
de fato questionável no caso de literais tendo em vista que um mesmo
literal aparecer mais de uma vez no mesmo escopo. Ao tentar incluí-lo
na tabela de símbolos *na segunda ocorrência*, perceberá que ele já está
lá. Existem diversos caminhos possíveis válidos, vejamos
dois. Primeiro, não se faz nada. Segundo, atualiza-se as informações
(linha, etc) desta última ocorrência.

*** Dúvida #9

 2) Também na seção 2.1, o senhor fala em deixar os dados do valor do
    token pelo yylval. Porém, nas declarações, há inúmeros
    tokens. Como fica isso?

---

R: O item "dados do valor do token pelo yylval (veja E3)" quer dizer
que as informações (o valor léxico) tem que ser salvo na tabela de
símbolos. Alguns podem questionar que a informação fica repetida, pois
temos ali a localização, etc, mas é uma forma de diferenciar a visão
do léxico da E3 e a visão detalhada agora na E4. Não entendi muito o
comentário "Porém, nas declarações, há inúmeros tokens.", mas sim,
existem vários tokens, mas um token identificador específico, vamos
dizer da variável 'xis', vai estar associado a uma única entrada na
tabela de símbolos. Então, cada entrada na tabela de símbolos fará
referência a um único token.

*** Dúvida #10

Devo incluir na tabela de símbolos o valor da variável e seu endereço
na memória?


---

R: Sobre o "valor da variável". Essa pergunta só faz sentido no caso
de literais. Neste caso, isso estará embutido no "dados do valor do
token pelo yylval (veja E3)" tendo em vista que na E3 vocês já
convertem do yytext para o tipo correto (float, int, etc). A pergunta
não faz sentido no caso de identificadores pois para estes não há como
o compilador saber seu valor (o compilador não executa o programa,
apenas compila). Sobre o endereço de memória, entendo que tu estás
fazendo referência ao endereço do ponto de vista do programa do
compilador. Neste caso, este endereço de memória é irrelevante. Dito
isso, na E5, calcularemos o endereço de memória onde cada variável
ficará no programa compilado. Mas não chegamos lá ainda.

** 2021-03-27 D1
*** Dúvida #1

Na resposta à dúvida 6 da E4, o senhor diz que blocos de comando de
controle não criam novos escopos. Então, por exemplo, o codigo abaixo
estaria correto:

if(true){
    int a < = 5; // declara a
    // wtv
}
a = 6;  // usa a fora do escopo

Isso vai contra a implementação feita na linguagem C, além de não ser
muito intuitivo... O que acontece se não entrarmos no bloco do if e
nunca declararmos a variavel, por exemplo? (Imagino que seja algo com
que nos preocuparemos nas proximas etapas, porém...)

---

R: Realmente, então façamos assim: blocos de fluxo de controle também
representam novos escopos. Assim, no teu exemplo acima, ao chegar ao
~a=6;~, o compilador deve informar "variável a não declarada na linha
X", sendo que X é a linha do comando de atribuição em questão.

** 2021-03-29 D2
*** Dúvida #1

Qual o tamanho em bytes de uma função? Como inserimos isso na tabela?

---

R: O tamanho fica a critério do grupo. É importante o registro na tabela.
*** Dúvida #2

1- Qual o tipo de uma ternary expression? É correto considerar que é
inferido dos tipos das duas expressões que seguem logo após do “?” ?
Exemplo: ~var_bool ? 1 : 32.0~, nesse caso seria float, já que a partir
de int e float podemos inferir float.

---

R: Sim, é correto inferir a partir da combinação dos tipos das duas
expressões que definem os possíveis valores resultantes de toda a
expressão ternária. Quanto ao exemplo, sim, seria float por que ele
toma precedência sobre o int conforme especificado na E4.

*** Dúvida #3

2 -Em múltiplos pontos da especificação da etapa 4 é mencionado que
devemos lançar erros semânticos ao tentar passar uma string para uma
função, porém na etapa 2 foi especificado que funções só podem ser
chamadas com expressões, e que estas só permitem bool, int e
float. Desta forma, a partir da própria gramática não permitimos que
strings sejam passadas como argumento de função, ou mesmo que façam
parte de expressões, e assim nunca conseguiríamos lançar erros do tipo
~ERR_FUNCTION_STRING~ ou ~ERR_STRING_TO_X~. Devemos alterar a gramática para
permitir strings nas expressões nessa etapa? O mesmo acontece para o
tipo char também.

---

R: Sim. Existem duas formas: 1) altera a gramática e faz a análise
semântica para estes casos; 2) altera a gramática com uma produção
errada para prever tal erro semântico, retornando o código de erro
correspondente. Eu diria que 2) é mais simples de fazer, mas encorajo
a fazer o 1) pois estamos na E4 agora e cada especificação pode mudar
ligeiramente o que antes havia sido estabelecido.

*** Dúvida #4

3 - Quando da declaração de uma função, cria-se um novo escopo, a
partir do bloco de comandos após o cabeçalho da função. Em uma
linguagem como C os argumentos da função são declarados como variáveis
no novo escopo, para que sejam acessíveis naquele escopo. Na
especificação isso não é mencionado, devemos implementar esse
comportamento?

--- 

R: Os parâmetros reais fazem parte do escopo da função. Portanto, a
criação do escopo da função deve acontecer imediatamente antes do
reconhecimento da sua lista de parâmetros. A função por si só deve ser
inserida no escopo que a define (caso contrário não poderia ser
chamada).

* E4 2020/1
** DONE 2020-10-06 D0
*** Dúvida #1

Estou agora refazendo as ações semânticas feitas na etapa 3, de
forma a criar as entradas na tabela de símbolos, e me deparo com a
forma gramatical através da qual identifico variáveis globais:

#+BEGIN_EXAMPLE
var_global: tipo_estatico lista_identificadores_globais ';' ;

lista_identificadores_globais:  identificador_global
         | identificador_global ',' lista_identificadores_globais ;

identificador_global:    TK_IDENTIFICADOR 
         | TK_IDENTIFICADOR '[' TK_LIT_INT ']' ;
#+END_EXAMPLE

Dado que o reconhecimento da entrada é ascendente e da esquerda para a
direita, como posso definir o tipo do nodo dos identificadores globais
pertencentes à lista se apenas terei essa informação após toda a lista
ser processada na entrada?

Em outras palavras, a ordem na qual estas regras são processadas para
a entrada "int x,y;", por exemplo, é primeiro o reconhecimendo do tipo
"int", e depois os identificadores "x" e "y". Ao meu ver, isto requer
o uso de um atributo herdado da lista de identificadores, o que
levaria a um esquema L-atribuído, requerindo regras internas, como na
possível solução:

#+BEGIN_EXAMPLE
var_global: tipo_estatico {lista_identificadores_globais->tipo = tipo_estatico->tipo}
            lista_identificadores_globais {/*Insere na tabela de simbolos*/}';'
#+END_EXAMPLE

Esta interpretação é correta ou estou realizando algum equívoco? Caso
a interpretação esteja correta, isto é permitido no contexto do
trabalho?

*** Dúvida #2

Notei que nesta etapa não foi dado um arquivo "main.c" para que sejam
realizados os testes. Podemos então usar (e inclusive realizar a
entrega desta etapa com ele) o mesmo arquivo da etapa 3?

*** Dúvida #3

Enquanto atribuia os tipos correspondentes às palavras reservadas int,
float, etc. fiquei com dúvida quanto aos especificadores de tipo, isto
é, "const" e "static". Esta informação deve ser guardada em algum
lugar, ou devemos realizar algum tratamento especial nestes casos?

** DONE 2020-10-13 D1
*** Dúvidas #1

Boa noite professor, surgiram algumas dúvidas rápidas de se responder
sobre a etapa 4, se for mais conveniente nem precisa fazer um vídeo
sobre elas:

1) Os operadores unários "*"(Resolução de ponteiro) e "#"(Acesso a
   tabela hash) esperam qual tipo de identificador operando?

2) O operador ternário (exp ? exp : exp) requer que as expressões
   resultantes tenham o mesmo tipo (ou pelo menos tipos compatíveis)?

3) Funções podem ser recursivas? Em termos mais técnicos, devo inserir
   a declaração da função tanto na tabela de símbolos do seu escopo
   quanto na do escopo global?

4) Para realizar a transferência dos tipos entre variáveis estou
   usando um novo campo na union dos tokens, que contém o tipo das
   palavras reservadas "int", "float", etc. Isto é permitido?
** DONE 2020-10-14 D2
*** Dúvida #1

1) Podemos usar C++ ou o flex/bison suportam apenas C?

*** Dúvida #2

2) Segundo o enunciado, precisamos guardar literais na tabela de
   símbolos. Por que isso é necessário?
** DONE 2020-10-16 D3
*** Dúvida #1

Sobre a etapa 4, retornando na questão dos literais na tabela de
símbolos: o que não ficou muito claro pra mim é como lidar com
múltiplas ocorrências de um mesmo literal? Digamos que na passagem
pelo código fonte eu encontre o literal 2 e adicione ele na tabela
hash, e mais adiante eu encontre outro literal 2. Essa ocorrência é
adicionada na tabela hash (com alguma informação adicional, como
número da linha, para distinção) ou eu simplesmente ignoro e mantenho
sempre a primeira ocorrência?

*** Dúvida #2

Como dito no ultimo vídeo de dúvidas, devemos adicionar literais na
tabela. Como tratamos literais iguais? devemos adicionar multiplas
vezes? ou deixar apenas a que já temos? se for manter a anterior,
devemos alterar algo nos dados dela?

*** Dúvida #3

Como poderemos aceitar expressão de (string + string), adicionei na
gramática a possibilidade de char e string dentro das expressões, para
que esse caso seja permitido enquanto outras operações, e
transformações com esses tipos causem erro. Gostaria de saber para
casos como (string * string), por exemplo, que tipo de erro devemos
retornar? (dizer que está sendo feita alguma conversão da string e
utilizar o ~ERR_STRING_TO_X~?)

*** Dúvida #4

Na parte de conversão explicita, quando diz que "a conversão de um
float para int perde sua parte fracionária", é só uma explicação do
que será feito eventualmente no desenvolvimento do compilador?, não
devemos tentar alterar esse valor na tabela de nenhuma forma agora,
correto?

*** Dúvida #5

Para funções que tem retorno string, temos que definir o tamanho desta
com a maior string de retorno encontrada no corpo de uma função? Se
sim, se houver uma função recursiva com retorno string, isso pode
causar problemas por possivelmente não ter o valor "máximo" de retorno
até um determinado momento?

*** Dúvida #6

No caso de vetores de string, como tratamos o tamanho para os
elementos strings?


** TODO 2020-10-17 D4
*** Dúvida #1

(...) teria mais um questionamento sobre strings. Strings vazias ("")
teriam um tamanho 0. Se a inicialização de uma variavel do tipo string
for com uma string vazia, deveriamos trancar o tamanho das strings em
0 também?  Não sabia como definir isso, e estou atribuindo tamanho -1
às strings sem inicialização, para que não tenha conflito em saber se
ela não foi inicializada ou FOI inicializada com uma string vazia,
isso estaria certo, ou a string deve ter seu tamanho > 0 quando algo
seja atribuido à ela?

*** Dúvida #2

O que é esperado para um caso de declaração local da seguinte forma:

int a <= a; (em que a não foi declarado anteriormente), isso seria
valido na linguagem? Um outro caso parecido:

int a <= 0, b <= a; este caso deveria ser valido, correto? 

*** Dúvida #3

Sobre aquele caso de um vetor de strings, você comentou no vídeo de
dúvida anterior que para cada elemento string teriamos um tamanho (o
que concordo), mas estou em dúvida quanto a implementação disso. Havia
falado com um colega e pensamos em definir um elemento a mais na
tabela de símbolo para esse caso específico, que manteria a informação
de tamanho para cada posição.

Porém, vetores, em atribuições, por exemplo, podem ser indexados a
partir de uma expressão, a qual não sabemos nessa etapa qual indice
corresponderia no vetor. Com isso, não sabendo o indice do vetor, como
que seria avaliada uma atribuição para um elemento string desse vetor?

*** Dúvida #4

Na mesma linha da pergunta do vídeo anterior sobre como proceder
quando o retorno da função é do tipo string, o que devemos fazer
quando houver um argumento do tipo string, visto que só saberemos seu
tamanho no momento da chamada da função?

*** Dúvida #5

Uma variável pode ter o mesmo nome de uma função, já que é possível
verificar a natureza do identificador pelo contexto (se é seguido por
() ou não)?
*** Dúvida #6

Pelo que entendi, se estiver em uma atribuição/inicialização e tiver
um tipo string recebendo outro tipo que diferente de string, temos um
erro ~ERR_WRONG_TYPE~. E, se estiver em uma operação cujos operandos são
do tipo string e int, por exemplo, temos um erro
~ERR_STRING_TO_X~. Correto? Com isso, se houver uma operação com uma
string e um char, qual erro deve ser dado ~ERR_CHAR_TO_X~ ou
~ERR_STRING_TO_X~?
